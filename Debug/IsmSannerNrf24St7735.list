
IsmSannerNrf24St7735.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005390  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008d0  080054a0  080054a0  000154a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d70  08005d70  000201f4  2**0
                  CONTENTS
  4 .ARM          00000000  08005d70  08005d70  000201f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005d70  08005d70  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08005d70  08005d70  00015d70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08005d78  08005d78  00015d78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  08005d80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000016a4  200001f4  08005f74  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001898  08005f74  00021898  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000224ef  00000000  00000000  0002021d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004525  00000000  00000000  0004270c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000b3ad  00000000  00000000  00046c31  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000f20  00000000  00000000  00051fe0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001280  00000000  00000000  00052f00  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0001d8d2  00000000  00000000  00054180  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   000114c4  00000000  00000000  00071a52  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0008a6c2  00000000  00000000  00082f16  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0010d5d8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002aa4  00000000  00000000  0010d654  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f4 	.word	0x200001f4
 800012c:	00000000 	.word	0x00000000
 8000130:	08005488 	.word	0x08005488

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f8 	.word	0x200001f8
 800014c:	08005488 	.word	0x08005488

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2iz>:
 80008ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008f4:	d215      	bcs.n	8000922 <__aeabi_d2iz+0x36>
 80008f6:	d511      	bpl.n	800091c <__aeabi_d2iz+0x30>
 80008f8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000900:	d912      	bls.n	8000928 <__aeabi_d2iz+0x3c>
 8000902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000906:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800090a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000912:	fa23 f002 	lsr.w	r0, r3, r2
 8000916:	bf18      	it	ne
 8000918:	4240      	negne	r0, r0
 800091a:	4770      	bx	lr
 800091c:	f04f 0000 	mov.w	r0, #0
 8000920:	4770      	bx	lr
 8000922:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000926:	d105      	bne.n	8000934 <__aeabi_d2iz+0x48>
 8000928:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800092c:	bf08      	it	eq
 800092e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000932:	4770      	bx	lr
 8000934:	f04f 0000 	mov.w	r0, #0
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop

0800093c <__aeabi_d2uiz>:
 800093c:	004a      	lsls	r2, r1, #1
 800093e:	d211      	bcs.n	8000964 <__aeabi_d2uiz+0x28>
 8000940:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000944:	d211      	bcs.n	800096a <__aeabi_d2uiz+0x2e>
 8000946:	d50d      	bpl.n	8000964 <__aeabi_d2uiz+0x28>
 8000948:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800094c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000950:	d40e      	bmi.n	8000970 <__aeabi_d2uiz+0x34>
 8000952:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000956:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800095a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800095e:	fa23 f002 	lsr.w	r0, r3, r2
 8000962:	4770      	bx	lr
 8000964:	f04f 0000 	mov.w	r0, #0
 8000968:	4770      	bx	lr
 800096a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800096e:	d102      	bne.n	8000976 <__aeabi_d2uiz+0x3a>
 8000970:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000974:	4770      	bx	lr
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	4770      	bx	lr

0800097c <_Z10setupScannv>:

const int y0=20;
const int H=ST7735_HEIGHT-1-y0;


void setupScann(){
 800097c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800097e:	b083      	sub	sp, #12
//  подготавливаем дисплей и модуль к работе
	ST7735_Init();
 8000980:	f003 fbb8 	bl	80040f4 <ST7735_Init>
	ST7735_FillScreen(/*ST7735_COLOR565(48,48,48)*/ST7735_BLACK);
 8000984:	2000      	movs	r0, #0
 8000986:	f003 fcab 	bl	80042e0 <ST7735_FillScreen>
    radio.begin();                                                                                          // инициируем работу модуля nRF24L01+
 800098a:	4c39      	ldr	r4, [pc, #228]	; (8000a70 <_Z10setupScannv+0xf4>)
 800098c:	4620      	mov	r0, r4
 800098e:	f000 fce9 	bl	8001364 <_ZN4RF245beginEv>
    radio.setAutoAck(false);                                                                                // отключаем режим подтверждения приёма
 8000992:	2100      	movs	r1, #0
 8000994:	4620      	mov	r0, r4
 8000996:	f000 fcad 	bl	80012f4 <_ZN4RF2410setAutoAckEb>
    memset(ChannelPowerNow, 0, sizeof(ChannelPowerNow));                                                    // заполняем все элементы массива ChannelPowerNow значением 0
 800099a:	f44f 7400 	mov.w	r4, #512	; 0x200
 800099e:	4622      	mov	r2, r4
 80009a0:	2100      	movs	r1, #0
 80009a2:	4834      	ldr	r0, [pc, #208]	; (8000a74 <_Z10setupScannv+0xf8>)
 80009a4:	f004 fd1a 	bl	80053dc <memset>
    memset(ChannelPowerMem, 1, sizeof(ChannelPowerMem));
 80009a8:	4622      	mov	r2, r4
 80009aa:	2101      	movs	r1, #1
 80009ac:	4832      	ldr	r0, [pc, #200]	; (8000a78 <_Z10setupScannv+0xfc>)
 80009ae:	f004 fd15 	bl	80053dc <memset>
    ChannelPowerMax=0;
 80009b2:	2000      	movs	r0, #0
 80009b4:	4b31      	ldr	r3, [pc, #196]	; (8000a7c <_Z10setupScannv+0x100>)
 80009b6:	6018      	str	r0, [r3, #0]

	ST7735_FillRectangle(0,y0-1,128,1,ST7735_COLOR565(192,192,192));
 80009b8:	f24c 6318 	movw	r3, #50712	; 0xc618
 80009bc:	9300      	str	r3, [sp, #0]
 80009be:	2301      	movs	r3, #1
 80009c0:	2280      	movs	r2, #128	; 0x80
 80009c2:	2113      	movs	r1, #19
 80009c4:	f003 fc38 	bl	8004238 <ST7735_FillRectangle>

	ST7735_setColor(ST7735_GREEN);
 80009c8:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 80009cc:	f003 fc94 	bl	80042f8 <ST7735_setColor>

    int i=120;
 80009d0:	2478      	movs	r4, #120	; 0x78
    do{
		ST7735_FillRectangle(i,y0-2-5,1,4,ST7735_COLOR565(192,192,192));
 80009d2:	f24c 6718 	movw	r7, #50712	; 0xc618
 80009d6:	2604      	movs	r6, #4
 80009d8:	2501      	movs	r5, #1
 80009da:	9700      	str	r7, [sp, #0]
 80009dc:	4633      	mov	r3, r6
 80009de:	462a      	mov	r2, r5
 80009e0:	210d      	movs	r1, #13
 80009e2:	b2a0      	uxth	r0, r4
 80009e4:	f003 fc28 	bl	8004238 <ST7735_FillRectangle>
    }while (i-=10);
 80009e8:	3c0a      	subs	r4, #10
 80009ea:	d1f6      	bne.n	80009da <_Z10setupScannv+0x5e>

	ST7735_print("0",0,0);
 80009ec:	2200      	movs	r2, #0
 80009ee:	4611      	mov	r1, r2
 80009f0:	4823      	ldr	r0, [pc, #140]	; (8000a80 <_Z10setupScannv+0x104>)
 80009f2:	f003 fc87 	bl	8004304 <ST7735_print>

	ST7735_print("50",50-Font_7x10.width,0);
 80009f6:	4c23      	ldr	r4, [pc, #140]	; (8000a84 <_Z10setupScannv+0x108>)
 80009f8:	7821      	ldrb	r1, [r4, #0]
 80009fa:	f1c1 0132 	rsb	r1, r1, #50	; 0x32
 80009fe:	2200      	movs	r2, #0
 8000a00:	b289      	uxth	r1, r1
 8000a02:	4821      	ldr	r0, [pc, #132]	; (8000a88 <_Z10setupScannv+0x10c>)
 8000a04:	f003 fc7e 	bl	8004304 <ST7735_print>

	ST7735_print("100",100-Font_7x10.width*1.5,0);
 8000a08:	7820      	ldrb	r0, [r4, #0]
 8000a0a:	f7ff fcf3 	bl	80003f4 <__aeabi_i2d>
 8000a0e:	2200      	movs	r2, #0
 8000a10:	4b1e      	ldr	r3, [pc, #120]	; (8000a8c <_Z10setupScannv+0x110>)
 8000a12:	f7ff fd59 	bl	80004c8 <__aeabi_dmul>
 8000a16:	4602      	mov	r2, r0
 8000a18:	460b      	mov	r3, r1
 8000a1a:	2000      	movs	r0, #0
 8000a1c:	491c      	ldr	r1, [pc, #112]	; (8000a90 <_Z10setupScannv+0x114>)
 8000a1e:	f7ff fb9b 	bl	8000158 <__aeabi_dsub>
 8000a22:	f7ff ff8b 	bl	800093c <__aeabi_d2uiz>
 8000a26:	2200      	movs	r2, #0
 8000a28:	b281      	uxth	r1, r0
 8000a2a:	481a      	ldr	r0, [pc, #104]	; (8000a94 <_Z10setupScannv+0x118>)
 8000a2c:	f003 fc6a 	bl	8004304 <ST7735_print>

	ST7735_FillRectangle(50 ,y0-2-7,1,7,ST7735_GREEN);
 8000a30:	f44f 64fc 	mov.w	r4, #2016	; 0x7e0
 8000a34:	9400      	str	r4, [sp, #0]
 8000a36:	2307      	movs	r3, #7
 8000a38:	2201      	movs	r2, #1
 8000a3a:	210b      	movs	r1, #11
 8000a3c:	2032      	movs	r0, #50	; 0x32
 8000a3e:	f003 fbfb 	bl	8004238 <ST7735_FillRectangle>
	ST7735_FillRectangle(100,y0-2-7,1,7,ST7735_GREEN);
 8000a42:	9400      	str	r4, [sp, #0]
 8000a44:	2307      	movs	r3, #7
 8000a46:	2201      	movs	r2, #1
 8000a48:	210b      	movs	r1, #11
 8000a4a:	2064      	movs	r0, #100	; 0x64
 8000a4c:	f003 fbf4 	bl	8004238 <ST7735_FillRectangle>

	radio.setChannel(0);
 8000a50:	4c07      	ldr	r4, [pc, #28]	; (8000a70 <_Z10setupScannv+0xf4>)
 8000a52:	2100      	movs	r1, #0
 8000a54:	4620      	mov	r0, r4
 8000a56:	f000 fb99 	bl	800118c <_ZN4RF2410setChannelEh>
	radio.startListening();             // начинаем прослушивать очередной канал
 8000a5a:	4620      	mov	r0, r4
 8000a5c:	f000 fbf4 	bl	8001248 <_ZN4RF2414startListeningEv>
	HAL_Delay(150);                                                // ждём 50 мкс
 8000a60:	2096      	movs	r0, #150	; 0x96
 8000a62:	f000 fd33 	bl	80014cc <HAL_Delay>
	radio.stopListening();                        // останавливаем прослушивание
 8000a66:	4620      	mov	r0, r4
 8000a68:	f000 fb99 	bl	800119e <_ZN4RF2413stopListeningEv>
//        if(i%20==0){ST7735_printNumI(i, PositionPoints[9]-(i==0?(ST7735_getFontXsize()/2):(i<100?(ST7735_getFontXsize()):(ST7735_getFontXsize()*3/2))), PositionPoints[7]);} // выводим текст - номера каналов
//        if(i%40==0){ST7735_printNumI(((int)2400+i), PositionPoints[9]-(i==0?(ST7735_getFontXsize()/2):(ST7735_getFontXsize()*2)), PositionPoints[6]);} // выводим текст - частоты каналов
//    }   ST7735_drawLine(PositionLeft,PositionPoints[8],(PositionLeft+128*PositionWidth),PositionPoints[8]); // выводим горизонтальную линию
//        ST7735_print("N",   PositionLeft+129*PositionWidth, PositionPoints[7]);                             // выводим название шкалы - номер  канала
//        ST7735_print("MGz", PositionLeft+129*PositionWidth, PositionPoints[6]);                             // выводим название шкалы - частота канала
}
 8000a6c:	b003      	add	sp, #12
 8000a6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a70:	20000620 	.word	0x20000620
 8000a74:	20000414 	.word	0x20000414
 8000a78:	20000214 	.word	0x20000214
 8000a7c:	20000210 	.word	0x20000210
 8000a80:	080054b0 	.word	0x080054b0
 8000a84:	20000018 	.word	0x20000018
 8000a88:	080054b4 	.word	0x080054b4
 8000a8c:	3ff80000 	.word	0x3ff80000
 8000a90:	40590000 	.word	0x40590000
 8000a94:	080054b8 	.word	0x080054b8

08000a98 <_Z9loopScannv>:

void loopScann(){
 8000a98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a9c:	b082      	sub	sp, #8
	char txt[32]={0,};
	int refresh;

//  сканируем очередной канал и сохраняем его данные
	radio.setChannel(ChannelScan); // устанавливаем очередной канал работы модуля
 8000a9e:	4c50      	ldr	r4, [pc, #320]	; (8000be0 <_Z9loopScannv+0x148>)
 8000aa0:	4b50      	ldr	r3, [pc, #320]	; (8000be4 <_Z9loopScannv+0x14c>)
 8000aa2:	7819      	ldrb	r1, [r3, #0]
 8000aa4:	4620      	mov	r0, r4
 8000aa6:	f000 fb71 	bl	800118c <_ZN4RF2410setChannelEh>
	radio.startListening();             // начинаем прослушивать очередной канал
 8000aaa:	4620      	mov	r0, r4
 8000aac:	f000 fbcc 	bl	8001248 <_ZN4RF2414startListeningEv>
	delayMicroseconds(50);                                                // ждём 50 мкс
 8000ab0:	2032      	movs	r0, #50	; 0x32
 8000ab2:	f003 fc57 	bl	8004364 <_Z17delayMicrosecondsi>
	static int x=0,toggle=0;
	if (++x>7) {x=0;toggle=((toggle==0)?1:0);}
 8000ab6:	4b4c      	ldr	r3, [pc, #304]	; (8000be8 <_Z9loopScannv+0x150>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	3301      	adds	r3, #1
 8000abc:	2b07      	cmp	r3, #7
 8000abe:	dc34      	bgt.n	8000b2a <_Z9loopScannv+0x92>
 8000ac0:	4a49      	ldr	r2, [pc, #292]	; (8000be8 <_Z9loopScannv+0x150>)
 8000ac2:	6013      	str	r3, [r2, #0]
	ST7735_FillRectangle(x+120, 0,1,10, ST7735_BLUE*toggle);
 8000ac4:	4b48      	ldr	r3, [pc, #288]	; (8000be8 <_Z9loopScannv+0x150>)
 8000ac6:	6818      	ldr	r0, [r3, #0]
 8000ac8:	3078      	adds	r0, #120	; 0x78
 8000aca:	4b48      	ldr	r3, [pc, #288]	; (8000bec <_Z9loopScannv+0x154>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	ebc3 1343 	rsb	r3, r3, r3, lsl #5
 8000ad2:	b29b      	uxth	r3, r3
 8000ad4:	9300      	str	r3, [sp, #0]
 8000ad6:	230a      	movs	r3, #10
 8000ad8:	2201      	movs	r2, #1
 8000ada:	2100      	movs	r1, #0
 8000adc:	b280      	uxth	r0, r0
 8000ade:	f003 fbab 	bl	8004238 <ST7735_FillRectangle>
	radio.stopListening();                        // останавливаем прослушивание
 8000ae2:	4c3f      	ldr	r4, [pc, #252]	; (8000be0 <_Z9loopScannv+0x148>)
 8000ae4:	4620      	mov	r0, r4
 8000ae6:	f000 fb5a 	bl	800119e <_ZN4RF2413stopListeningEv>
	if (radio.testRPD()) {
 8000aea:	4620      	mov	r0, r4
 8000aec:	f000 fc0e 	bl	800130c <_ZN4RF247testRPDEv>
 8000af0:	b138      	cbz	r0, 8000b02 <_Z9loopScannv+0x6a>
		ChannelPowerNow[ChannelScan]++;
 8000af2:	4b3c      	ldr	r3, [pc, #240]	; (8000be4 <_Z9loopScannv+0x14c>)
 8000af4:	7819      	ldrb	r1, [r3, #0]
 8000af6:	4a3e      	ldr	r2, [pc, #248]	; (8000bf0 <_Z9loopScannv+0x158>)
 8000af8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8000afc:	3301      	adds	r3, #1
 8000afe:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	} // если сигнал на указанном канале имел мощность > -64 дБм, то увеличиваем значение в массиве ChannelPowerNow для текущего канала (функция не работает на модулях nRF24L01 без знака «+»)
	if (ChannelPowerMax < ChannelPowerNow[ChannelScan]) { // если мощность отсканированного канала превышает ранее полученное максимальное значение для этого канала, то ...
 8000b02:	4b38      	ldr	r3, [pc, #224]	; (8000be4 <_Z9loopScannv+0x14c>)
 8000b04:	781b      	ldrb	r3, [r3, #0]
 8000b06:	4a3a      	ldr	r2, [pc, #232]	; (8000bf0 <_Z9loopScannv+0x158>)
 8000b08:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000b0c:	4939      	ldr	r1, [pc, #228]	; (8000bf4 <_Z9loopScannv+0x15c>)
 8000b0e:	6809      	ldr	r1, [r1, #0]
 8000b10:	428a      	cmp	r2, r1
		ChannelPowerMax = ChannelPowerNow[ChannelScan]; // сохраняем мощность отсканированного канала как максимальную
 8000b12:	bfc4      	itt	gt
 8000b14:	4937      	ldrgt	r1, [pc, #220]	; (8000bf4 <_Z9loopScannv+0x15c>)
 8000b16:	600a      	strgt	r2, [r1, #0]
		refresh=1;
	}
	ChannelScan++;                      // увеличиваем номер сканируемого канала
 8000b18:	3301      	adds	r3, #1
 8000b1a:	b2db      	uxtb	r3, r3

	//  выводим полученные данные                                                                               // данные выводятся по одному каналу, через полный цикл сканирования всех каналов
	if (ChannelScan == 128) { // если был просканирован последний возможный канал, то ...
 8000b1c:	2b80      	cmp	r3, #128	; 0x80
 8000b1e:	d00e      	beq.n	8000b3e <_Z9loopScannv+0xa6>
	ChannelScan++;                      // увеличиваем номер сканируемого канала
 8000b20:	4a30      	ldr	r2, [pc, #192]	; (8000be4 <_Z9loopScannv+0x14c>)
 8000b22:	7013      	strb	r3, [r2, #0]


			}while(128>= (++ChannelPrint));
		refresh=0;
	}
}
 8000b24:	b002      	add	sp, #8
 8000b26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (++x>7) {x=0;toggle=((toggle==0)?1:0);}
 8000b2a:	4b2f      	ldr	r3, [pc, #188]	; (8000be8 <_Z9loopScannv+0x150>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	601a      	str	r2, [r3, #0]
 8000b30:	4a2e      	ldr	r2, [pc, #184]	; (8000bec <_Z9loopScannv+0x154>)
 8000b32:	6813      	ldr	r3, [r2, #0]
 8000b34:	fab3 f383 	clz	r3, r3
 8000b38:	095b      	lsrs	r3, r3, #5
 8000b3a:	6013      	str	r3, [r2, #0]
 8000b3c:	e7c2      	b.n	8000ac4 <_Z9loopScannv+0x2c>
		ChannelScan = 1;                                 // переходим к 0 каналу
 8000b3e:	4b29      	ldr	r3, [pc, #164]	; (8000be4 <_Z9loopScannv+0x14c>)
 8000b40:	2201      	movs	r2, #1
 8000b42:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_TogglePin(fromMX(LED_FLASH));
 8000b44:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b48:	482b      	ldr	r0, [pc, #172]	; (8000bf8 <_Z9loopScannv+0x160>)
 8000b4a:	f000 fe37 	bl	80017bc <HAL_GPIO_TogglePin>
		ChannelPrint=0;
 8000b4e:	4b2b      	ldr	r3, [pc, #172]	; (8000bfc <_Z9loopScannv+0x164>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	701a      	strb	r2, [r3, #0]
			if ( (ChannelPowerNow[ChannelPrint]!=ChannelPowerMem[ChannelPrint]) || (refresh!=0) ) {
 8000b54:	461c      	mov	r4, r3
 8000b56:	4d26      	ldr	r5, [pc, #152]	; (8000bf0 <_Z9loopScannv+0x158>)
				int h=(double)(H)*ChannelPowerNow[ChannelPrint]/ChannelPowerMax;
 8000b58:	a71f      	add	r7, pc, #124	; (adr r7, 8000bd8 <_Z9loopScannv+0x140>)
 8000b5a:	e9d7 6700 	ldrd	r6, r7, [r7]
			if ( (ChannelPowerNow[ChannelPrint]!=ChannelPowerMem[ChannelPrint]) || (refresh!=0) ) {
 8000b5e:	f894 a000 	ldrb.w	sl, [r4]
 8000b62:	f855 002a 	ldr.w	r0, [r5, sl, lsl #2]
				ChannelPowerMem[ChannelPrint]=ChannelPowerNow[ChannelPrint];
 8000b66:	4b26      	ldr	r3, [pc, #152]	; (8000c00 <_Z9loopScannv+0x168>)
 8000b68:	f843 002a 	str.w	r0, [r3, sl, lsl #2]
				int h=(double)(H)*ChannelPowerNow[ChannelPrint]/ChannelPowerMax;
 8000b6c:	f7ff fc42 	bl	80003f4 <__aeabi_i2d>
 8000b70:	4632      	mov	r2, r6
 8000b72:	463b      	mov	r3, r7
 8000b74:	f7ff fca8 	bl	80004c8 <__aeabi_dmul>
 8000b78:	4680      	mov	r8, r0
 8000b7a:	4689      	mov	r9, r1
 8000b7c:	4b1d      	ldr	r3, [pc, #116]	; (8000bf4 <_Z9loopScannv+0x15c>)
 8000b7e:	6818      	ldr	r0, [r3, #0]
 8000b80:	f7ff fc38 	bl	80003f4 <__aeabi_i2d>
 8000b84:	4602      	mov	r2, r0
 8000b86:	460b      	mov	r3, r1
 8000b88:	4640      	mov	r0, r8
 8000b8a:	4649      	mov	r1, r9
 8000b8c:	f7ff fdc6 	bl	800071c <__aeabi_ddiv>
 8000b90:	f7ff feac 	bl	80008ec <__aeabi_d2iz>
				ST7735_FillRectangle(ChannelPrint,y0		,1,H-(h-1)	,ST7735_BLACK);
 8000b94:	fa1f f880 	uxth.w	r8, r0
 8000b98:	f1c8 036c 	rsb	r3, r8, #108	; 0x6c
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	9200      	str	r2, [sp, #0]
 8000ba0:	b29b      	uxth	r3, r3
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	2114      	movs	r1, #20
 8000ba6:	4650      	mov	r0, sl
 8000ba8:	f003 fb46 	bl	8004238 <ST7735_FillRectangle>
				ST7735_FillRectangle(ChannelPrint,y0+H-(h)	,1,(h+1)	,ST7735_YELLOW);
 8000bac:	f108 0301 	add.w	r3, r8, #1
 8000bb0:	f1c8 017f 	rsb	r1, r8, #127	; 0x7f
 8000bb4:	7820      	ldrb	r0, [r4, #0]
 8000bb6:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8000bba:	9200      	str	r2, [sp, #0]
 8000bbc:	b29b      	uxth	r3, r3
 8000bbe:	2201      	movs	r2, #1
 8000bc0:	b289      	uxth	r1, r1
 8000bc2:	f003 fb39 	bl	8004238 <ST7735_FillRectangle>
			}while(128>= (++ChannelPrint));
 8000bc6:	7823      	ldrb	r3, [r4, #0]
 8000bc8:	3301      	adds	r3, #1
 8000bca:	b2db      	uxtb	r3, r3
 8000bcc:	7023      	strb	r3, [r4, #0]
 8000bce:	2b80      	cmp	r3, #128	; 0x80
 8000bd0:	d9c5      	bls.n	8000b5e <_Z9loopScannv+0xc6>
 8000bd2:	e7a7      	b.n	8000b24 <_Z9loopScannv+0x8c>
 8000bd4:	f3af 8000 	nop.w
 8000bd8:	00000000 	.word	0x00000000
 8000bdc:	405ac000 	.word	0x405ac000
 8000be0:	20000620 	.word	0x20000620
 8000be4:	20000000 	.word	0x20000000
 8000be8:	20000618 	.word	0x20000618
 8000bec:	2000061c 	.word	0x2000061c
 8000bf0:	20000414 	.word	0x20000414
 8000bf4:	20000210 	.word	0x20000210
 8000bf8:	40011000 	.word	0x40011000
 8000bfc:	20000614 	.word	0x20000614
 8000c00:	20000214 	.word	0x20000214

08000c04 <_GLOBAL__sub_I_p_setupScann>:
}
 8000c04:	b508      	push	{r3, lr}
RF24            radio(29, 25 );                                                                               // создаём объект radio для работы с библиотекой RF24, указывая номера выводов nRF24L01+ (CE, CSN)
 8000c06:	2219      	movs	r2, #25
 8000c08:	211d      	movs	r1, #29
 8000c0a:	4802      	ldr	r0, [pc, #8]	; (8000c14 <_GLOBAL__sub_I_p_setupScann+0x10>)
 8000c0c:	f000 faac 	bl	8001168 <_ZN4RF24C1Ehh>
}
 8000c10:	bd08      	pop	{r3, pc}
 8000c12:	bf00      	nop
 8000c14:	20000620 	.word	0x20000620

08000c18 <_GLOBAL__sub_D_p_setupScann>:
 8000c18:	b508      	push	{r3, lr}

/**
 * Driver for nRF24L01(+) 2.4GHz Wireless Transceiver
 */

class RF24
 8000c1a:	4802      	ldr	r0, [pc, #8]	; (8000c24 <_GLOBAL__sub_D_p_setupScann+0xc>)
 8000c1c:	f000 fbfb 	bl	8001416 <_ZN3SPID1Ev>
 8000c20:	bd08      	pop	{r3, pc}
 8000c22:	bf00      	nop
 8000c24:	20000620 	.word	0x20000620

08000c28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c28:	b500      	push	{lr}
 8000c2a:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	930c      	str	r3, [sp, #48]	; 0x30
 8000c30:	930d      	str	r3, [sp, #52]	; 0x34
 8000c32:	930f      	str	r3, [sp, #60]	; 0x3c
 8000c34:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c36:	9305      	str	r3, [sp, #20]
 8000c38:	9306      	str	r3, [sp, #24]
 8000c3a:	9307      	str	r3, [sp, #28]
 8000c3c:	9308      	str	r3, [sp, #32]
 8000c3e:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c40:	9301      	str	r3, [sp, #4]
 8000c42:	9302      	str	r3, [sp, #8]
 8000c44:	9303      	str	r3, [sp, #12]
 8000c46:	9304      	str	r3, [sp, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c48:	2201      	movs	r2, #1
 8000c4a:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c4c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c50:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c52:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c54:	2202      	movs	r2, #2
 8000c56:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c58:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000c5a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000c5e:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c60:	a80a      	add	r0, sp, #40	; 0x28
 8000c62:	f001 fce3 	bl	800262c <HAL_RCC_OscConfig>
 8000c66:	b9c0      	cbnz	r0, 8000c9a <SystemClock_Config+0x72>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c68:	230f      	movs	r3, #15
 8000c6a:	9305      	str	r3, [sp, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c6c:	2102      	movs	r1, #2
 8000c6e:	9106      	str	r1, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c70:	2300      	movs	r3, #0
 8000c72:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c74:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c78:	9208      	str	r2, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c7a:	9309      	str	r3, [sp, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c7c:	a805      	add	r0, sp, #20
 8000c7e:	f001 ff25 	bl	8002acc <HAL_RCC_ClockConfig>
 8000c82:	b960      	cbnz	r0, 8000c9e <SystemClock_Config+0x76>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000c84:	2310      	movs	r3, #16
 8000c86:	9301      	str	r3, [sp, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	9304      	str	r3, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c8c:	a801      	add	r0, sp, #4
 8000c8e:	f001 ffd5 	bl	8002c3c <HAL_RCCEx_PeriphCLKConfig>
 8000c92:	b930      	cbnz	r0, 8000ca2 <SystemClock_Config+0x7a>
  {
    Error_Handler();
  }
}
 8000c94:	b015      	add	sp, #84	; 0x54
 8000c96:	f85d fb04 	ldr.w	pc, [sp], #4
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c9a:	b672      	cpsid	i
 8000c9c:	e7fe      	b.n	8000c9c <SystemClock_Config+0x74>
 8000c9e:	b672      	cpsid	i
 8000ca0:	e7fe      	b.n	8000ca0 <SystemClock_Config+0x78>
 8000ca2:	b672      	cpsid	i
 8000ca4:	e7fe      	b.n	8000ca4 <SystemClock_Config+0x7c>
	...

08000ca8 <main>:
{
 8000ca8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000cac:	b089      	sub	sp, #36	; 0x24
  HAL_Init();
 8000cae:	f000 fbe9 	bl	8001484 <HAL_Init>
  SystemClock_Config();
 8000cb2:	f7ff ffb9 	bl	8000c28 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb6:	2400      	movs	r4, #0
 8000cb8:	9404      	str	r4, [sp, #16]
 8000cba:	9405      	str	r4, [sp, #20]
 8000cbc:	9406      	str	r4, [sp, #24]
 8000cbe:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cc0:	4b55      	ldr	r3, [pc, #340]	; (8000e18 <main+0x170>)
 8000cc2:	699a      	ldr	r2, [r3, #24]
 8000cc4:	f042 0210 	orr.w	r2, r2, #16
 8000cc8:	619a      	str	r2, [r3, #24]
 8000cca:	699a      	ldr	r2, [r3, #24]
 8000ccc:	f002 0210 	and.w	r2, r2, #16
 8000cd0:	9200      	str	r2, [sp, #0]
 8000cd2:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cd4:	699a      	ldr	r2, [r3, #24]
 8000cd6:	f042 0220 	orr.w	r2, r2, #32
 8000cda:	619a      	str	r2, [r3, #24]
 8000cdc:	699a      	ldr	r2, [r3, #24]
 8000cde:	f002 0220 	and.w	r2, r2, #32
 8000ce2:	9201      	str	r2, [sp, #4]
 8000ce4:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ce6:	699a      	ldr	r2, [r3, #24]
 8000ce8:	f042 0208 	orr.w	r2, r2, #8
 8000cec:	619a      	str	r2, [r3, #24]
 8000cee:	699a      	ldr	r2, [r3, #24]
 8000cf0:	f002 0208 	and.w	r2, r2, #8
 8000cf4:	9202      	str	r2, [sp, #8]
 8000cf6:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf8:	699a      	ldr	r2, [r3, #24]
 8000cfa:	f042 0204 	orr.w	r2, r2, #4
 8000cfe:	619a      	str	r2, [r3, #24]
 8000d00:	699b      	ldr	r3, [r3, #24]
 8000d02:	f003 0304 	and.w	r3, r3, #4
 8000d06:	9303      	str	r3, [sp, #12]
 8000d08:	9b03      	ldr	r3, [sp, #12]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_FLASH_GPIO_Port, LED_FLASH_Pin, GPIO_PIN_RESET);
 8000d0a:	f8df 912c 	ldr.w	r9, [pc, #300]	; 8000e38 <main+0x190>
 8000d0e:	4622      	mov	r2, r4
 8000d10:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d14:	4648      	mov	r0, r9
 8000d16:	f000 fd4b 	bl	80017b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRF24_CSN_GPIO_Port, NRF24_CSN_Pin, GPIO_PIN_SET);
 8000d1a:	4d40      	ldr	r5, [pc, #256]	; (8000e1c <main+0x174>)
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d22:	4628      	mov	r0, r5
 8000d24:	f000 fd44 	bl	80017b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRF24_CE_GPIO_Port, NRF24_CE_Pin, GPIO_PIN_SET);
 8000d28:	f8df 8110 	ldr.w	r8, [pc, #272]	; 8000e3c <main+0x194>
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d32:	4640      	mov	r0, r8
 8000d34:	f000 fd3c 	bl	80017b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ST7735_CS_Pin|ST7735_DC_Pin|ST7735_RES_Pin, GPIO_PIN_RESET);
 8000d38:	4622      	mov	r2, r4
 8000d3a:	f44f 7160 	mov.w	r1, #896	; 0x380
 8000d3e:	4628      	mov	r0, r5
 8000d40:	f000 fd36 	bl	80017b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_FLASH_Pin */
  GPIO_InitStruct.Pin = LED_FLASH_Pin;
 8000d44:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d48:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d4a:	2601      	movs	r6, #1
 8000d4c:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4e:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d50:	2702      	movs	r7, #2
 8000d52:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(LED_FLASH_GPIO_Port, &GPIO_InitStruct);
 8000d54:	a904      	add	r1, sp, #16
 8000d56:	4648      	mov	r0, r9
 8000d58:	f000 fc34 	bl	80015c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF24_CSN_Pin */
  GPIO_InitStruct.Pin = NRF24_CSN_Pin;
 8000d5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d60:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d62:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d64:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d66:	f04f 0903 	mov.w	r9, #3
 8000d6a:	f8cd 901c 	str.w	r9, [sp, #28]
  HAL_GPIO_Init(NRF24_CSN_GPIO_Port, &GPIO_InitStruct);
 8000d6e:	a904      	add	r1, sp, #16
 8000d70:	4628      	mov	r0, r5
 8000d72:	f000 fc27 	bl	80015c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF24_CE_Pin */
  GPIO_InitStruct.Pin = NRF24_CE_Pin;
 8000d76:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d7a:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d7c:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7e:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d80:	f8cd 901c 	str.w	r9, [sp, #28]
  HAL_GPIO_Init(NRF24_CE_GPIO_Port, &GPIO_InitStruct);
 8000d84:	a904      	add	r1, sp, #16
 8000d86:	4640      	mov	r0, r8
 8000d88:	f000 fc1c 	bl	80015c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ST7735_CS_Pin ST7735_DC_Pin ST7735_RES_Pin */
  GPIO_InitStruct.Pin = ST7735_CS_Pin|ST7735_DC_Pin|ST7735_RES_Pin;
 8000d8c:	f44f 7360 	mov.w	r3, #896	; 0x380
 8000d90:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d92:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d94:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d96:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d98:	a904      	add	r1, sp, #16
 8000d9a:	4628      	mov	r0, r5
 8000d9c:	f000 fc12 	bl	80015c4 <HAL_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000da0:	f004 f90a 	bl	8004fb8 <MX_USB_DEVICE_Init>
  hspi1.Instance = SPI1;
 8000da4:	481e      	ldr	r0, [pc, #120]	; (8000e20 <main+0x178>)
 8000da6:	4b1f      	ldr	r3, [pc, #124]	; (8000e24 <main+0x17c>)
 8000da8:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000daa:	f44f 7382 	mov.w	r3, #260	; 0x104
 8000dae:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000db0:	6084      	str	r4, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000db2:	60c4      	str	r4, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000db4:	6104      	str	r4, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000db6:	6144      	str	r4, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000db8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000dbc:	6183      	str	r3, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000dbe:	2310      	movs	r3, #16
 8000dc0:	61c3      	str	r3, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000dc2:	6204      	str	r4, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000dc4:	6244      	str	r4, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000dc6:	6284      	str	r4, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000dc8:	230a      	movs	r3, #10
 8000dca:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000dcc:	f002 f846 	bl	8002e5c <HAL_SPI_Init>
 8000dd0:	b9f0      	cbnz	r0, 8000e10 <main+0x168>
  hspi2.Instance = SPI2;
 8000dd2:	4815      	ldr	r0, [pc, #84]	; (8000e28 <main+0x180>)
 8000dd4:	4b15      	ldr	r3, [pc, #84]	; (8000e2c <main+0x184>)
 8000dd6:	6003      	str	r3, [r0, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000dd8:	f44f 7382 	mov.w	r3, #260	; 0x104
 8000ddc:	6043      	str	r3, [r0, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000dde:	2300      	movs	r3, #0
 8000de0:	6083      	str	r3, [r0, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000de2:	60c3      	str	r3, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000de4:	6103      	str	r3, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000de6:	6143      	str	r3, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000de8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000dec:	6182      	str	r2, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000dee:	2210      	movs	r2, #16
 8000df0:	61c2      	str	r2, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000df2:	6203      	str	r3, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000df4:	6243      	str	r3, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000df6:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000df8:	230a      	movs	r3, #10
 8000dfa:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000dfc:	f002 f82e 	bl	8002e5c <HAL_SPI_Init>
 8000e00:	b940      	cbnz	r0, 8000e14 <main+0x16c>
  fcall=p_setupScann;
 8000e02:	4b0b      	ldr	r3, [pc, #44]	; (8000e30 <main+0x188>)
  fcall();
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	4798      	blx	r3
  fcall=p_loopScann;
 8000e08:	4b0a      	ldr	r3, [pc, #40]	; (8000e34 <main+0x18c>)
 8000e0a:	681c      	ldr	r4, [r3, #0]
	  fcall();
 8000e0c:	47a0      	blx	r4
 8000e0e:	e7fd      	b.n	8000e0c <main+0x164>
 8000e10:	b672      	cpsid	i
 8000e12:	e7fe      	b.n	8000e12 <main+0x16a>
 8000e14:	b672      	cpsid	i
 8000e16:	e7fe      	b.n	8000e16 <main+0x16e>
 8000e18:	40021000 	.word	0x40021000
 8000e1c:	40010c00 	.word	0x40010c00
 8000e20:	200008bc 	.word	0x200008bc
 8000e24:	40013000 	.word	0x40013000
 8000e28:	20000864 	.word	0x20000864
 8000e2c:	40003800 	.word	0x40003800
 8000e30:	20000008 	.word	0x20000008
 8000e34:	20000004 	.word	0x20000004
 8000e38:	40011000 	.word	0x40011000
 8000e3c:	40010800 	.word	0x40010800

08000e40 <Error_Handler>:
 8000e40:	b672      	cpsid	i
 8000e42:	e7fe      	b.n	8000e42 <Error_Handler+0x2>

08000e44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e44:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e46:	4b0e      	ldr	r3, [pc, #56]	; (8000e80 <HAL_MspInit+0x3c>)
 8000e48:	699a      	ldr	r2, [r3, #24]
 8000e4a:	f042 0201 	orr.w	r2, r2, #1
 8000e4e:	619a      	str	r2, [r3, #24]
 8000e50:	699a      	ldr	r2, [r3, #24]
 8000e52:	f002 0201 	and.w	r2, r2, #1
 8000e56:	9200      	str	r2, [sp, #0]
 8000e58:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e5a:	69da      	ldr	r2, [r3, #28]
 8000e5c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000e60:	61da      	str	r2, [r3, #28]
 8000e62:	69db      	ldr	r3, [r3, #28]
 8000e64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e68:	9301      	str	r3, [sp, #4]
 8000e6a:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000e6c:	4a05      	ldr	r2, [pc, #20]	; (8000e84 <HAL_MspInit+0x40>)
 8000e6e:	6853      	ldr	r3, [r2, #4]
 8000e70:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000e74:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e78:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e7a:	b002      	add	sp, #8
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	40021000 	.word	0x40021000
 8000e84:	40010000 	.word	0x40010000

08000e88 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e88:	b510      	push	{r4, lr}
 8000e8a:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	9304      	str	r3, [sp, #16]
 8000e90:	9305      	str	r3, [sp, #20]
 8000e92:	9306      	str	r3, [sp, #24]
 8000e94:	9307      	str	r3, [sp, #28]
  if(hspi->Instance==SPI1)
 8000e96:	6803      	ldr	r3, [r0, #0]
 8000e98:	4a2b      	ldr	r2, [pc, #172]	; (8000f48 <HAL_SPI_MspInit+0xc0>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d004      	beq.n	8000ea8 <HAL_SPI_MspInit+0x20>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
  else if(hspi->Instance==SPI2)
 8000e9e:	4a2b      	ldr	r2, [pc, #172]	; (8000f4c <HAL_SPI_MspInit+0xc4>)
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	d026      	beq.n	8000ef2 <HAL_SPI_MspInit+0x6a>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000ea4:	b008      	add	sp, #32
 8000ea6:	bd10      	pop	{r4, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ea8:	4b29      	ldr	r3, [pc, #164]	; (8000f50 <HAL_SPI_MspInit+0xc8>)
 8000eaa:	699a      	ldr	r2, [r3, #24]
 8000eac:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000eb0:	619a      	str	r2, [r3, #24]
 8000eb2:	699a      	ldr	r2, [r3, #24]
 8000eb4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8000eb8:	9200      	str	r2, [sp, #0]
 8000eba:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ebc:	699a      	ldr	r2, [r3, #24]
 8000ebe:	f042 0208 	orr.w	r2, r2, #8
 8000ec2:	619a      	str	r2, [r3, #24]
 8000ec4:	699b      	ldr	r3, [r3, #24]
 8000ec6:	f003 0308 	and.w	r3, r3, #8
 8000eca:	9301      	str	r3, [sp, #4]
 8000ecc:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8000ece:	2328      	movs	r3, #40	; 0x28
 8000ed0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed2:	2302      	movs	r3, #2
 8000ed4:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ed6:	2303      	movs	r3, #3
 8000ed8:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eda:	a904      	add	r1, sp, #16
 8000edc:	481d      	ldr	r0, [pc, #116]	; (8000f54 <HAL_SPI_MspInit+0xcc>)
 8000ede:	f000 fb71 	bl	80015c4 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_SPI1_ENABLE();
 8000ee2:	4a1d      	ldr	r2, [pc, #116]	; (8000f58 <HAL_SPI_MspInit+0xd0>)
 8000ee4:	6853      	ldr	r3, [r2, #4]
 8000ee6:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000eea:	f043 0301 	orr.w	r3, r3, #1
 8000eee:	6053      	str	r3, [r2, #4]
 8000ef0:	e7d8      	b.n	8000ea4 <HAL_SPI_MspInit+0x1c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000ef2:	4b17      	ldr	r3, [pc, #92]	; (8000f50 <HAL_SPI_MspInit+0xc8>)
 8000ef4:	69da      	ldr	r2, [r3, #28]
 8000ef6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000efa:	61da      	str	r2, [r3, #28]
 8000efc:	69da      	ldr	r2, [r3, #28]
 8000efe:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000f02:	9202      	str	r2, [sp, #8]
 8000f04:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f06:	699a      	ldr	r2, [r3, #24]
 8000f08:	f042 0208 	orr.w	r2, r2, #8
 8000f0c:	619a      	str	r2, [r3, #24]
 8000f0e:	699b      	ldr	r3, [r3, #24]
 8000f10:	f003 0308 	and.w	r3, r3, #8
 8000f14:	9303      	str	r3, [sp, #12]
 8000f16:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8000f18:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000f1c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f1e:	2302      	movs	r3, #2
 8000f20:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f22:	2303      	movs	r3, #3
 8000f24:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f26:	4c0b      	ldr	r4, [pc, #44]	; (8000f54 <HAL_SPI_MspInit+0xcc>)
 8000f28:	a904      	add	r1, sp, #16
 8000f2a:	4620      	mov	r0, r4
 8000f2c:	f000 fb4a 	bl	80015c4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000f30:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000f34:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f36:	2300      	movs	r3, #0
 8000f38:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3a:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f3c:	a904      	add	r1, sp, #16
 8000f3e:	4620      	mov	r0, r4
 8000f40:	f000 fb40 	bl	80015c4 <HAL_GPIO_Init>
}
 8000f44:	e7ae      	b.n	8000ea4 <HAL_SPI_MspInit+0x1c>
 8000f46:	bf00      	nop
 8000f48:	40013000 	.word	0x40013000
 8000f4c:	40003800 	.word	0x40003800
 8000f50:	40021000 	.word	0x40021000
 8000f54:	40010c00 	.word	0x40010c00
 8000f58:	40010000 	.word	0x40010000

08000f5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f5c:	e7fe      	b.n	8000f5c <NMI_Handler>

08000f5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f5e:	e7fe      	b.n	8000f5e <HardFault_Handler>

08000f60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f60:	e7fe      	b.n	8000f60 <MemManage_Handler>

08000f62 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f62:	e7fe      	b.n	8000f62 <BusFault_Handler>

08000f64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f64:	e7fe      	b.n	8000f64 <UsageFault_Handler>

08000f66 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f66:	4770      	bx	lr

08000f68 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f68:	4770      	bx	lr

08000f6a <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f6a:	4770      	bx	lr

08000f6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f6c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f6e:	f000 fa9b 	bl	80014a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f72:	bd08      	pop	{r3, pc}

08000f74 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000f74:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000f76:	4802      	ldr	r0, [pc, #8]	; (8000f80 <USB_LP_CAN1_RX0_IRQHandler+0xc>)
 8000f78:	f000 fccf 	bl	800191a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000f7c:	bd08      	pop	{r3, pc}
 8000f7e:	bf00      	nop
 8000f80:	200015ac 	.word	0x200015ac

08000f84 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f84:	4770      	bx	lr
	...

08000f88 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000f88:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000f8a:	e003      	b.n	8000f94 <LoopCopyDataInit>

08000f8c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000f8c:	4b0b      	ldr	r3, [pc, #44]	; (8000fbc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000f8e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000f90:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000f92:	3104      	adds	r1, #4

08000f94 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000f94:	480a      	ldr	r0, [pc, #40]	; (8000fc0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000f96:	4b0b      	ldr	r3, [pc, #44]	; (8000fc4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000f98:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000f9a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000f9c:	d3f6      	bcc.n	8000f8c <CopyDataInit>
  ldr r2, =_sbss
 8000f9e:	4a0a      	ldr	r2, [pc, #40]	; (8000fc8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000fa0:	e002      	b.n	8000fa8 <LoopFillZerobss>

08000fa2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000fa2:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000fa4:	f842 3b04 	str.w	r3, [r2], #4

08000fa8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000fa8:	4b08      	ldr	r3, [pc, #32]	; (8000fcc <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000faa:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000fac:	d3f9      	bcc.n	8000fa2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000fae:	f7ff ffe9 	bl	8000f84 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fb2:	f004 f9e7 	bl	8005384 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000fb6:	f7ff fe77 	bl	8000ca8 <main>
  bx lr
 8000fba:	4770      	bx	lr
  ldr r3, =_sidata
 8000fbc:	08005d80 	.word	0x08005d80
  ldr r0, =_sdata
 8000fc0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000fc4:	200001f4 	.word	0x200001f4
  ldr r2, =_sbss
 8000fc8:	200001f4 	.word	0x200001f4
  ldr r3, = _ebss
 8000fcc:	20001898 	.word	0x20001898

08000fd0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fd0:	e7fe      	b.n	8000fd0 <ADC1_2_IRQHandler>

08000fd2 <_ZN4RF243csnEb>:
#include "spi.h"

/****************************************************************************/

void RF24::csn(bool mode)
{
 8000fd2:	b508      	push	{r3, lr}
      if(!mode)
	    _SPI.chipSelect(csn_pin);
#endif

#if !defined (RF24_LINUX)
	digitalWrite(csn_pin,mode);
 8000fd4:	7940      	ldrb	r0, [r0, #5]
 8000fd6:	f003 f9ad 	bl	8004334 <_Z12digitalWritecb>
	delayMicroseconds(5);
 8000fda:	2005      	movs	r0, #5
 8000fdc:	f003 f9c2 	bl	8004364 <_Z17delayMicrosecondsi>
#endif

}
 8000fe0:	bd08      	pop	{r3, pc}

08000fe2 <_ZN4RF242ceEb>:

/****************************************************************************/

void RF24::ce(bool level)
{
 8000fe2:	b508      	push	{r3, lr}
  //Allow for 3-pin use on ATTiny
  if (ce_pin != csn_pin) digitalWrite(ce_pin,level);
 8000fe4:	7903      	ldrb	r3, [r0, #4]
 8000fe6:	7942      	ldrb	r2, [r0, #5]
 8000fe8:	429a      	cmp	r2, r3
 8000fea:	d002      	beq.n	8000ff2 <_ZN4RF242ceEb+0x10>
 8000fec:	4618      	mov	r0, r3
 8000fee:	f003 f9a1 	bl	8004334 <_Z12digitalWritecb>
}
 8000ff2:	bd08      	pop	{r3, pc}

08000ff4 <_ZN4RF2413read_registerEh>:
}

/****************************************************************************/

uint8_t RF24::read_register(uint8_t reg)
{
 8000ff4:	b570      	push	{r4, r5, r6, lr}
 8000ff6:	b084      	sub	sp, #16
 8000ff8:	4606      	mov	r6, r0
 8000ffa:	460c      	mov	r4, r1
    csn(LOW);
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	f7ff ffe8 	bl	8000fd2 <_ZN4RF243csnEb>
  
  endTransaction();
  #else

  beginTransaction();
  _SPI.transfer( R_REGISTER | ( REGISTER_MASK & reg ) );
 8001002:	f004 041f 	and.w	r4, r4, #31
};


uint8_t SPI::transfer(uint8_t data) {
    uint8_t pRxData[1],pTxData[1]; //= bcm2835_spi_transfer(_data);
    pTxData[0]=data;
 8001006:	f88d 400c 	strb.w	r4, [sp, #12]

    HAL_SPI_TransmitReceive(&RF24_SPI, &pTxData[0], &pRxData[0], 1, 2);
 800100a:	4c0e      	ldr	r4, [pc, #56]	; (8001044 <_ZN4RF2413read_registerEh+0x50>)
 800100c:	2502      	movs	r5, #2
 800100e:	9500      	str	r5, [sp, #0]
 8001010:	2301      	movs	r3, #1
 8001012:	aa02      	add	r2, sp, #8
 8001014:	a903      	add	r1, sp, #12
 8001016:	4620      	mov	r0, r4
 8001018:	f002 f84c 	bl	80030b4 <HAL_SPI_TransmitReceive>
    pTxData[0]=data;
 800101c:	23ff      	movs	r3, #255	; 0xff
 800101e:	f88d 300c 	strb.w	r3, [sp, #12]
    HAL_SPI_TransmitReceive(&RF24_SPI, &pTxData[0], &pRxData[0], 1, 2);
 8001022:	9500      	str	r5, [sp, #0]
 8001024:	2301      	movs	r3, #1
 8001026:	aa02      	add	r2, sp, #8
 8001028:	a903      	add	r1, sp, #12
 800102a:	4620      	mov	r0, r4
 800102c:	f002 f842 	bl	80030b4 <HAL_SPI_TransmitReceive>

    return pRxData[0];
 8001030:	f89d 4008 	ldrb.w	r4, [sp, #8]
    csn(HIGH);
 8001034:	2101      	movs	r1, #1
 8001036:	4630      	mov	r0, r6
 8001038:	f7ff ffcb 	bl	8000fd2 <_ZN4RF243csnEb>
  endTransaction();

  #endif

  return result;
}
 800103c:	4620      	mov	r0, r4
 800103e:	b004      	add	sp, #16
 8001040:	bd70      	pop	{r4, r5, r6, pc}
 8001042:	bf00      	nop
 8001044:	20000864 	.word	0x20000864

08001048 <_ZN4RF2414write_registerEhPKhh>:

/****************************************************************************/

uint8_t RF24::write_register(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 8001048:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800104c:	b084      	sub	sp, #16
 800104e:	4607      	mov	r7, r0
 8001050:	460d      	mov	r5, r1
 8001052:	4614      	mov	r4, r2
 8001054:	4698      	mov	r8, r3
    csn(LOW);
 8001056:	2100      	movs	r1, #0
 8001058:	f7ff ffbb 	bl	8000fd2 <_ZN4RF243csnEb>
  status = *prx; // status is 1st byte of receive buffer
  endTransaction();
  #else

  beginTransaction();
  status = _SPI.transfer( W_REGISTER | ( REGISTER_MASK & reg ) );
 800105c:	f005 051f 	and.w	r5, r5, #31
 8001060:	f045 0520 	orr.w	r5, r5, #32
    pTxData[0]=data;
 8001064:	f88d 500c 	strb.w	r5, [sp, #12]
    HAL_SPI_TransmitReceive(&RF24_SPI, &pTxData[0], &pRxData[0], 1, 2);
 8001068:	2302      	movs	r3, #2
 800106a:	9300      	str	r3, [sp, #0]
 800106c:	2301      	movs	r3, #1
 800106e:	aa02      	add	r2, sp, #8
 8001070:	a903      	add	r1, sp, #12
 8001072:	4812      	ldr	r0, [pc, #72]	; (80010bc <_ZN4RF2414write_registerEhPKhh+0x74>)
 8001074:	f002 f81e 	bl	80030b4 <HAL_SPI_TransmitReceive>
    return pRxData[0];
 8001078:	f89d 6008 	ldrb.w	r6, [sp, #8]
  while ( len-- )
 800107c:	f1b8 0f00 	cmp.w	r8, #0
 8001080:	d014      	beq.n	80010ac <_ZN4RF2414write_registerEhPKhh+0x64>
 8001082:	f108 35ff 	add.w	r5, r8, #4294967295	; 0xffffffff
 8001086:	b2ed      	uxtb	r5, r5
 8001088:	3501      	adds	r5, #1
 800108a:	4425      	add	r5, r4
    HAL_SPI_TransmitReceive(&RF24_SPI, &pTxData[0], &pRxData[0], 1, 2);
 800108c:	f8df 802c 	ldr.w	r8, [pc, #44]	; 80010bc <_ZN4RF2414write_registerEhPKhh+0x74>
    pTxData[0]=data;
 8001090:	f814 3b01 	ldrb.w	r3, [r4], #1
 8001094:	f88d 300c 	strb.w	r3, [sp, #12]
    HAL_SPI_TransmitReceive(&RF24_SPI, &pTxData[0], &pRxData[0], 1, 2);
 8001098:	2302      	movs	r3, #2
 800109a:	9300      	str	r3, [sp, #0]
 800109c:	2301      	movs	r3, #1
 800109e:	aa02      	add	r2, sp, #8
 80010a0:	a903      	add	r1, sp, #12
 80010a2:	4640      	mov	r0, r8
 80010a4:	f002 f806 	bl	80030b4 <HAL_SPI_TransmitReceive>
 80010a8:	42ac      	cmp	r4, r5
 80010aa:	d1f1      	bne.n	8001090 <_ZN4RF2414write_registerEhPKhh+0x48>
    csn(HIGH);
 80010ac:	2101      	movs	r1, #1
 80010ae:	4638      	mov	r0, r7
 80010b0:	f7ff ff8f 	bl	8000fd2 <_ZN4RF243csnEb>
  endTransaction();

  #endif

  return status;
}
 80010b4:	4630      	mov	r0, r6
 80010b6:	b004      	add	sp, #16
 80010b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80010bc:	20000864 	.word	0x20000864

080010c0 <_ZN4RF2414write_registerEhh>:

/****************************************************************************/

uint8_t RF24::write_register(uint8_t reg, uint8_t value)
{
 80010c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80010c4:	b084      	sub	sp, #16
 80010c6:	4607      	mov	r7, r0
 80010c8:	460c      	mov	r4, r1
 80010ca:	4690      	mov	r8, r2
    csn(LOW);
 80010cc:	2100      	movs	r1, #0
 80010ce:	f7ff ff80 	bl	8000fd2 <_ZN4RF243csnEb>
	status = *prx++; // status is 1st byte of receive buffer
	endTransaction();
  #else

  beginTransaction();
  status = _SPI.transfer( W_REGISTER | ( REGISTER_MASK & reg ) );
 80010d2:	f004 041f 	and.w	r4, r4, #31
 80010d6:	f044 0420 	orr.w	r4, r4, #32
    pTxData[0]=data;
 80010da:	f88d 400c 	strb.w	r4, [sp, #12]
    HAL_SPI_TransmitReceive(&RF24_SPI, &pTxData[0], &pRxData[0], 1, 2);
 80010de:	4c0e      	ldr	r4, [pc, #56]	; (8001118 <_ZN4RF2414write_registerEhh+0x58>)
 80010e0:	2502      	movs	r5, #2
 80010e2:	9500      	str	r5, [sp, #0]
 80010e4:	2301      	movs	r3, #1
 80010e6:	aa02      	add	r2, sp, #8
 80010e8:	a903      	add	r1, sp, #12
 80010ea:	4620      	mov	r0, r4
 80010ec:	f001 ffe2 	bl	80030b4 <HAL_SPI_TransmitReceive>
    return pRxData[0];
 80010f0:	f89d 6008 	ldrb.w	r6, [sp, #8]
    pTxData[0]=data;
 80010f4:	f88d 800c 	strb.w	r8, [sp, #12]
    HAL_SPI_TransmitReceive(&RF24_SPI, &pTxData[0], &pRxData[0], 1, 2);
 80010f8:	9500      	str	r5, [sp, #0]
 80010fa:	2301      	movs	r3, #1
 80010fc:	aa02      	add	r2, sp, #8
 80010fe:	a903      	add	r1, sp, #12
 8001100:	4620      	mov	r0, r4
 8001102:	f001 ffd7 	bl	80030b4 <HAL_SPI_TransmitReceive>
    csn(HIGH);
 8001106:	2101      	movs	r1, #1
 8001108:	4638      	mov	r0, r7
 800110a:	f7ff ff62 	bl	8000fd2 <_ZN4RF243csnEb>
  endTransaction();

  #endif

  return status;
}
 800110e:	4630      	mov	r0, r6
 8001110:	b004      	add	sp, #16
 8001112:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001116:	bf00      	nop
 8001118:	20000864 	.word	0x20000864

0800111c <_ZN4RF248spiTransEh>:
  return spiTrans( FLUSH_TX );
}

/****************************************************************************/

uint8_t RF24::spiTrans(uint8_t cmd){
 800111c:	b530      	push	{r4, r5, lr}
 800111e:	b085      	sub	sp, #20
 8001120:	4605      	mov	r5, r0
 8001122:	460c      	mov	r4, r1
    csn(LOW);
 8001124:	2100      	movs	r1, #0
 8001126:	f7ff ff54 	bl	8000fd2 <_ZN4RF243csnEb>
    pTxData[0]=data;
 800112a:	f88d 400c 	strb.w	r4, [sp, #12]
    HAL_SPI_TransmitReceive(&RF24_SPI, &pTxData[0], &pRxData[0], 1, 2);
 800112e:	2302      	movs	r3, #2
 8001130:	9300      	str	r3, [sp, #0]
 8001132:	2301      	movs	r3, #1
 8001134:	aa02      	add	r2, sp, #8
 8001136:	a903      	add	r1, sp, #12
 8001138:	4805      	ldr	r0, [pc, #20]	; (8001150 <_ZN4RF248spiTransEh+0x34>)
 800113a:	f001 ffbb 	bl	80030b4 <HAL_SPI_TransmitReceive>
    return pRxData[0];
 800113e:	f89d 4008 	ldrb.w	r4, [sp, #8]
    csn(HIGH);
 8001142:	2101      	movs	r1, #1
 8001144:	4628      	mov	r0, r5
 8001146:	f7ff ff44 	bl	8000fd2 <_ZN4RF243csnEb>
  beginTransaction();
  status = _SPI.transfer( cmd );
  endTransaction();
  
  return status;
}
 800114a:	4620      	mov	r0, r4
 800114c:	b005      	add	sp, #20
 800114e:	bd30      	pop	{r4, r5, pc}
 8001150:	20000864 	.word	0x20000864

08001154 <_ZN4RF248flush_rxEv>:
{
 8001154:	b508      	push	{r3, lr}
  return spiTrans( FLUSH_RX );
 8001156:	21e2      	movs	r1, #226	; 0xe2
 8001158:	f7ff ffe0 	bl	800111c <_ZN4RF248spiTransEh>
}
 800115c:	bd08      	pop	{r3, pc}

0800115e <_ZN4RF248flush_txEv>:
{
 800115e:	b508      	push	{r3, lr}
  return spiTrans( FLUSH_TX );
 8001160:	21e1      	movs	r1, #225	; 0xe1
 8001162:	f7ff ffdb 	bl	800111c <_ZN4RF248spiTransEh>
}
 8001166:	bd08      	pop	{r3, pc}

08001168 <_ZN4RF24C1Ehh>:
  printf_P(PSTR("\r\n"));
}
#endif
/****************************************************************************/

RF24::RF24(uint8_t _cepin, uint8_t _cspin):
 8001168:	b570      	push	{r4, r5, r6, lr}
 800116a:	4604      	mov	r4, r0
 800116c:	460e      	mov	r6, r1
 800116e:	4615      	mov	r5, r2
  ce_pin(_cepin), csn_pin(_cspin), p_variant(false),
  payload_size(32), dynamic_payloads_enabled(false), addr_width(5)//,pipe0_reading_address(0)
 8001170:	f000 f95a 	bl	8001428 <_ZN3SPIC1Ev>
 8001174:	7126      	strb	r6, [r4, #4]
 8001176:	7165      	strb	r5, [r4, #5]
 8001178:	2300      	movs	r3, #0
 800117a:	7223      	strb	r3, [r4, #8]
 800117c:	2220      	movs	r2, #32
 800117e:	7262      	strb	r2, [r4, #9]
 8001180:	72a3      	strb	r3, [r4, #10]
 8001182:	2205      	movs	r2, #5
 8001184:	7422      	strb	r2, [r4, #16]
{
  pipe0_reading_address[0]=0;
 8001186:	72e3      	strb	r3, [r4, #11]
}
 8001188:	4620      	mov	r0, r4
 800118a:	bd70      	pop	{r4, r5, r6, pc}

0800118c <_ZN4RF2410setChannelEh>:
#endif

/****************************************************************************/

void RF24::setChannel(uint8_t channel)
{
 800118c:	b508      	push	{r3, lr}
  const uint8_t max_channel = 125;
  write_register(RF_CH,rf24_min(channel,max_channel));
 800118e:	460a      	mov	r2, r1
 8001190:	297d      	cmp	r1, #125	; 0x7d
 8001192:	bf28      	it	cs
 8001194:	227d      	movcs	r2, #125	; 0x7d
 8001196:	2105      	movs	r1, #5
 8001198:	f7ff ff92 	bl	80010c0 <_ZN4RF2414write_registerEhh>
}
 800119c:	bd08      	pop	{r3, pc}

0800119e <_ZN4RF2413stopListeningEv>:
{
  ERX_P0, ERX_P1, ERX_P2, ERX_P3, ERX_P4, ERX_P5
};

void RF24::stopListening(void)
{  
 800119e:	b510      	push	{r4, lr}
 80011a0:	4604      	mov	r4, r0
  ce(LOW);
 80011a2:	2100      	movs	r1, #0
 80011a4:	f7ff ff1d 	bl	8000fe2 <_ZN4RF242ceEb>

  delayMicroseconds(txRxDelay);
 80011a8:	6960      	ldr	r0, [r4, #20]
 80011aa:	f003 f8db 	bl	8004364 <_Z17delayMicrosecondsi>
  
  if(read_register(FEATURE) & _BV(EN_ACK_PAY)){
 80011ae:	211d      	movs	r1, #29
 80011b0:	4620      	mov	r0, r4
 80011b2:	f7ff ff1f 	bl	8000ff4 <_ZN4RF2413read_registerEh>
 80011b6:	f010 0f02 	tst.w	r0, #2
 80011ba:	d115      	bne.n	80011e8 <_ZN4RF2413stopListeningEv+0x4a>
    delayMicroseconds(txRxDelay); //200
	flush_tx();
  }
  //flush_rx();
  write_register(NRF_CONFIG, ( read_register(NRF_CONFIG) ) & ~_BV(PRIM_RX) );
 80011bc:	2100      	movs	r1, #0
 80011be:	4620      	mov	r0, r4
 80011c0:	f7ff ff18 	bl	8000ff4 <_ZN4RF2413read_registerEh>
 80011c4:	f000 02fe 	and.w	r2, r0, #254	; 0xfe
 80011c8:	2100      	movs	r1, #0
 80011ca:	4620      	mov	r0, r4
 80011cc:	f7ff ff78 	bl	80010c0 <_ZN4RF2414write_registerEhh>
  if (ce_pin == csn_pin) {
    powerDown();
	powerUp();
  }
  #endif
  write_register(EN_RXADDR,read_register(EN_RXADDR) | _BV(pgm_read_byte(&child_pipe_enable[0]))); // Enable RX on pipe0
 80011d0:	2102      	movs	r1, #2
 80011d2:	4620      	mov	r0, r4
 80011d4:	f7ff ff0e 	bl	8000ff4 <_ZN4RF2413read_registerEh>
 80011d8:	f040 0201 	orr.w	r2, r0, #1
 80011dc:	b2d2      	uxtb	r2, r2
 80011de:	2102      	movs	r1, #2
 80011e0:	4620      	mov	r0, r4
 80011e2:	f7ff ff6d 	bl	80010c0 <_ZN4RF2414write_registerEhh>
  
  //delayMicroseconds(100);

}
 80011e6:	bd10      	pop	{r4, pc}
    delayMicroseconds(txRxDelay); //200
 80011e8:	6960      	ldr	r0, [r4, #20]
 80011ea:	f003 f8bb 	bl	8004364 <_Z17delayMicrosecondsi>
	flush_tx();
 80011ee:	4620      	mov	r0, r4
 80011f0:	f7ff ffb5 	bl	800115e <_ZN4RF248flush_txEv>
 80011f4:	e7e2      	b.n	80011bc <_ZN4RF2413stopListeningEv+0x1e>

080011f6 <_ZN4RF247powerUpEv>:

/****************************************************************************/

//Power up now. Radio will not power down unless instructed by MCU for config changes etc.
void RF24::powerUp(void)
{
 80011f6:	b510      	push	{r4, lr}
 80011f8:	4604      	mov	r4, r0
   uint8_t cfg = read_register(NRF_CONFIG);
 80011fa:	2100      	movs	r1, #0
 80011fc:	f7ff fefa 	bl	8000ff4 <_ZN4RF2413read_registerEh>

   // if not powered up then power up and wait for the radio to initialize
   if (!(cfg & _BV(PWR_UP))){
 8001200:	f010 0f02 	tst.w	r0, #2
 8001204:	d000      	beq.n	8001208 <_ZN4RF247powerUpEv+0x12>
      // For nRF24L01+ to go from power down mode to TX or RX mode it must first pass through stand-by mode.
	  // There must be a delay of Tpd2stby (see Table 16.) after the nRF24L01+ leaves power down mode before
	  // the CEis set high. - Tpd2stby can be up to 5ms per the 1.0 datasheet
      delay(5);
   }
}
 8001206:	bd10      	pop	{r4, pc}
      write_register(NRF_CONFIG, cfg | _BV(PWR_UP));
 8001208:	f040 0202 	orr.w	r2, r0, #2
 800120c:	b2d2      	uxtb	r2, r2
 800120e:	2100      	movs	r1, #0
 8001210:	4620      	mov	r0, r4
 8001212:	f7ff ff55 	bl	80010c0 <_ZN4RF2414write_registerEhh>
      delay(5);
 8001216:	2005      	movs	r0, #5
 8001218:	f000 f958 	bl	80014cc <HAL_Delay>
}
 800121c:	e7f3      	b.n	8001206 <_ZN4RF247powerUpEv+0x10>
	...

08001220 <_ZN4RF2416closeReadingPipeEh>:
}

/****************************************************************************/

void RF24::closeReadingPipe( uint8_t pipe )
{
 8001220:	b538      	push	{r3, r4, r5, lr}
 8001222:	4604      	mov	r4, r0
 8001224:	460d      	mov	r5, r1
  write_register(EN_RXADDR,read_register(EN_RXADDR) & ~_BV(pgm_read_byte(&child_pipe_enable[pipe])));
 8001226:	2102      	movs	r1, #2
 8001228:	f7ff fee4 	bl	8000ff4 <_ZN4RF2413read_registerEh>
 800122c:	4b05      	ldr	r3, [pc, #20]	; (8001244 <_ZN4RF2416closeReadingPipeEh+0x24>)
 800122e:	5d5b      	ldrb	r3, [r3, r5]
 8001230:	2201      	movs	r2, #1
 8001232:	409a      	lsls	r2, r3
 8001234:	ea20 0202 	bic.w	r2, r0, r2
 8001238:	b2d2      	uxtb	r2, r2
 800123a:	2102      	movs	r1, #2
 800123c:	4620      	mov	r0, r4
 800123e:	f7ff ff3f 	bl	80010c0 <_ZN4RF2414write_registerEhh>
}
 8001242:	bd38      	pop	{r3, r4, r5, pc}
 8001244:	080054cc 	.word	0x080054cc

08001248 <_ZN4RF2414startListeningEv>:
{
 8001248:	b510      	push	{r4, lr}
 800124a:	4604      	mov	r4, r0
  powerUp();
 800124c:	f7ff ffd3 	bl	80011f6 <_ZN4RF247powerUpEv>
  write_register(NRF_CONFIG, read_register(NRF_CONFIG) | _BV(PRIM_RX));
 8001250:	2100      	movs	r1, #0
 8001252:	4620      	mov	r0, r4
 8001254:	f7ff fece 	bl	8000ff4 <_ZN4RF2413read_registerEh>
 8001258:	f040 0201 	orr.w	r2, r0, #1
 800125c:	b2d2      	uxtb	r2, r2
 800125e:	2100      	movs	r1, #0
 8001260:	4620      	mov	r0, r4
 8001262:	f7ff ff2d 	bl	80010c0 <_ZN4RF2414write_registerEhh>
  write_register(NRF_STATUS, _BV(RX_DR) | _BV(TX_DS) | _BV(MAX_RT) );
 8001266:	2270      	movs	r2, #112	; 0x70
 8001268:	2107      	movs	r1, #7
 800126a:	4620      	mov	r0, r4
 800126c:	f7ff ff28 	bl	80010c0 <_ZN4RF2414write_registerEhh>
  ce(HIGH);
 8001270:	2101      	movs	r1, #1
 8001272:	4620      	mov	r0, r4
 8001274:	f7ff feb5 	bl	8000fe2 <_ZN4RF242ceEb>
  if (pipe0_reading_address[0] > 0){
 8001278:	7ae3      	ldrb	r3, [r4, #11]
 800127a:	b173      	cbz	r3, 800129a <_ZN4RF2414startListeningEv+0x52>
    write_register(RX_ADDR_P0, pipe0_reading_address, addr_width);	
 800127c:	7c23      	ldrb	r3, [r4, #16]
 800127e:	f104 020b 	add.w	r2, r4, #11
 8001282:	210a      	movs	r1, #10
 8001284:	4620      	mov	r0, r4
 8001286:	f7ff fedf 	bl	8001048 <_ZN4RF2414write_registerEhPKhh>
  if(read_register(FEATURE) & _BV(EN_ACK_PAY)){
 800128a:	211d      	movs	r1, #29
 800128c:	4620      	mov	r0, r4
 800128e:	f7ff feb1 	bl	8000ff4 <_ZN4RF2413read_registerEh>
 8001292:	f010 0f02 	tst.w	r0, #2
 8001296:	d105      	bne.n	80012a4 <_ZN4RF2414startListeningEv+0x5c>
}
 8001298:	bd10      	pop	{r4, pc}
	closeReadingPipe(0);
 800129a:	2100      	movs	r1, #0
 800129c:	4620      	mov	r0, r4
 800129e:	f7ff ffbf 	bl	8001220 <_ZN4RF2416closeReadingPipeEh>
 80012a2:	e7f2      	b.n	800128a <_ZN4RF2414startListeningEv+0x42>
	flush_tx();
 80012a4:	4620      	mov	r0, r4
 80012a6:	f7ff ff5a 	bl	800115e <_ZN4RF248flush_txEv>
}
 80012aa:	e7f5      	b.n	8001298 <_ZN4RF2414startListeningEv+0x50>

080012ac <_ZN4RF2415toggle_featuresEv>:

/****************************************************************************/

void RF24::toggle_features(void)
{
 80012ac:	b570      	push	{r4, r5, r6, lr}
 80012ae:	b084      	sub	sp, #16
 80012b0:	4606      	mov	r6, r0
    csn(LOW);
 80012b2:	2100      	movs	r1, #0
 80012b4:	f7ff fe8d 	bl	8000fd2 <_ZN4RF243csnEb>
    pTxData[0]=data;
 80012b8:	2350      	movs	r3, #80	; 0x50
 80012ba:	f88d 300c 	strb.w	r3, [sp, #12]
    HAL_SPI_TransmitReceive(&RF24_SPI, &pTxData[0], &pRxData[0], 1, 2);
 80012be:	4c0c      	ldr	r4, [pc, #48]	; (80012f0 <_ZN4RF2415toggle_featuresEv+0x44>)
 80012c0:	2502      	movs	r5, #2
 80012c2:	9500      	str	r5, [sp, #0]
 80012c4:	2301      	movs	r3, #1
 80012c6:	aa02      	add	r2, sp, #8
 80012c8:	a903      	add	r1, sp, #12
 80012ca:	4620      	mov	r0, r4
 80012cc:	f001 fef2 	bl	80030b4 <HAL_SPI_TransmitReceive>
    pTxData[0]=data;
 80012d0:	2373      	movs	r3, #115	; 0x73
 80012d2:	f88d 300c 	strb.w	r3, [sp, #12]
    HAL_SPI_TransmitReceive(&RF24_SPI, &pTxData[0], &pRxData[0], 1, 2);
 80012d6:	9500      	str	r5, [sp, #0]
 80012d8:	2301      	movs	r3, #1
 80012da:	aa02      	add	r2, sp, #8
 80012dc:	a903      	add	r1, sp, #12
 80012de:	4620      	mov	r0, r4
 80012e0:	f001 fee8 	bl	80030b4 <HAL_SPI_TransmitReceive>
    csn(HIGH);
 80012e4:	2101      	movs	r1, #1
 80012e6:	4630      	mov	r0, r6
 80012e8:	f7ff fe73 	bl	8000fd2 <_ZN4RF243csnEb>
    beginTransaction();
	_SPI.transfer( ACTIVATE );
    _SPI.transfer( 0x73 );
	endTransaction();
}
 80012ec:	b004      	add	sp, #16
 80012ee:	bd70      	pop	{r4, r5, r6, pc}
 80012f0:	20000864 	.word	0x20000864

080012f4 <_ZN4RF2410setAutoAckEb>:
}

/****************************************************************************/

void RF24::setAutoAck(bool enable)
{
 80012f4:	b508      	push	{r3, lr}
  if ( enable )
 80012f6:	b921      	cbnz	r1, 8001302 <_ZN4RF2410setAutoAckEb+0xe>
    write_register(EN_AA, 0b111111);
  else
    write_register(EN_AA, 0);
 80012f8:	2200      	movs	r2, #0
 80012fa:	2101      	movs	r1, #1
 80012fc:	f7ff fee0 	bl	80010c0 <_ZN4RF2414write_registerEhh>
}
 8001300:	bd08      	pop	{r3, pc}
    write_register(EN_AA, 0b111111);
 8001302:	223f      	movs	r2, #63	; 0x3f
 8001304:	2101      	movs	r1, #1
 8001306:	f7ff fedb 	bl	80010c0 <_ZN4RF2414write_registerEhh>
 800130a:	e7f9      	b.n	8001300 <_ZN4RF2410setAutoAckEb+0xc>

0800130c <_ZN4RF247testRPDEv>:
}

/****************************************************************************/

bool RF24::testRPD(void)
{
 800130c:	b508      	push	{r3, lr}
  return ( read_register(RPD) & 1 ) ;
 800130e:	2109      	movs	r1, #9
 8001310:	f7ff fe70 	bl	8000ff4 <_ZN4RF2413read_registerEh>
}
 8001314:	f000 0001 	and.w	r0, r0, #1
 8001318:	bd08      	pop	{r3, pc}

0800131a <_ZN4RF2411setDataRateE15rf24_datarate_e>:
}

/****************************************************************************/

bool RF24::setDataRate(rf24_datarate_e speed)
{
 800131a:	b570      	push	{r4, r5, r6, lr}
 800131c:	4605      	mov	r5, r0
 800131e:	460e      	mov	r6, r1
  bool result = false;
  uint8_t setup = read_register(RF_SETUP) ;
 8001320:	2106      	movs	r1, #6
 8001322:	f7ff fe67 	bl	8000ff4 <_ZN4RF2413read_registerEh>

  // HIGH and LOW '00' is 1Mbs - our default
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 8001326:	f000 04d7 	and.w	r4, r0, #215	; 0xd7
  #if defined(__arm__) || defined (RF24_LINUX) || defined (__ARDUINO_X86__)
    txRxDelay=250;
  #else //16Mhz Arduino
    txRxDelay=85;
  #endif
  if( speed == RF24_250KBPS )
 800132a:	2e02      	cmp	r6, #2
 800132c:	d014      	beq.n	8001358 <_ZN4RF2411setDataRateE15rf24_datarate_e+0x3e>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 800132e:	2e01      	cmp	r6, #1
    txRxDelay=250;
 8001330:	bf12      	itee	ne
 8001332:	23fa      	movne	r3, #250	; 0xfa
    {
      setup |= _BV(RF_DR_HIGH);
 8001334:	f044 0408 	orreq.w	r4, r4, #8
      #if defined(__arm__) || defined (RF24_LINUX) || defined (__ARDUINO_X86__)
      txRxDelay=190;
 8001338:	23be      	moveq	r3, #190	; 0xbe
 800133a:	616b      	str	r3, [r5, #20]
      #else //16Mhz Arduino	  
	  txRxDelay=65;
	  #endif
    }
  }
  write_register(RF_SETUP,setup);
 800133c:	4622      	mov	r2, r4
 800133e:	2106      	movs	r1, #6
 8001340:	4628      	mov	r0, r5
 8001342:	f7ff febd 	bl	80010c0 <_ZN4RF2414write_registerEhh>

  // Verify our result
  if ( read_register(RF_SETUP) == setup )
 8001346:	2106      	movs	r1, #6
 8001348:	4628      	mov	r0, r5
 800134a:	f7ff fe53 	bl	8000ff4 <_ZN4RF2413read_registerEh>
  {
    result = true;
  }
  return result;
}
 800134e:	42a0      	cmp	r0, r4
 8001350:	bf14      	ite	ne
 8001352:	2000      	movne	r0, #0
 8001354:	2001      	moveq	r0, #1
 8001356:	bd70      	pop	{r4, r5, r6, pc}
    setup |= _BV( RF_DR_LOW ) ;
 8001358:	f044 0420 	orr.w	r4, r4, #32
    txRxDelay=450;
 800135c:	f44f 73e1 	mov.w	r3, #450	; 0x1c2
 8001360:	616b      	str	r3, [r5, #20]
 8001362:	e7eb      	b.n	800133c <_ZN4RF2411setDataRateE15rf24_datarate_e+0x22>

08001364 <_ZN4RF245beginEv>:
{
 8001364:	b538      	push	{r3, r4, r5, lr}
 8001366:	4604      	mov	r4, r0
    _SPI.begin();
 8001368:	f000 f864 	bl	8001434 <_ZN3SPI5beginEv>
    ce(LOW);
 800136c:	2100      	movs	r1, #0
 800136e:	4620      	mov	r0, r4
 8001370:	f7ff fe37 	bl	8000fe2 <_ZN4RF242ceEb>
  	csn(HIGH);
 8001374:	2101      	movs	r1, #1
 8001376:	4620      	mov	r0, r4
 8001378:	f7ff fe2b 	bl	8000fd2 <_ZN4RF243csnEb>
  delay( 5 ) ;
 800137c:	2005      	movs	r0, #5
 800137e:	f000 f8a5 	bl	80014cc <HAL_Delay>
  write_register( NRF_CONFIG, 0b00001100 ) ;
 8001382:	220c      	movs	r2, #12
 8001384:	2100      	movs	r1, #0
 8001386:	4620      	mov	r0, r4
 8001388:	f7ff fe9a 	bl	80010c0 <_ZN4RF2414write_registerEhh>
}

/****************************************************************************/
void RF24::setRetries(uint8_t delay, uint8_t count)
{
 write_register(SETUP_RETR,(delay&0xf)<<ARD | (count&0xf)<<ARC);
 800138c:	225f      	movs	r2, #95	; 0x5f
 800138e:	2104      	movs	r1, #4
 8001390:	4620      	mov	r0, r4
 8001392:	f7ff fe95 	bl	80010c0 <_ZN4RF2414write_registerEhh>
  if( setDataRate( RF24_250KBPS ) )
 8001396:	2102      	movs	r1, #2
 8001398:	4620      	mov	r0, r4
 800139a:	f7ff ffbe 	bl	800131a <_ZN4RF2411setDataRateE15rf24_datarate_e>
 800139e:	b108      	cbz	r0, 80013a4 <_ZN4RF245beginEv+0x40>
    p_variant = true ;
 80013a0:	2301      	movs	r3, #1
 80013a2:	7223      	strb	r3, [r4, #8]
  setup = read_register(RF_SETUP);
 80013a4:	2106      	movs	r1, #6
 80013a6:	4620      	mov	r0, r4
 80013a8:	f7ff fe24 	bl	8000ff4 <_ZN4RF2413read_registerEh>
 80013ac:	4605      	mov	r5, r0
  setDataRate( RF24_1MBPS ) ;
 80013ae:	2100      	movs	r1, #0
 80013b0:	4620      	mov	r0, r4
 80013b2:	f7ff ffb2 	bl	800131a <_ZN4RF2411setDataRateE15rf24_datarate_e>
  toggle_features();
 80013b6:	4620      	mov	r0, r4
 80013b8:	f7ff ff78 	bl	80012ac <_ZN4RF2415toggle_featuresEv>
  write_register(FEATURE,0 );
 80013bc:	2200      	movs	r2, #0
 80013be:	211d      	movs	r1, #29
 80013c0:	4620      	mov	r0, r4
 80013c2:	f7ff fe7d 	bl	80010c0 <_ZN4RF2414write_registerEhh>
  write_register(DYNPD,0);
 80013c6:	2200      	movs	r2, #0
 80013c8:	211c      	movs	r1, #28
 80013ca:	4620      	mov	r0, r4
 80013cc:	f7ff fe78 	bl	80010c0 <_ZN4RF2414write_registerEhh>
  write_register(NRF_STATUS,_BV(RX_DR) | _BV(TX_DS) | _BV(MAX_RT) );
 80013d0:	2270      	movs	r2, #112	; 0x70
 80013d2:	2107      	movs	r1, #7
 80013d4:	4620      	mov	r0, r4
 80013d6:	f7ff fe73 	bl	80010c0 <_ZN4RF2414write_registerEhh>
  setChannel(76);
 80013da:	214c      	movs	r1, #76	; 0x4c
 80013dc:	4620      	mov	r0, r4
 80013de:	f7ff fed5 	bl	800118c <_ZN4RF2410setChannelEh>
  flush_rx();
 80013e2:	4620      	mov	r0, r4
 80013e4:	f7ff feb6 	bl	8001154 <_ZN4RF248flush_rxEv>
  flush_tx();
 80013e8:	4620      	mov	r0, r4
 80013ea:	f7ff feb8 	bl	800115e <_ZN4RF248flush_txEv>
  powerUp(); //Power up by default when begin() is called
 80013ee:	4620      	mov	r0, r4
 80013f0:	f7ff ff01 	bl	80011f6 <_ZN4RF247powerUpEv>
  write_register(NRF_CONFIG, ( read_register(NRF_CONFIG) ) & ~_BV(PRIM_RX) );
 80013f4:	2100      	movs	r1, #0
 80013f6:	4620      	mov	r0, r4
 80013f8:	f7ff fdfc 	bl	8000ff4 <_ZN4RF2413read_registerEh>
 80013fc:	f000 02fe 	and.w	r2, r0, #254	; 0xfe
 8001400:	2100      	movs	r1, #0
 8001402:	4620      	mov	r0, r4
 8001404:	f7ff fe5c 	bl	80010c0 <_ZN4RF2414write_registerEhh>
  return ( setup != 0 && setup != 0xff );
 8001408:	1e68      	subs	r0, r5, #1
 800140a:	b2c0      	uxtb	r0, r0
}
 800140c:	28fd      	cmp	r0, #253	; 0xfd
 800140e:	bf8c      	ite	hi
 8001410:	2000      	movhi	r0, #0
 8001412:	2001      	movls	r0, #1
 8001414:	bd38      	pop	{r3, r4, r5, pc}

08001416 <_ZN3SPID1Ev>:
//	delayMicroseconds(5);
}

SPI::~SPI() {

}
 8001416:	4770      	bx	lr

08001418 <_ZN3SPID0Ev>:
SPI::~SPI() {
 8001418:	b510      	push	{r4, lr}
 800141a:	4604      	mov	r4, r0
}
 800141c:	2104      	movs	r1, #4
 800141e:	f003 ffad 	bl	800537c <_ZdlPvj>
 8001422:	4620      	mov	r0, r4
 8001424:	bd10      	pop	{r4, pc}
	...

08001428 <_ZN3SPIC1Ev>:
SPI::SPI() {
 8001428:	4b01      	ldr	r3, [pc, #4]	; (8001430 <_ZN3SPIC1Ev+0x8>)
 800142a:	6003      	str	r3, [r0, #0]
}
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	080054dc 	.word	0x080054dc

08001434 <_ZN3SPI5beginEv>:
}
 8001434:	4770      	bx	lr
	...

08001438 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001438:	b510      	push	{r4, lr}
 800143a:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800143c:	4b0e      	ldr	r3, [pc, #56]	; (8001478 <HAL_InitTick+0x40>)
 800143e:	7818      	ldrb	r0, [r3, #0]
 8001440:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001444:	fbb3 f3f0 	udiv	r3, r3, r0
 8001448:	4a0c      	ldr	r2, [pc, #48]	; (800147c <HAL_InitTick+0x44>)
 800144a:	6810      	ldr	r0, [r2, #0]
 800144c:	fbb0 f0f3 	udiv	r0, r0, r3
 8001450:	f000 f8a2 	bl	8001598 <HAL_SYSTICK_Config>
 8001454:	b968      	cbnz	r0, 8001472 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001456:	2c0f      	cmp	r4, #15
 8001458:	d901      	bls.n	800145e <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 800145a:	2001      	movs	r0, #1
 800145c:	e00a      	b.n	8001474 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800145e:	2200      	movs	r2, #0
 8001460:	4621      	mov	r1, r4
 8001462:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001466:	f000 f857 	bl	8001518 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800146a:	4b05      	ldr	r3, [pc, #20]	; (8001480 <HAL_InitTick+0x48>)
 800146c:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800146e:	2000      	movs	r0, #0
 8001470:	e000      	b.n	8001474 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8001472:	2001      	movs	r0, #1
}
 8001474:	bd10      	pop	{r4, pc}
 8001476:	bf00      	nop
 8001478:	20000010 	.word	0x20000010
 800147c:	2000000c 	.word	0x2000000c
 8001480:	20000014 	.word	0x20000014

08001484 <HAL_Init>:
{
 8001484:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001486:	4a07      	ldr	r2, [pc, #28]	; (80014a4 <HAL_Init+0x20>)
 8001488:	6813      	ldr	r3, [r2, #0]
 800148a:	f043 0310 	orr.w	r3, r3, #16
 800148e:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001490:	2003      	movs	r0, #3
 8001492:	f000 f82f 	bl	80014f4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001496:	2000      	movs	r0, #0
 8001498:	f7ff ffce 	bl	8001438 <HAL_InitTick>
  HAL_MspInit();
 800149c:	f7ff fcd2 	bl	8000e44 <HAL_MspInit>
}
 80014a0:	2000      	movs	r0, #0
 80014a2:	bd08      	pop	{r3, pc}
 80014a4:	40022000 	.word	0x40022000

080014a8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80014a8:	4a03      	ldr	r2, [pc, #12]	; (80014b8 <HAL_IncTick+0x10>)
 80014aa:	6811      	ldr	r1, [r2, #0]
 80014ac:	4b03      	ldr	r3, [pc, #12]	; (80014bc <HAL_IncTick+0x14>)
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	440b      	add	r3, r1
 80014b2:	6013      	str	r3, [r2, #0]
}
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop
 80014b8:	20000914 	.word	0x20000914
 80014bc:	20000010 	.word	0x20000010

080014c0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80014c0:	4b01      	ldr	r3, [pc, #4]	; (80014c8 <HAL_GetTick+0x8>)
 80014c2:	6818      	ldr	r0, [r3, #0]
}
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop
 80014c8:	20000914 	.word	0x20000914

080014cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014cc:	b538      	push	{r3, r4, r5, lr}
 80014ce:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80014d0:	f7ff fff6 	bl	80014c0 <HAL_GetTick>
 80014d4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014d6:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 80014da:	d002      	beq.n	80014e2 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 80014dc:	4b04      	ldr	r3, [pc, #16]	; (80014f0 <HAL_Delay+0x24>)
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014e2:	f7ff ffed 	bl	80014c0 <HAL_GetTick>
 80014e6:	1b40      	subs	r0, r0, r5
 80014e8:	42a0      	cmp	r0, r4
 80014ea:	d3fa      	bcc.n	80014e2 <HAL_Delay+0x16>
  {
  }
}
 80014ec:	bd38      	pop	{r3, r4, r5, pc}
 80014ee:	bf00      	nop
 80014f0:	20000010 	.word	0x20000010

080014f4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014f4:	4a07      	ldr	r2, [pc, #28]	; (8001514 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80014f6:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014f8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80014fc:	041b      	lsls	r3, r3, #16
 80014fe:	0c1b      	lsrs	r3, r3, #16
 8001500:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001504:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001508:	0200      	lsls	r0, r0, #8
 800150a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800150e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001510:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001512:	4770      	bx	lr
 8001514:	e000ed00 	.word	0xe000ed00

08001518 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001518:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800151a:	4b16      	ldr	r3, [pc, #88]	; (8001574 <HAL_NVIC_SetPriority+0x5c>)
 800151c:	68db      	ldr	r3, [r3, #12]
 800151e:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001522:	f1c3 0407 	rsb	r4, r3, #7
 8001526:	2c04      	cmp	r4, #4
 8001528:	bf28      	it	cs
 800152a:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800152c:	1d1d      	adds	r5, r3, #4
 800152e:	2d06      	cmp	r5, #6
 8001530:	bf8c      	ite	hi
 8001532:	3b03      	subhi	r3, #3
 8001534:	2300      	movls	r3, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001536:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800153a:	fa05 f404 	lsl.w	r4, r5, r4
 800153e:	ea21 0104 	bic.w	r1, r1, r4
 8001542:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001544:	fa05 f303 	lsl.w	r3, r5, r3
 8001548:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800154c:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 800154e:	2800      	cmp	r0, #0
 8001550:	db09      	blt.n	8001566 <HAL_NVIC_SetPriority+0x4e>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001552:	0109      	lsls	r1, r1, #4
 8001554:	b2c9      	uxtb	r1, r1
 8001556:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800155a:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800155e:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001562:	bc30      	pop	{r4, r5}
 8001564:	4770      	bx	lr
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001566:	f000 000f 	and.w	r0, r0, #15
 800156a:	0109      	lsls	r1, r1, #4
 800156c:	b2c9      	uxtb	r1, r1
 800156e:	4b02      	ldr	r3, [pc, #8]	; (8001578 <HAL_NVIC_SetPriority+0x60>)
 8001570:	5419      	strb	r1, [r3, r0]
 8001572:	e7f6      	b.n	8001562 <HAL_NVIC_SetPriority+0x4a>
 8001574:	e000ed00 	.word	0xe000ed00
 8001578:	e000ed14 	.word	0xe000ed14

0800157c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800157c:	2800      	cmp	r0, #0
 800157e:	db08      	blt.n	8001592 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001580:	0942      	lsrs	r2, r0, #5
 8001582:	f000 001f 	and.w	r0, r0, #31
 8001586:	2301      	movs	r3, #1
 8001588:	fa03 f000 	lsl.w	r0, r3, r0
 800158c:	4b01      	ldr	r3, [pc, #4]	; (8001594 <HAL_NVIC_EnableIRQ+0x18>)
 800158e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001592:	4770      	bx	lr
 8001594:	e000e100 	.word	0xe000e100

08001598 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001598:	3801      	subs	r0, #1
 800159a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800159e:	d20a      	bcs.n	80015b6 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015a0:	4b06      	ldr	r3, [pc, #24]	; (80015bc <HAL_SYSTICK_Config+0x24>)
 80015a2:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015a4:	4a06      	ldr	r2, [pc, #24]	; (80015c0 <HAL_SYSTICK_Config+0x28>)
 80015a6:	21f0      	movs	r1, #240	; 0xf0
 80015a8:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015ac:	2000      	movs	r0, #0
 80015ae:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015b0:	2207      	movs	r2, #7
 80015b2:	601a      	str	r2, [r3, #0]
 80015b4:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80015b6:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop
 80015bc:	e000e010 	.word	0xe000e010
 80015c0:	e000ed00 	.word	0xe000ed00

080015c4 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015c4:	680b      	ldr	r3, [r1, #0]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	f000 80e0 	beq.w	800178c <HAL_GPIO_Init+0x1c8>
{
 80015cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80015d0:	b083      	sub	sp, #12
  uint32_t config = 0x00u;
 80015d2:	2500      	movs	r5, #0
  uint32_t position = 0x00u;
 80015d4:	462a      	mov	r2, r5
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
        temp = AFIO->EXTICR[position >> 2u];
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80015d6:	f8df c1c4 	ldr.w	ip, [pc, #452]	; 800179c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80015da:	4c6d      	ldr	r4, [pc, #436]	; (8001790 <HAL_GPIO_Init+0x1cc>)
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80015dc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80017a0 <HAL_GPIO_Init+0x1dc>
      switch (GPIO_Init->Mode)
 80015e0:	f8df e1c0 	ldr.w	lr, [pc, #448]	; 80017a4 <HAL_GPIO_Init+0x1e0>
 80015e4:	e0a2      	b.n	800172c <HAL_GPIO_Init+0x168>
 80015e6:	f1b9 0f00 	cmp.w	r9, #0
 80015ea:	d01b      	beq.n	8001624 <HAL_GPIO_Init+0x60>
 80015ec:	f1b9 0f01 	cmp.w	r9, #1
 80015f0:	d123      	bne.n	800163a <HAL_GPIO_Init+0x76>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80015f2:	68cd      	ldr	r5, [r1, #12]
          break;
 80015f4:	e021      	b.n	800163a <HAL_GPIO_Init+0x76>
      switch (GPIO_Init->Mode)
 80015f6:	45f1      	cmp	r9, lr
 80015f8:	d014      	beq.n	8001624 <HAL_GPIO_Init+0x60>
 80015fa:	d90b      	bls.n	8001614 <HAL_GPIO_Init+0x50>
 80015fc:	4f65      	ldr	r7, [pc, #404]	; (8001794 <HAL_GPIO_Init+0x1d0>)
 80015fe:	45b9      	cmp	r9, r7
 8001600:	d010      	beq.n	8001624 <HAL_GPIO_Init+0x60>
 8001602:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8001606:	45b9      	cmp	r9, r7
 8001608:	d00c      	beq.n	8001624 <HAL_GPIO_Init+0x60>
 800160a:	f8df a19c 	ldr.w	sl, [pc, #412]	; 80017a8 <HAL_GPIO_Init+0x1e4>
 800160e:	45d1      	cmp	r9, sl
 8001610:	d113      	bne.n	800163a <HAL_GPIO_Init+0x76>
 8001612:	e007      	b.n	8001624 <HAL_GPIO_Init+0x60>
 8001614:	f8df a194 	ldr.w	sl, [pc, #404]	; 80017ac <HAL_GPIO_Init+0x1e8>
 8001618:	45d1      	cmp	r9, sl
 800161a:	d003      	beq.n	8001624 <HAL_GPIO_Init+0x60>
 800161c:	f50a 3a80 	add.w	sl, sl, #65536	; 0x10000
 8001620:	45d1      	cmp	r9, sl
 8001622:	d10a      	bne.n	800163a <HAL_GPIO_Init+0x76>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001624:	688d      	ldr	r5, [r1, #8]
 8001626:	2d00      	cmp	r5, #0
 8001628:	f000 80a2 	beq.w	8001770 <HAL_GPIO_Init+0x1ac>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800162c:	2d01      	cmp	r5, #1
            GPIOx->BSRR = ioposition;
 800162e:	bf0c      	ite	eq
 8001630:	6106      	streq	r6, [r0, #16]
            GPIOx->BRR = ioposition;
 8001632:	6146      	strne	r6, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001634:	2508      	movs	r5, #8
 8001636:	e000      	b.n	800163a <HAL_GPIO_Init+0x76>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001638:	2500      	movs	r5, #0
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800163a:	2bff      	cmp	r3, #255	; 0xff
 800163c:	bf99      	ittee	ls
 800163e:	4682      	movls	sl, r0
 8001640:	6806      	ldrls	r6, [r0, #0]
 8001642:	f100 0a04 	addhi.w	sl, r0, #4
 8001646:	6846      	ldrhi	r6, [r0, #4]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001648:	2bff      	cmp	r3, #255	; 0xff
 800164a:	bf91      	iteee	ls
 800164c:	ea4f 0982 	movls.w	r9, r2, lsl #2
 8001650:	f102 4980 	addhi.w	r9, r2, #1073741824	; 0x40000000
 8001654:	f1a9 0908 	subhi.w	r9, r9, #8
 8001658:	ea4f 0989 	movhi.w	r9, r9, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800165c:	f04f 0b0f 	mov.w	fp, #15
 8001660:	fa0b fb09 	lsl.w	fp, fp, r9
 8001664:	ea26 060b 	bic.w	r6, r6, fp
 8001668:	fa05 f909 	lsl.w	r9, r5, r9
 800166c:	ea46 0609 	orr.w	r6, r6, r9
 8001670:	f8ca 6000 	str.w	r6, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001674:	684e      	ldr	r6, [r1, #4]
 8001676:	f016 5f80 	tst.w	r6, #268435456	; 0x10000000
 800167a:	d052      	beq.n	8001722 <HAL_GPIO_Init+0x15e>
        __HAL_RCC_AFIO_CLK_ENABLE();
 800167c:	4f46      	ldr	r7, [pc, #280]	; (8001798 <HAL_GPIO_Init+0x1d4>)
 800167e:	69be      	ldr	r6, [r7, #24]
 8001680:	f046 0601 	orr.w	r6, r6, #1
 8001684:	61be      	str	r6, [r7, #24]
 8001686:	69be      	ldr	r6, [r7, #24]
 8001688:	f006 0601 	and.w	r6, r6, #1
 800168c:	9601      	str	r6, [sp, #4]
 800168e:	9e01      	ldr	r6, [sp, #4]
 8001690:	f022 0603 	bic.w	r6, r2, #3
 8001694:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8001698:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2u];
 800169c:	f8d6 a008 	ldr.w	sl, [r6, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80016a0:	f002 0903 	and.w	r9, r2, #3
 80016a4:	ea4f 0b89 	mov.w	fp, r9, lsl #2
 80016a8:	f04f 090f 	mov.w	r9, #15
 80016ac:	fa09 f90b 	lsl.w	r9, r9, fp
 80016b0:	ea2a 0a09 	bic.w	sl, sl, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80016b4:	4560      	cmp	r0, ip
 80016b6:	d05d      	beq.n	8001774 <HAL_GPIO_Init+0x1b0>
 80016b8:	4540      	cmp	r0, r8
 80016ba:	d05e      	beq.n	800177a <HAL_GPIO_Init+0x1b6>
 80016bc:	f5a7 3780 	sub.w	r7, r7, #65536	; 0x10000
 80016c0:	42b8      	cmp	r0, r7
 80016c2:	d05d      	beq.n	8001780 <HAL_GPIO_Init+0x1bc>
 80016c4:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 80016c8:	42b8      	cmp	r0, r7
 80016ca:	bf0c      	ite	eq
 80016cc:	f04f 0903 	moveq.w	r9, #3
 80016d0:	f04f 0904 	movne.w	r9, #4
 80016d4:	fa09 f90b 	lsl.w	r9, r9, fp
 80016d8:	ea49 090a 	orr.w	r9, r9, sl
        AFIO->EXTICR[position >> 2u] = temp;
 80016dc:	f8c6 9008 	str.w	r9, [r6, #8]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80016e0:	684e      	ldr	r6, [r1, #4]
 80016e2:	f416 3f80 	tst.w	r6, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80016e6:	6826      	ldr	r6, [r4, #0]
 80016e8:	bf14      	ite	ne
 80016ea:	431e      	orrne	r6, r3
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80016ec:	439e      	biceq	r6, r3
 80016ee:	6026      	str	r6, [r4, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80016f0:	684e      	ldr	r6, [r1, #4]
 80016f2:	f416 3f00 	tst.w	r6, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80016f6:	6866      	ldr	r6, [r4, #4]
 80016f8:	bf14      	ite	ne
 80016fa:	431e      	orrne	r6, r3
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80016fc:	439e      	biceq	r6, r3
 80016fe:	6066      	str	r6, [r4, #4]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001700:	684e      	ldr	r6, [r1, #4]
 8001702:	f416 1f80 	tst.w	r6, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8001706:	68a6      	ldr	r6, [r4, #8]
 8001708:	bf14      	ite	ne
 800170a:	431e      	orrne	r6, r3
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800170c:	439e      	biceq	r6, r3
 800170e:	60a6      	str	r6, [r4, #8]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001710:	684e      	ldr	r6, [r1, #4]
 8001712:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8001716:	68e6      	ldr	r6, [r4, #12]
 8001718:	bf14      	ite	ne
 800171a:	4333      	orrne	r3, r6
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800171c:	ea26 0303 	biceq.w	r3, r6, r3
 8001720:	60e3      	str	r3, [r4, #12]
        }
      }
    }

	position++;
 8001722:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001724:	680b      	ldr	r3, [r1, #0]
 8001726:	fa33 f602 	lsrs.w	r6, r3, r2
 800172a:	d02c      	beq.n	8001786 <HAL_GPIO_Init+0x1c2>
    ioposition = (0x01uL << position);
 800172c:	2601      	movs	r6, #1
 800172e:	4096      	lsls	r6, r2
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001730:	4033      	ands	r3, r6
    if (iocurrent == ioposition)
 8001732:	429e      	cmp	r6, r3
 8001734:	d1f5      	bne.n	8001722 <HAL_GPIO_Init+0x15e>
      switch (GPIO_Init->Mode)
 8001736:	f8d1 9004 	ldr.w	r9, [r1, #4]
 800173a:	f1b9 0f12 	cmp.w	r9, #18
 800173e:	d014      	beq.n	800176a <HAL_GPIO_Init+0x1a6>
 8001740:	f63f af59 	bhi.w	80015f6 <HAL_GPIO_Init+0x32>
 8001744:	f1b9 0f02 	cmp.w	r9, #2
 8001748:	d00c      	beq.n	8001764 <HAL_GPIO_Init+0x1a0>
 800174a:	f67f af4c 	bls.w	80015e6 <HAL_GPIO_Init+0x22>
 800174e:	f1b9 0f03 	cmp.w	r9, #3
 8001752:	f43f af71 	beq.w	8001638 <HAL_GPIO_Init+0x74>
 8001756:	f1b9 0f11 	cmp.w	r9, #17
 800175a:	f47f af6e 	bne.w	800163a <HAL_GPIO_Init+0x76>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800175e:	68cd      	ldr	r5, [r1, #12]
 8001760:	3504      	adds	r5, #4
          break;
 8001762:	e76a      	b.n	800163a <HAL_GPIO_Init+0x76>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001764:	68cd      	ldr	r5, [r1, #12]
 8001766:	3508      	adds	r5, #8
          break;
 8001768:	e767      	b.n	800163a <HAL_GPIO_Init+0x76>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800176a:	68cd      	ldr	r5, [r1, #12]
 800176c:	350c      	adds	r5, #12
          break;
 800176e:	e764      	b.n	800163a <HAL_GPIO_Init+0x76>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001770:	2504      	movs	r5, #4
 8001772:	e762      	b.n	800163a <HAL_GPIO_Init+0x76>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001774:	f04f 0900 	mov.w	r9, #0
 8001778:	e7ac      	b.n	80016d4 <HAL_GPIO_Init+0x110>
 800177a:	f04f 0901 	mov.w	r9, #1
 800177e:	e7a9      	b.n	80016d4 <HAL_GPIO_Init+0x110>
 8001780:	f04f 0902 	mov.w	r9, #2
 8001784:	e7a6      	b.n	80016d4 <HAL_GPIO_Init+0x110>
  }
}
 8001786:	b003      	add	sp, #12
 8001788:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	40010400 	.word	0x40010400
 8001794:	10310000 	.word	0x10310000
 8001798:	40021000 	.word	0x40021000
 800179c:	40010800 	.word	0x40010800
 80017a0:	40010c00 	.word	0x40010c00
 80017a4:	10210000 	.word	0x10210000
 80017a8:	10220000 	.word	0x10220000
 80017ac:	10110000 	.word	0x10110000

080017b0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80017b0:	b912      	cbnz	r2, 80017b8 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80017b2:	0409      	lsls	r1, r1, #16
 80017b4:	6101      	str	r1, [r0, #16]
  }
}
 80017b6:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 80017b8:	6101      	str	r1, [r0, #16]
 80017ba:	4770      	bx	lr

080017bc <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80017bc:	68c3      	ldr	r3, [r0, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80017be:	ea01 0203 	and.w	r2, r1, r3
 80017c2:	ea21 0103 	bic.w	r1, r1, r3
 80017c6:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80017ca:	6101      	str	r1, [r0, #16]
}
 80017cc:	4770      	bx	lr

080017ce <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80017ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017d0:	b087      	sub	sp, #28
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80017d2:	2800      	cmp	r0, #0
 80017d4:	d072      	beq.n	80018bc <HAL_PCD_Init+0xee>
 80017d6:	4604      	mov	r4, r0

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80017d8:	f890 32a9 	ldrb.w	r3, [r0, #681]	; 0x2a9
 80017dc:	b1d3      	cbz	r3, 8001814 <HAL_PCD_Init+0x46>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80017de:	2303      	movs	r3, #3
 80017e0:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80017e4:	6820      	ldr	r0, [r4, #0]
 80017e6:	f001 fd90 	bl	800330a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80017ea:	4625      	mov	r5, r4
 80017ec:	f855 7b10 	ldr.w	r7, [r5], #16
 80017f0:	466e      	mov	r6, sp
 80017f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017f4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80017f6:	682b      	ldr	r3, [r5, #0]
 80017f8:	6033      	str	r3, [r6, #0]
 80017fa:	1d23      	adds	r3, r4, #4
 80017fc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80017fe:	4638      	mov	r0, r7
 8001800:	f001 fd73 	bl	80032ea <USB_CoreInit>
 8001804:	b158      	cbz	r0, 800181e <HAL_PCD_Init+0x50>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001806:	2302      	movs	r3, #2
 8001808:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
    return HAL_ERROR;
 800180c:	2501      	movs	r5, #1
  hpcd->USB_Address = 0U;
  hpcd->State = HAL_PCD_STATE_READY;
  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 800180e:	4628      	mov	r0, r5
 8001810:	b007      	add	sp, #28
 8001812:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hpcd->Lock = HAL_UNLOCKED;
 8001814:	f880 32a8 	strb.w	r3, [r0, #680]	; 0x2a8
    HAL_PCD_MspInit(hpcd);
 8001818:	f003 fc9c 	bl	8005154 <HAL_PCD_MspInit>
 800181c:	e7df      	b.n	80017de <HAL_PCD_Init+0x10>
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800181e:	2100      	movs	r1, #0
 8001820:	6820      	ldr	r0, [r4, #0]
 8001822:	f001 fd7c 	bl	800331e <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001826:	6860      	ldr	r0, [r4, #4]
 8001828:	b350      	cbz	r0, 8001880 <HAL_PCD_Init+0xb2>
 800182a:	2300      	movs	r3, #0
    hpcd->IN_ep[i].is_in = 1U;
 800182c:	2601      	movs	r6, #1
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800182e:	461d      	mov	r5, r3
 8001830:	0099      	lsls	r1, r3, #2
 8001832:	18ca      	adds	r2, r1, r3
 8001834:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
    hpcd->IN_ep[i].is_in = 1U;
 8001838:	f882 6029 	strb.w	r6, [r2, #41]	; 0x29
    hpcd->IN_ep[i].num = i;
 800183c:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001840:	86d3      	strh	r3, [r2, #54]	; 0x36
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001842:	f882 502b 	strb.w	r5, [r2, #43]	; 0x2b
    hpcd->IN_ep[i].maxpacket = 0U;
 8001846:	6395      	str	r5, [r2, #56]	; 0x38
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001848:	63d5      	str	r5, [r2, #60]	; 0x3c
    hpcd->IN_ep[i].xfer_len = 0U;
 800184a:	6415      	str	r5, [r2, #64]	; 0x40
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800184c:	3301      	adds	r3, #1
 800184e:	b2db      	uxtb	r3, r3
 8001850:	4283      	cmp	r3, r0
 8001852:	d3ed      	bcc.n	8001830 <HAL_PCD_Init+0x62>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001854:	2300      	movs	r3, #0
    hpcd->OUT_ep[i].is_in = 0U;
 8001856:	461d      	mov	r5, r3
 8001858:	0099      	lsls	r1, r3, #2
 800185a:	18ca      	adds	r2, r1, r3
 800185c:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8001860:	f882 5169 	strb.w	r5, [r2, #361]	; 0x169
    hpcd->OUT_ep[i].num = i;
 8001864:	f882 3168 	strb.w	r3, [r2, #360]	; 0x168
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001868:	f882 516b 	strb.w	r5, [r2, #363]	; 0x16b
    hpcd->OUT_ep[i].maxpacket = 0U;
 800186c:	f8c2 5178 	str.w	r5, [r2, #376]	; 0x178
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001870:	f8c2 517c 	str.w	r5, [r2, #380]	; 0x17c
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001874:	f8c2 5180 	str.w	r5, [r2, #384]	; 0x180
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001878:	3301      	adds	r3, #1
 800187a:	b2db      	uxtb	r3, r3
 800187c:	4283      	cmp	r3, r0
 800187e:	d3eb      	bcc.n	8001858 <HAL_PCD_Init+0x8a>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001880:	4625      	mov	r5, r4
 8001882:	f855 7b10 	ldr.w	r7, [r5], #16
 8001886:	466e      	mov	r6, sp
 8001888:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800188a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800188c:	682b      	ldr	r3, [r5, #0]
 800188e:	6033      	str	r3, [r6, #0]
 8001890:	1d23      	adds	r3, r4, #4
 8001892:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001894:	4638      	mov	r0, r7
 8001896:	f001 fd44 	bl	8003322 <USB_DevInit>
 800189a:	4605      	mov	r5, r0
 800189c:	b120      	cbz	r0, 80018a8 <HAL_PCD_Init+0xda>
    hpcd->State = HAL_PCD_STATE_ERROR;
 800189e:	2302      	movs	r3, #2
 80018a0:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
    return HAL_ERROR;
 80018a4:	2501      	movs	r5, #1
 80018a6:	e7b2      	b.n	800180e <HAL_PCD_Init+0x40>
  hpcd->USB_Address = 0U;
 80018a8:	2300      	movs	r3, #0
 80018aa:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80018ae:	2301      	movs	r3, #1
 80018b0:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80018b4:	6820      	ldr	r0, [r4, #0]
 80018b6:	f002 f82a 	bl	800390e <USB_DevDisconnect>
  return HAL_OK;
 80018ba:	e7a8      	b.n	800180e <HAL_PCD_Init+0x40>
    return HAL_ERROR;
 80018bc:	2501      	movs	r5, #1
 80018be:	e7a6      	b.n	800180e <HAL_PCD_Init+0x40>

080018c0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80018c0:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hpcd);
 80018c2:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
 80018c6:	2b01      	cmp	r3, #1
 80018c8:	d011      	beq.n	80018ee <HAL_PCD_Start+0x2e>
 80018ca:	4604      	mov	r4, r0
 80018cc:	2501      	movs	r5, #1
 80018ce:	f880 52a8 	strb.w	r5, [r0, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80018d2:	6800      	ldr	r0, [r0, #0]
 80018d4:	f001 fd10 	bl	80032f8 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80018d8:	4629      	mov	r1, r5
 80018da:	4620      	mov	r0, r4
 80018dc:	f003 fd4d 	bl	800537a <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80018e0:	6820      	ldr	r0, [r4, #0]
 80018e2:	f002 f812 	bl	800390a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80018e6:	2000      	movs	r0, #0
 80018e8:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8

  return HAL_OK;
}
 80018ec:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 80018ee:	2002      	movs	r0, #2
 80018f0:	e7fc      	b.n	80018ec <HAL_PCD_Start+0x2c>

080018f2 <HAL_PCD_SetAddress>:
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
  __HAL_LOCK(hpcd);
 80018f2:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d00d      	beq.n	8001916 <HAL_PCD_SetAddress+0x24>
{
 80018fa:	b510      	push	{r4, lr}
 80018fc:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80018fe:	2301      	movs	r3, #1
 8001900:	f880 32a8 	strb.w	r3, [r0, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001904:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001908:	6800      	ldr	r0, [r0, #0]
 800190a:	f001 fff8 	bl	80038fe <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800190e:	2000      	movs	r0, #0
 8001910:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8

  return HAL_OK;
}
 8001914:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8001916:	2002      	movs	r0, #2
}
 8001918:	4770      	bx	lr

0800191a <HAL_PCD_IRQHandler>:
{
 800191a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800191e:	b084      	sub	sp, #16
 8001920:	4604      	mov	r4, r0
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001922:	6800      	ldr	r0, [r0, #0]
 8001924:	f001 fff5 	bl	8003912 <USB_ReadInterrupts>
 8001928:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 800192c:	f040 8097 	bne.w	8001a5e <HAL_PCD_IRQHandler+0x144>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001930:	6820      	ldr	r0, [r4, #0]
 8001932:	f001 ffee 	bl	8003912 <USB_ReadInterrupts>
 8001936:	f410 6f80 	tst.w	r0, #1024	; 0x400
 800193a:	f040 84cd 	bne.w	80022d8 <HAL_PCD_IRQHandler+0x9be>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 800193e:	6820      	ldr	r0, [r4, #0]
 8001940:	f001 ffe7 	bl	8003912 <USB_ReadInterrupts>
 8001944:	f410 4f80 	tst.w	r0, #16384	; 0x4000
 8001948:	d008      	beq.n	800195c <HAL_PCD_IRQHandler+0x42>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800194a:	6822      	ldr	r2, [r4, #0]
 800194c:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001950:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001954:	041b      	lsls	r3, r3, #16
 8001956:	0c1b      	lsrs	r3, r3, #16
 8001958:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 800195c:	6820      	ldr	r0, [r4, #0]
 800195e:	f001 ffd8 	bl	8003912 <USB_ReadInterrupts>
 8001962:	f410 5f00 	tst.w	r0, #8192	; 0x2000
 8001966:	d008      	beq.n	800197a <HAL_PCD_IRQHandler+0x60>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001968:	6822      	ldr	r2, [r4, #0]
 800196a:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800196e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001972:	041b      	lsls	r3, r3, #16
 8001974:	0c1b      	lsrs	r3, r3, #16
 8001976:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800197a:	6820      	ldr	r0, [r4, #0]
 800197c:	f001 ffc9 	bl	8003912 <USB_ReadInterrupts>
 8001980:	f410 5f80 	tst.w	r0, #4096	; 0x1000
 8001984:	f040 84ba 	bne.w	80022fc <HAL_PCD_IRQHandler+0x9e2>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001988:	6820      	ldr	r0, [r4, #0]
 800198a:	f001 ffc2 	bl	8003912 <USB_ReadInterrupts>
 800198e:	f410 6f00 	tst.w	r0, #2048	; 0x800
 8001992:	d04b      	beq.n	8001a2c <HAL_PCD_IRQHandler+0x112>
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001994:	6826      	ldr	r6, [r4, #0]
 8001996:	4633      	mov	r3, r6
 8001998:	f1ad 0202 	sub.w	r2, sp, #2
 800199c:	f106 0520 	add.w	r5, r6, #32
 80019a0:	4611      	mov	r1, r2
 80019a2:	f833 0b04 	ldrh.w	r0, [r3], #4
 80019a6:	f821 0f02 	strh.w	r0, [r1, #2]!
    for (i = 0U; i < 8U; i++)
 80019aa:	42ab      	cmp	r3, r5
 80019ac:	d1f9      	bne.n	80019a2 <HAL_PCD_IRQHandler+0x88>
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80019ae:	f8b6 3040 	ldrh.w	r3, [r6, #64]	; 0x40
 80019b2:	f043 0301 	orr.w	r3, r3, #1
 80019b6:	f8a6 3040 	strh.w	r3, [r6, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80019ba:	6821      	ldr	r1, [r4, #0]
 80019bc:	f8b1 3040 	ldrh.w	r3, [r1, #64]	; 0x40
 80019c0:	f023 0301 	bic.w	r3, r3, #1
 80019c4:	041b      	lsls	r3, r3, #16
 80019c6:	0c1b      	lsrs	r3, r3, #16
 80019c8:	f8a1 3040 	strh.w	r3, [r1, #64]	; 0x40
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80019cc:	6821      	ldr	r1, [r4, #0]
 80019ce:	f8b1 3044 	ldrh.w	r3, [r1, #68]	; 0x44
 80019d2:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80019d6:	d0fa      	beq.n	80019ce <HAL_PCD_IRQHandler+0xb4>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80019d8:	f8b1 3044 	ldrh.w	r3, [r1, #68]	; 0x44
 80019dc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80019e0:	041b      	lsls	r3, r3, #16
 80019e2:	0c1b      	lsrs	r3, r3, #16
 80019e4:	f8a1 3044 	strh.w	r3, [r1, #68]	; 0x44
 80019e8:	2300      	movs	r3, #0
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80019ea:	6821      	ldr	r1, [r4, #0]
 80019ec:	f832 0f02 	ldrh.w	r0, [r2, #2]!
 80019f0:	52c8      	strh	r0, [r1, r3]
 80019f2:	3304      	adds	r3, #4
    for (i = 0U; i < 8U; i++)
 80019f4:	2b20      	cmp	r3, #32
 80019f6:	d1f8      	bne.n	80019ea <HAL_PCD_IRQHandler+0xd0>
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80019f8:	6822      	ldr	r2, [r4, #0]
 80019fa:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 80019fe:	f043 0308 	orr.w	r3, r3, #8
 8001a02:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001a06:	6822      	ldr	r2, [r4, #0]
 8001a08:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001a0c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001a10:	041b      	lsls	r3, r3, #16
 8001a12:	0c1b      	lsrs	r3, r3, #16
 8001a14:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001a18:	6822      	ldr	r2, [r4, #0]
 8001a1a:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8001a1e:	f043 0304 	orr.w	r3, r3, #4
 8001a22:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_SuspendCallback(hpcd);
 8001a26:	4620      	mov	r0, r4
 8001a28:	f003 fbea 	bl	8005200 <HAL_PCD_SuspendCallback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001a2c:	6820      	ldr	r0, [r4, #0]
 8001a2e:	f001 ff70 	bl	8003912 <USB_ReadInterrupts>
 8001a32:	f410 7f00 	tst.w	r0, #512	; 0x200
 8001a36:	f040 8481 	bne.w	800233c <HAL_PCD_IRQHandler+0xa22>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001a3a:	6820      	ldr	r0, [r4, #0]
 8001a3c:	f001 ff69 	bl	8003912 <USB_ReadInterrupts>
 8001a40:	f410 7f80 	tst.w	r0, #256	; 0x100
 8001a44:	d008      	beq.n	8001a58 <HAL_PCD_IRQHandler+0x13e>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001a46:	6822      	ldr	r2, [r4, #0]
 8001a48:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001a4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a50:	041b      	lsls	r3, r3, #16
 8001a52:	0c1b      	lsrs	r3, r3, #16
 8001a54:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
}
 8001a58:	b004      	add	sp, #16
 8001a5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          {
            ep->xfer_len -= TxByteNbre;
          }
          else
          {
            ep->xfer_len = 0U;
 8001a5e:	2600      	movs	r6, #0
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8001a60:	f248 0780 	movw	r7, #32896	; 0x8080
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001a64:	f24c 0880 	movw	r8, #49280	; 0xc080
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001a68:	6820      	ldr	r0, [r4, #0]
 8001a6a:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8001a6e:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8001a72:	f43f af5d 	beq.w	8001930 <HAL_PCD_IRQHandler+0x16>
    wIstr = hpcd->Instance->ISTR;
 8001a76:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8001a7a:	b29b      	uxth	r3, r3
    if (epindex == 0U)
 8001a7c:	f013 050f 	ands.w	r5, r3, #15
 8001a80:	f040 80c3 	bne.w	8001c0a <HAL_PCD_IRQHandler+0x2f0>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001a84:	f013 0f10 	tst.w	r3, #16
 8001a88:	d052      	beq.n	8001b30 <HAL_PCD_IRQHandler+0x216>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001a8a:	8803      	ldrh	r3, [r0, #0]
 8001a8c:	b29b      	uxth	r3, r3
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001a8e:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8001a92:	f040 8081 	bne.w	8001b98 <HAL_PCD_IRQHandler+0x27e>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001a96:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8001a9a:	d0e5      	beq.n	8001a68 <HAL_PCD_IRQHandler+0x14e>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001a9c:	8803      	ldrh	r3, [r0, #0]
 8001a9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001aa2:	051b      	lsls	r3, r3, #20
 8001aa4:	0d1b      	lsrs	r3, r3, #20
 8001aa6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001aaa:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001aac:	6820      	ldr	r0, [r4, #0]
 8001aae:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001ab2:	f894 2168 	ldrb.w	r2, [r4, #360]	; 0x168
 8001ab6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001aba:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001abe:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
 8001ac2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ac6:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001aca:	b18b      	cbz	r3, 8001af0 <HAL_PCD_IRQHandler+0x1d6>
 8001acc:	f8d4 117c 	ldr.w	r1, [r4, #380]	; 0x17c
 8001ad0:	b171      	cbz	r1, 8001af0 <HAL_PCD_IRQHandler+0x1d6>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001ad2:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
 8001ad6:	f002 fa52 	bl	8003f7e <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 8001ada:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8001ade:	f8d4 2184 	ldr.w	r2, [r4, #388]	; 0x184
 8001ae2:	4413      	add	r3, r2
 8001ae4:	f8c4 317c 	str.w	r3, [r4, #380]	; 0x17c
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001ae8:	4631      	mov	r1, r6
 8001aea:	4620      	mov	r0, r4
 8001aec:	f003 fb5a 	bl	80051a4 <HAL_PCD_DataOutStageCallback>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001af0:	6823      	ldr	r3, [r4, #0]
 8001af2:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
 8001af6:	b289      	uxth	r1, r1
 8001af8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001afc:	f8d4 2178 	ldr.w	r2, [r4, #376]	; 0x178
 8001b00:	2a00      	cmp	r2, #0
 8001b02:	d16a      	bne.n	8001bda <HAL_PCD_IRQHandler+0x2c0>
 8001b04:	5a5a      	ldrh	r2, [r3, r1]
 8001b06:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8001b0a:	0412      	lsls	r2, r2, #16
 8001b0c:	0c12      	lsrs	r2, r2, #16
 8001b0e:	525a      	strh	r2, [r3, r1]
 8001b10:	5a5a      	ldrh	r2, [r3, r1]
 8001b12:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001b16:	525a      	strh	r2, [r3, r1]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001b18:	6822      	ldr	r2, [r4, #0]
 8001b1a:	8813      	ldrh	r3, [r2, #0]
 8001b1c:	b29b      	uxth	r3, r3
 8001b1e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001b22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b26:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8001b2a:	433b      	orrs	r3, r7
 8001b2c:	8013      	strh	r3, [r2, #0]
 8001b2e:	e79b      	b.n	8001a68 <HAL_PCD_IRQHandler+0x14e>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001b30:	8803      	ldrh	r3, [r0, #0]
 8001b32:	b29b      	uxth	r3, r3
 8001b34:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001b38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001b40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001b44:	b29b      	uxth	r3, r3
 8001b46:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001b48:	6823      	ldr	r3, [r4, #0]
 8001b4a:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8001b4e:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 8001b52:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8001b56:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8001b5a:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 8001b5e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b62:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 8001b64:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001b66:	4413      	add	r3, r2
 8001b68:	63e3      	str	r3, [r4, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001b6a:	4631      	mov	r1, r6
 8001b6c:	4620      	mov	r0, r4
 8001b6e:	f003 fb25 	bl	80051bc <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001b72:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	f43f af76 	beq.w	8001a68 <HAL_PCD_IRQHandler+0x14e>
 8001b7c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	f47f af72 	bne.w	8001a68 <HAL_PCD_IRQHandler+0x14e>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001b84:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8001b88:	6822      	ldr	r2, [r4, #0]
 8001b8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b8e:	f8a2 304c 	strh.w	r3, [r2, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001b92:	f884 6024 	strb.w	r6, [r4, #36]	; 0x24
 8001b96:	e767      	b.n	8001a68 <HAL_PCD_IRQHandler+0x14e>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001b98:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001b9c:	f894 2168 	ldrb.w	r2, [r4, #360]	; 0x168
 8001ba0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001ba4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001ba8:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
 8001bac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001bb0:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001bb4:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
 8001bb8:	f504 712c 	add.w	r1, r4, #688	; 0x2b0
 8001bbc:	f002 f9df 	bl	8003f7e <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001bc0:	6822      	ldr	r2, [r4, #0]
 8001bc2:	8813      	ldrh	r3, [r2, #0]
 8001bc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001bc8:	051b      	lsls	r3, r3, #20
 8001bca:	0d1b      	lsrs	r3, r3, #20
 8001bcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bd0:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8001bd2:	4620      	mov	r0, r4
 8001bd4:	f003 fade 	bl	8005194 <HAL_PCD_SetupStageCallback>
 8001bd8:	e746      	b.n	8001a68 <HAL_PCD_IRQHandler+0x14e>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001bda:	2a3e      	cmp	r2, #62	; 0x3e
 8001bdc:	d808      	bhi.n	8001bf0 <HAL_PCD_IRQHandler+0x2d6>
 8001bde:	0850      	lsrs	r0, r2, #1
 8001be0:	f012 0f01 	tst.w	r2, #1
 8001be4:	bf18      	it	ne
 8001be6:	3001      	addne	r0, #1
 8001be8:	0282      	lsls	r2, r0, #10
 8001bea:	b292      	uxth	r2, r2
 8001bec:	525a      	strh	r2, [r3, r1]
 8001bee:	e793      	b.n	8001b18 <HAL_PCD_IRQHandler+0x1fe>
 8001bf0:	0950      	lsrs	r0, r2, #5
 8001bf2:	f012 0f1f 	tst.w	r2, #31
 8001bf6:	bf08      	it	eq
 8001bf8:	f100 30ff 	addeq.w	r0, r0, #4294967295	; 0xffffffff
 8001bfc:	ea6f 62c0 	mvn.w	r2, r0, lsl #27
 8001c00:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8001c04:	b292      	uxth	r2, r2
 8001c06:	525a      	strh	r2, [r3, r1]
 8001c08:	e786      	b.n	8001b18 <HAL_PCD_IRQHandler+0x1fe>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001c0a:	f830 9025 	ldrh.w	r9, [r0, r5, lsl #2]
 8001c0e:	fa1f f989 	uxth.w	r9, r9
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001c12:	f419 4f00 	tst.w	r9, #32768	; 0x8000
 8001c16:	d151      	bne.n	8001cbc <HAL_PCD_IRQHandler+0x3a2>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001c18:	f019 0f80 	tst.w	r9, #128	; 0x80
 8001c1c:	f43f af24 	beq.w	8001a68 <HAL_PCD_IRQHandler+0x14e>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001c20:	6822      	ldr	r2, [r4, #0]
 8001c22:	f832 3025 	ldrh.w	r3, [r2, r5, lsl #2]
 8001c26:	b29b      	uxth	r3, r3
 8001c28:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001c2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001c34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001c38:	b29b      	uxth	r3, r3
 8001c3a:	f822 3025 	strh.w	r3, [r2, r5, lsl #2]
 8001c3e:	eb05 0a85 	add.w	sl, r5, r5, lsl #2
 8001c42:	eb04 0aca 	add.w	sl, r4, sl, lsl #3
        if ((ep->type != EP_TYPE_BULK) ||
 8001c46:	f89a 302b 	ldrb.w	r3, [sl, #43]	; 0x2b
 8001c4a:	2b02      	cmp	r3, #2
 8001c4c:	f000 81a8 	beq.w	8001fa0 <HAL_PCD_IRQHandler+0x686>
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001c50:	6820      	ldr	r0, [r4, #0]
 8001c52:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
          if (ep->xfer_len > TxByteNbre)
 8001c56:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 8001c5a:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8001c5e:	6c12      	ldr	r2, [r2, #64]	; 0x40
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001c60:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28
 8001c64:	3302      	adds	r3, #2
 8001c66:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8001c6a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001c6e:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
          if (ep->xfer_len > TxByteNbre)
 8001c72:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c76:	429a      	cmp	r2, r3
 8001c78:	f240 81dd 	bls.w	8002036 <HAL_PCD_IRQHandler+0x71c>
            ep->xfer_len -= TxByteNbre;
 8001c7c:	1ad2      	subs	r2, r2, r3
 8001c7e:	eb05 0185 	add.w	r1, r5, r5, lsl #2
 8001c82:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8001c86:	640a      	str	r2, [r1, #64]	; 0x40
          if (ep->xfer_len == 0U)
 8001c88:	2a00      	cmp	r2, #0
 8001c8a:	f000 81d9 	beq.w	8002040 <HAL_PCD_IRQHandler+0x726>
            ep->xfer_buff += TxByteNbre;
 8001c8e:	00aa      	lsls	r2, r5, #2
 8001c90:	eb02 0c05 	add.w	ip, r2, r5
 8001c94:	eb04 0ccc 	add.w	ip, r4, ip, lsl #3
 8001c98:	f8dc 103c 	ldr.w	r1, [ip, #60]	; 0x3c
 8001c9c:	4419      	add	r1, r3
 8001c9e:	f8cc 103c 	str.w	r1, [ip, #60]	; 0x3c
            ep->xfer_count += TxByteNbre;
 8001ca2:	f8dc 2044 	ldr.w	r2, [ip, #68]	; 0x44
 8001ca6:	4413      	add	r3, r2
 8001ca8:	f8cc 3044 	str.w	r3, [ip, #68]	; 0x44
        ep = &hpcd->IN_ep[epindex];
 8001cac:	3501      	adds	r5, #1
 8001cae:	eb05 0585 	add.w	r5, r5, r5, lsl #2
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001cb2:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8001cb6:	f001 fe48 	bl	800394a <USB_EPStartXfer>
 8001cba:	e6d5      	b.n	8001a68 <HAL_PCD_IRQHandler+0x14e>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001cbc:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
 8001cc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001cc4:	051b      	lsls	r3, r3, #20
 8001cc6:	0d1b      	lsrs	r3, r3, #20
 8001cc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ccc:	f820 3025 	strh.w	r3, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 8001cd0:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8001cd4:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8001cd8:	f893 3174 	ldrb.w	r3, [r3, #372]	; 0x174
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d144      	bne.n	8001d6a <HAL_PCD_IRQHandler+0x450>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001ce0:	6820      	ldr	r0, [r4, #0]
 8001ce2:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001ce6:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 8001cea:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8001cee:	f892 2168 	ldrb.w	r2, [r2, #360]	; 0x168
 8001cf2:	3306      	adds	r3, #6
 8001cf4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001cf8:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001cfc:	f8b3 a400 	ldrh.w	sl, [r3, #1024]	; 0x400
 8001d00:	f3ca 0a09 	ubfx	sl, sl, #0, #10
          if (count != 0U)
 8001d04:	f1ba 0f00 	cmp.w	sl, #0
 8001d08:	d123      	bne.n	8001d52 <HAL_PCD_IRQHandler+0x438>
        ep->xfer_count += count;
 8001d0a:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8001d0e:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8001d12:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
 8001d16:	4452      	add	r2, sl
 8001d18:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
        ep->xfer_buff += count;
 8001d1c:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 8001d20:	4452      	add	r2, sl
 8001d22:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001d26:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 8001d2a:	b143      	cbz	r3, 8001d3e <HAL_PCD_IRQHandler+0x424>
 8001d2c:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8001d30:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8001d34:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8001d38:	459a      	cmp	sl, r3
 8001d3a:	f080 8127 	bcs.w	8001f8c <HAL_PCD_IRQHandler+0x672>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001d3e:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8001d42:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8001d46:	f893 1168 	ldrb.w	r1, [r3, #360]	; 0x168
 8001d4a:	4620      	mov	r0, r4
 8001d4c:	f003 fa2a 	bl	80051a4 <HAL_PCD_DataOutStageCallback>
 8001d50:	e762      	b.n	8001c18 <HAL_PCD_IRQHandler+0x2fe>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001d52:	eb05 0185 	add.w	r1, r5, r5, lsl #2
 8001d56:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8001d5a:	4653      	mov	r3, sl
 8001d5c:	f8b1 216e 	ldrh.w	r2, [r1, #366]	; 0x16e
 8001d60:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8001d64:	f002 f90b 	bl	8003f7e <USB_ReadPMA>
 8001d68:	e7cf      	b.n	8001d0a <HAL_PCD_IRQHandler+0x3f0>
          if (ep->type == EP_TYPE_BULK)
 8001d6a:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8001d6e:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8001d72:	f893 316b 	ldrb.w	r3, [r3, #363]	; 0x16b
 8001d76:	2b02      	cmp	r3, #2
 8001d78:	d036      	beq.n	8001de8 <HAL_PCD_IRQHandler+0x4ce>
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001d7a:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 8001d7e:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8001d82:	f892 0168 	ldrb.w	r0, [r2, #360]	; 0x168
 8001d86:	6821      	ldr	r1, [r4, #0]
 8001d88:	f831 3020 	ldrh.w	r3, [r1, r0, lsl #2]
 8001d8c:	b29b      	uxth	r3, r3
 8001d8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001d92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d9a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001d9e:	f821 3020 	strh.w	r3, [r1, r0, lsl #2]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001da2:	6820      	ldr	r0, [r4, #0]
 8001da4:	f892 2168 	ldrb.w	r2, [r2, #360]	; 0x168
 8001da8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001dac:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8001db0:	f000 80d1 	beq.w	8001f56 <HAL_PCD_IRQHandler+0x63c>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001db4:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001db8:	3302      	adds	r3, #2
 8001dba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001dbe:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001dc2:	f8b3 a400 	ldrh.w	sl, [r3, #1024]	; 0x400
 8001dc6:	f3ca 0a09 	ubfx	sl, sl, #0, #10
              if (count != 0U)
 8001dca:	f1ba 0f00 	cmp.w	sl, #0
 8001dce:	d09c      	beq.n	8001d0a <HAL_PCD_IRQHandler+0x3f0>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001dd0:	eb05 0185 	add.w	r1, r5, r5, lsl #2
 8001dd4:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8001dd8:	4653      	mov	r3, sl
 8001dda:	f8b1 2170 	ldrh.w	r2, [r1, #368]	; 0x170
 8001dde:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8001de2:	f002 f8cc 	bl	8003f7e <USB_ReadPMA>
 8001de6:	e790      	b.n	8001d0a <HAL_PCD_IRQHandler+0x3f0>
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001de8:	f419 4f80 	tst.w	r9, #16384	; 0x4000
 8001dec:	d059      	beq.n	8001ea2 <HAL_PCD_IRQHandler+0x588>
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001dee:	6821      	ldr	r1, [r4, #0]
 8001df0:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 8001df4:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 8001df8:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8001dfc:	f892 0168 	ldrb.w	r0, [r2, #360]	; 0x168
 8001e00:	3302      	adds	r3, #2
 8001e02:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8001e06:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8001e0a:	f8b3 a400 	ldrh.w	sl, [r3, #1024]	; 0x400
 8001e0e:	f3ca 0a09 	ubfx	sl, sl, #0, #10
    if (ep->xfer_len >= count)
 8001e12:	f8d2 3180 	ldr.w	r3, [r2, #384]	; 0x180
 8001e16:	4553      	cmp	r3, sl
 8001e18:	d330      	bcc.n	8001e7c <HAL_PCD_IRQHandler+0x562>
      ep->xfer_len -= count;
 8001e1a:	eba3 030a 	sub.w	r3, r3, sl
 8001e1e:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 8001e22:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8001e26:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
    if (ep->xfer_len == 0U)
 8001e2a:	b36b      	cbz	r3, 8001e88 <HAL_PCD_IRQHandler+0x56e>
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001e2c:	f019 0f40 	tst.w	r9, #64	; 0x40
 8001e30:	d013      	beq.n	8001e5a <HAL_PCD_IRQHandler+0x540>
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001e32:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8001e36:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8001e3a:	f893 1168 	ldrb.w	r1, [r3, #360]	; 0x168
 8001e3e:	6822      	ldr	r2, [r4, #0]
 8001e40:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8001e44:	b29b      	uxth	r3, r3
 8001e46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001e4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e52:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001e56:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
    if (count != 0U)
 8001e5a:	f1ba 0f00 	cmp.w	sl, #0
 8001e5e:	f43f af54 	beq.w	8001d0a <HAL_PCD_IRQHandler+0x3f0>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001e62:	eb05 0185 	add.w	r1, r5, r5, lsl #2
 8001e66:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8001e6a:	4653      	mov	r3, sl
 8001e6c:	f8b1 2170 	ldrh.w	r2, [r1, #368]	; 0x170
 8001e70:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8001e74:	6820      	ldr	r0, [r4, #0]
 8001e76:	f002 f882 	bl	8003f7e <USB_ReadPMA>
 8001e7a:	e746      	b.n	8001d0a <HAL_PCD_IRQHandler+0x3f0>
      ep->xfer_len = 0U;
 8001e7c:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8001e80:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8001e84:	f8c3 6180 	str.w	r6, [r3, #384]	; 0x180
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001e88:	f831 3020 	ldrh.w	r3, [r1, r0, lsl #2]
 8001e8c:	b29b      	uxth	r3, r3
 8001e8e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001e92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e96:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001e9a:	433b      	orrs	r3, r7
 8001e9c:	f821 3020 	strh.w	r3, [r1, r0, lsl #2]
 8001ea0:	e7c4      	b.n	8001e2c <HAL_PCD_IRQHandler+0x512>
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001ea2:	6821      	ldr	r1, [r4, #0]
 8001ea4:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 8001ea8:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 8001eac:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8001eb0:	f892 0168 	ldrb.w	r0, [r2, #360]	; 0x168
 8001eb4:	3306      	adds	r3, #6
 8001eb6:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8001eba:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8001ebe:	f8b3 a400 	ldrh.w	sl, [r3, #1024]	; 0x400
 8001ec2:	f3ca 0a09 	ubfx	sl, sl, #0, #10
    if (ep->xfer_len >= count)
 8001ec6:	f8d2 3180 	ldr.w	r3, [r2, #384]	; 0x180
 8001eca:	4553      	cmp	r3, sl
 8001ecc:	d330      	bcc.n	8001f30 <HAL_PCD_IRQHandler+0x616>
      ep->xfer_len -= count;
 8001ece:	eba3 030a 	sub.w	r3, r3, sl
 8001ed2:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 8001ed6:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8001eda:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
    if (ep->xfer_len == 0U)
 8001ede:	b36b      	cbz	r3, 8001f3c <HAL_PCD_IRQHandler+0x622>
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8001ee0:	f019 0f40 	tst.w	r9, #64	; 0x40
 8001ee4:	d113      	bne.n	8001f0e <HAL_PCD_IRQHandler+0x5f4>
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001ee6:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8001eea:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8001eee:	f893 1168 	ldrb.w	r1, [r3, #360]	; 0x168
 8001ef2:	6822      	ldr	r2, [r4, #0]
 8001ef4:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8001ef8:	b29b      	uxth	r3, r3
 8001efa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001efe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f06:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001f0a:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
    if (count != 0U)
 8001f0e:	f1ba 0f00 	cmp.w	sl, #0
 8001f12:	f43f aefa 	beq.w	8001d0a <HAL_PCD_IRQHandler+0x3f0>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001f16:	eb05 0185 	add.w	r1, r5, r5, lsl #2
 8001f1a:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8001f1e:	4653      	mov	r3, sl
 8001f20:	f8b1 2172 	ldrh.w	r2, [r1, #370]	; 0x172
 8001f24:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8001f28:	6820      	ldr	r0, [r4, #0]
 8001f2a:	f002 f828 	bl	8003f7e <USB_ReadPMA>
 8001f2e:	e6ec      	b.n	8001d0a <HAL_PCD_IRQHandler+0x3f0>
      ep->xfer_len = 0U;
 8001f30:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8001f34:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8001f38:	f8c3 6180 	str.w	r6, [r3, #384]	; 0x180
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001f3c:	f831 3020 	ldrh.w	r3, [r1, r0, lsl #2]
 8001f40:	b29b      	uxth	r3, r3
 8001f42:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001f46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f4a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001f4e:	433b      	orrs	r3, r7
 8001f50:	f821 3020 	strh.w	r3, [r1, r0, lsl #2]
 8001f54:	e7c4      	b.n	8001ee0 <HAL_PCD_IRQHandler+0x5c6>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001f56:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001f5a:	3306      	adds	r3, #6
 8001f5c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001f60:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001f64:	f8b3 a400 	ldrh.w	sl, [r3, #1024]	; 0x400
 8001f68:	f3ca 0a09 	ubfx	sl, sl, #0, #10
              if (count != 0U)
 8001f6c:	f1ba 0f00 	cmp.w	sl, #0
 8001f70:	f43f aecb 	beq.w	8001d0a <HAL_PCD_IRQHandler+0x3f0>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001f74:	eb05 0185 	add.w	r1, r5, r5, lsl #2
 8001f78:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8001f7c:	4653      	mov	r3, sl
 8001f7e:	f8b1 2172 	ldrh.w	r2, [r1, #370]	; 0x172
 8001f82:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8001f86:	f001 fffa 	bl	8003f7e <USB_ReadPMA>
 8001f8a:	e6be      	b.n	8001d0a <HAL_PCD_IRQHandler+0x3f0>
        ep = &hpcd->OUT_ep[epindex];
 8001f8c:	eb05 0185 	add.w	r1, r5, r5, lsl #2
 8001f90:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8001f94:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 8001f98:	6820      	ldr	r0, [r4, #0]
 8001f9a:	f001 fcd6 	bl	800394a <USB_EPStartXfer>
 8001f9e:	e63b      	b.n	8001c18 <HAL_PCD_IRQHandler+0x2fe>
        if ((ep->type != EP_TYPE_BULK) ||
 8001fa0:	f419 7f80 	tst.w	r9, #256	; 0x100
 8001fa4:	f43f ae54 	beq.w	8001c50 <HAL_PCD_IRQHandler+0x336>
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001fa8:	f019 0f40 	tst.w	r9, #64	; 0x40
 8001fac:	f000 80d3 	beq.w	8002156 <HAL_PCD_IRQHandler+0x83c>
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001fb0:	6822      	ldr	r2, [r4, #0]
 8001fb2:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8001fb6:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28
    if (ep->xfer_len > TxByteNbre)
 8001fba:	eb05 0085 	add.w	r0, r5, r5, lsl #2
 8001fbe:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 8001fc2:	6c00      	ldr	r0, [r0, #64]	; 0x40
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001fc4:	3302      	adds	r3, #2
 8001fc6:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8001fca:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8001fce:	f8b3 c400 	ldrh.w	ip, [r3, #1024]	; 0x400
    if (ep->xfer_len > TxByteNbre)
 8001fd2:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8001fd6:	4560      	cmp	r0, ip
 8001fd8:	d938      	bls.n	800204c <HAL_PCD_IRQHandler+0x732>
      ep->xfer_len -= TxByteNbre;
 8001fda:	eba0 000c 	sub.w	r0, r0, ip
 8001fde:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8001fe2:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8001fe6:	6418      	str	r0, [r3, #64]	; 0x40
    if (ep->xfer_len == 0U)
 8001fe8:	b3a8      	cbz	r0, 8002056 <HAL_PCD_IRQHandler+0x73c>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001fea:	f419 4f80 	tst.w	r9, #16384	; 0x4000
 8001fee:	d00a      	beq.n	8002006 <HAL_PCD_IRQHandler+0x6ec>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001ff0:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8001ff4:	b29b      	uxth	r3, r3
 8001ff6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001ffa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ffe:	ea48 0303 	orr.w	r3, r8, r3
 8002002:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 8002006:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 800200a:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 800200e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8002012:	2b01      	cmp	r3, #1
 8002014:	d034      	beq.n	8002080 <HAL_PCD_IRQHandler+0x766>
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002016:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28
 800201a:	6822      	ldr	r2, [r4, #0]
 800201c:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8002020:	b29b      	uxth	r3, r3
 8002022:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002026:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800202a:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 800202e:	433b      	orrs	r3, r7
 8002030:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8002034:	e518      	b.n	8001a68 <HAL_PCD_IRQHandler+0x14e>
            ep->xfer_len = 0U;
 8002036:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800203a:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 800203e:	642e      	str	r6, [r5, #64]	; 0x40
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002040:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28
 8002044:	4620      	mov	r0, r4
 8002046:	f003 f8b9 	bl	80051bc <HAL_PCD_DataInStageCallback>
 800204a:	e50d      	b.n	8001a68 <HAL_PCD_IRQHandler+0x14e>
      ep->xfer_len = 0U;
 800204c:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8002050:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 8002054:	641e      	str	r6, [r3, #64]	; 0x40
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002056:	4620      	mov	r0, r4
 8002058:	f003 f8b0 	bl	80051bc <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800205c:	f419 4f80 	tst.w	r9, #16384	; 0x4000
 8002060:	d0d9      	beq.n	8002016 <HAL_PCD_IRQHandler+0x6fc>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002062:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28
 8002066:	6822      	ldr	r2, [r4, #0]
 8002068:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800206c:	b29b      	uxth	r3, r3
 800206e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002072:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002076:	ea48 0303 	orr.w	r3, r8, r3
 800207a:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 800207e:	e7ca      	b.n	8002016 <HAL_PCD_IRQHandler+0x6fc>
        ep->xfer_buff += TxByteNbre;
 8002080:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8002084:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8002088:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800208a:	4462      	add	r2, ip
 800208c:	63da      	str	r2, [r3, #60]	; 0x3c
        ep->xfer_count += TxByteNbre;
 800208e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002090:	4462      	add	r2, ip
 8002092:	645a      	str	r2, [r3, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 8002094:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8002096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002098:	4299      	cmp	r1, r3
 800209a:	d32b      	bcc.n	80020f4 <HAL_PCD_IRQHandler+0x7da>
          ep->xfer_len_db -= len;
 800209c:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 80020a0:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 80020a4:	1ac9      	subs	r1, r1, r3
 80020a6:	6491      	str	r1, [r2, #72]	; 0x48
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80020a8:	f89a 2029 	ldrb.w	r2, [sl, #41]	; 0x29
 80020ac:	2a00      	cmp	r2, #0
 80020ae:	d137      	bne.n	8002120 <HAL_PCD_IRQHandler+0x806>
 80020b0:	6822      	ldr	r2, [r4, #0]
 80020b2:	f8b2 1050 	ldrh.w	r1, [r2, #80]	; 0x50
 80020b6:	f89a 0028 	ldrb.w	r0, [sl, #40]	; 0x28
 80020ba:	0100      	lsls	r0, r0, #4
 80020bc:	f202 4204 	addw	r2, r2, #1028	; 0x404
 80020c0:	4411      	add	r1, r2
 80020c2:	1842      	adds	r2, r0, r1
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	f040 8152 	bne.w	800236e <HAL_PCD_IRQHandler+0xa54>
 80020ca:	5a42      	ldrh	r2, [r0, r1]
 80020cc:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80020d0:	0412      	lsls	r2, r2, #16
 80020d2:	0c12      	lsrs	r2, r2, #16
 80020d4:	5242      	strh	r2, [r0, r1]
 80020d6:	5a42      	ldrh	r2, [r0, r1]
 80020d8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80020dc:	5242      	strh	r2, [r0, r1]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80020de:	00aa      	lsls	r2, r5, #2
 80020e0:	1950      	adds	r0, r2, r5
 80020e2:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 80020e6:	b29b      	uxth	r3, r3
 80020e8:	8e02      	ldrh	r2, [r0, #48]	; 0x30
 80020ea:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 80020ec:	6820      	ldr	r0, [r4, #0]
 80020ee:	f001 fc15 	bl	800391c <USB_WritePMA>
 80020f2:	e790      	b.n	8002016 <HAL_PCD_IRQHandler+0x6fc>
        else if (ep->xfer_len_db == 0U)
 80020f4:	b939      	cbnz	r1, 8002106 <HAL_PCD_IRQHandler+0x7ec>
          ep->xfer_fill_db = 0U;
 80020f6:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 80020fa:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 80020fe:	f883 604c 	strb.w	r6, [r3, #76]	; 0x4c
          len = TxByteNbre;
 8002102:	4663      	mov	r3, ip
 8002104:	e7d0      	b.n	80020a8 <HAL_PCD_IRQHandler+0x78e>
          ep->xfer_fill_db = 0U;
 8002106:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 800210a:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 800210e:	f883 604c 	strb.w	r6, [r3, #76]	; 0x4c
          ep->xfer_len_db = 0U;
 8002112:	649e      	str	r6, [r3, #72]	; 0x48
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002114:	f89a 2029 	ldrb.w	r2, [sl, #41]	; 0x29
 8002118:	2a00      	cmp	r2, #0
 800211a:	f000 811d 	beq.w	8002358 <HAL_PCD_IRQHandler+0xa3e>
          len = ep->xfer_len_db;
 800211e:	460b      	mov	r3, r1
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002120:	2a01      	cmp	r2, #1
 8002122:	d1dc      	bne.n	80020de <HAL_PCD_IRQHandler+0x7c4>
 8002124:	6822      	ldr	r2, [r4, #0]
 8002126:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 800212a:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28
 800212e:	0109      	lsls	r1, r1, #4
 8002130:	f202 4204 	addw	r2, r2, #1028	; 0x404
 8002134:	4402      	add	r2, r0
 8002136:	b298      	uxth	r0, r3
 8002138:	5288      	strh	r0, [r1, r2]
 800213a:	e7d0      	b.n	80020de <HAL_PCD_IRQHandler+0x7c4>
 800213c:	0959      	lsrs	r1, r3, #5
 800213e:	f013 0f1f 	tst.w	r3, #31
 8002142:	bf08      	it	eq
 8002144:	f101 31ff 	addeq.w	r1, r1, #4294967295	; 0xffffffff
 8002148:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 800214c:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8002150:	b289      	uxth	r1, r1
 8002152:	8011      	strh	r1, [r2, #0]
 8002154:	e7c3      	b.n	80020de <HAL_PCD_IRQHandler+0x7c4>
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002156:	6822      	ldr	r2, [r4, #0]
 8002158:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 800215c:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28
    if (ep->xfer_len >= TxByteNbre)
 8002160:	eb05 0085 	add.w	r0, r5, r5, lsl #2
 8002164:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 8002168:	6c00      	ldr	r0, [r0, #64]	; 0x40
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800216a:	3306      	adds	r3, #6
 800216c:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8002170:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8002174:	f8b3 c400 	ldrh.w	ip, [r3, #1024]	; 0x400
    if (ep->xfer_len >= TxByteNbre)
 8002178:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800217c:	4560      	cmp	r0, ip
 800217e:	d351      	bcc.n	8002224 <HAL_PCD_IRQHandler+0x90a>
      ep->xfer_len -= TxByteNbre;
 8002180:	eba0 000c 	sub.w	r0, r0, ip
 8002184:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8002188:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 800218c:	6418      	str	r0, [r3, #64]	; 0x40
    if (ep->xfer_len == 0U)
 800218e:	2800      	cmp	r0, #0
 8002190:	d04d      	beq.n	800222e <HAL_PCD_IRQHandler+0x914>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002192:	f419 4f80 	tst.w	r9, #16384	; 0x4000
 8002196:	d10a      	bne.n	80021ae <HAL_PCD_IRQHandler+0x894>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002198:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800219c:	b29b      	uxth	r3, r3
 800219e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80021a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021a6:	ea48 0303 	orr.w	r3, r8, r3
 80021aa:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 80021ae:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 80021b2:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 80021b6:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	f47f af2b 	bne.w	8002016 <HAL_PCD_IRQHandler+0x6fc>
        ep->xfer_buff += TxByteNbre;
 80021c0:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 80021c4:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 80021c8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80021ca:	4462      	add	r2, ip
 80021cc:	63da      	str	r2, [r3, #60]	; 0x3c
        ep->xfer_count += TxByteNbre;
 80021ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80021d0:	4462      	add	r2, ip
 80021d2:	645a      	str	r2, [r3, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 80021d4:	6c99      	ldr	r1, [r3, #72]	; 0x48
 80021d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021d8:	4299      	cmp	r1, r3
 80021da:	d33e      	bcc.n	800225a <HAL_PCD_IRQHandler+0x940>
          ep->xfer_len_db -= len;
 80021dc:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 80021e0:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 80021e4:	1ac9      	subs	r1, r1, r3
 80021e6:	6491      	str	r1, [r2, #72]	; 0x48
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80021e8:	6822      	ldr	r2, [r4, #0]
 80021ea:	4610      	mov	r0, r2
 80021ec:	f89a c029 	ldrb.w	ip, [sl, #41]	; 0x29
 80021f0:	f1bc 0f00 	cmp.w	ip, #0
 80021f4:	d149      	bne.n	800228a <HAL_PCD_IRQHandler+0x970>
 80021f6:	f8b2 1050 	ldrh.w	r1, [r2, #80]	; 0x50
 80021fa:	f202 420c 	addw	r2, r2, #1036	; 0x40c
 80021fe:	440a      	add	r2, r1
 8002200:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28
 8002204:	0109      	lsls	r1, r1, #4
 8002206:	1850      	adds	r0, r2, r1
 8002208:	2b00      	cmp	r3, #0
 800220a:	f040 80c6 	bne.w	800239a <HAL_PCD_IRQHandler+0xa80>
 800220e:	5a50      	ldrh	r0, [r2, r1]
 8002210:	f420 40f8 	bic.w	r0, r0, #31744	; 0x7c00
 8002214:	0400      	lsls	r0, r0, #16
 8002216:	0c00      	lsrs	r0, r0, #16
 8002218:	5250      	strh	r0, [r2, r1]
 800221a:	5a50      	ldrh	r0, [r2, r1]
 800221c:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 8002220:	5250      	strh	r0, [r2, r1]
 8002222:	e035      	b.n	8002290 <HAL_PCD_IRQHandler+0x976>
      ep->xfer_len = 0U;
 8002224:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8002228:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 800222c:	641e      	str	r6, [r3, #64]	; 0x40
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800222e:	4620      	mov	r0, r4
 8002230:	f002 ffc4 	bl	80051bc <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002234:	f419 4f80 	tst.w	r9, #16384	; 0x4000
 8002238:	f47f aeed 	bne.w	8002016 <HAL_PCD_IRQHandler+0x6fc>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800223c:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28
 8002240:	6822      	ldr	r2, [r4, #0]
 8002242:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8002246:	b29b      	uxth	r3, r3
 8002248:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800224c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002250:	ea48 0303 	orr.w	r3, r8, r3
 8002254:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8002258:	e6dd      	b.n	8002016 <HAL_PCD_IRQHandler+0x6fc>
        else if (ep->xfer_len_db == 0U)
 800225a:	b939      	cbnz	r1, 800226c <HAL_PCD_IRQHandler+0x952>
          ep->xfer_fill_db = 0U;
 800225c:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8002260:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8002264:	f883 604c 	strb.w	r6, [r3, #76]	; 0x4c
          len = TxByteNbre;
 8002268:	4663      	mov	r3, ip
 800226a:	e7bd      	b.n	80021e8 <HAL_PCD_IRQHandler+0x8ce>
          ep->xfer_len_db = 0U;
 800226c:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8002270:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8002274:	649e      	str	r6, [r3, #72]	; 0x48
          ep->xfer_fill_db = 0;
 8002276:	f883 604c 	strb.w	r6, [r3, #76]	; 0x4c
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800227a:	6822      	ldr	r2, [r4, #0]
 800227c:	4610      	mov	r0, r2
 800227e:	f89a c029 	ldrb.w	ip, [sl, #41]	; 0x29
 8002282:	f1bc 0f00 	cmp.w	ip, #0
 8002286:	d07e      	beq.n	8002386 <HAL_PCD_IRQHandler+0xa6c>
          len = ep->xfer_len_db;
 8002288:	460b      	mov	r3, r1
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800228a:	f1bc 0f01 	cmp.w	ip, #1
 800228e:	d017      	beq.n	80022c0 <HAL_PCD_IRQHandler+0x9a6>
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002290:	00aa      	lsls	r2, r5, #2
 8002292:	1950      	adds	r0, r2, r5
 8002294:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 8002298:	b29b      	uxth	r3, r3
 800229a:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 800229c:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 800229e:	6820      	ldr	r0, [r4, #0]
 80022a0:	f001 fb3c 	bl	800391c <USB_WritePMA>
 80022a4:	e6b7      	b.n	8002016 <HAL_PCD_IRQHandler+0x6fc>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80022a6:	095a      	lsrs	r2, r3, #5
 80022a8:	f013 0f1f 	tst.w	r3, #31
 80022ac:	bf08      	it	eq
 80022ae:	f102 32ff 	addeq.w	r2, r2, #4294967295	; 0xffffffff
 80022b2:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 80022b6:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80022ba:	b292      	uxth	r2, r2
 80022bc:	8002      	strh	r2, [r0, #0]
 80022be:	e7e7      	b.n	8002290 <HAL_PCD_IRQHandler+0x976>
 80022c0:	f8b2 1050 	ldrh.w	r1, [r2, #80]	; 0x50
 80022c4:	b289      	uxth	r1, r1
 80022c6:	f89a 2028 	ldrb.w	r2, [sl, #40]	; 0x28
 80022ca:	eb00 1202 	add.w	r2, r0, r2, lsl #4
 80022ce:	f202 420c 	addw	r2, r2, #1036	; 0x40c
 80022d2:	b298      	uxth	r0, r3
 80022d4:	5250      	strh	r0, [r2, r1]
 80022d6:	e7db      	b.n	8002290 <HAL_PCD_IRQHandler+0x976>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80022d8:	6822      	ldr	r2, [r4, #0]
 80022da:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80022de:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80022e2:	041b      	lsls	r3, r3, #16
 80022e4:	0c1b      	lsrs	r3, r3, #16
 80022e6:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 80022ea:	4620      	mov	r0, r4
 80022ec:	f002 ff77 	bl	80051de <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80022f0:	2100      	movs	r1, #0
 80022f2:	4620      	mov	r0, r4
 80022f4:	f7ff fafd 	bl	80018f2 <HAL_PCD_SetAddress>
 80022f8:	f7ff bb21 	b.w	800193e <HAL_PCD_IRQHandler+0x24>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80022fc:	6822      	ldr	r2, [r4, #0]
 80022fe:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8002302:	f023 0304 	bic.w	r3, r3, #4
 8002306:	041b      	lsls	r3, r3, #16
 8002308:	0c1b      	lsrs	r3, r3, #16
 800230a:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800230e:	6822      	ldr	r2, [r4, #0]
 8002310:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8002314:	f023 0308 	bic.w	r3, r3, #8
 8002318:	041b      	lsls	r3, r3, #16
 800231a:	0c1b      	lsrs	r3, r3, #16
 800231c:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 8002320:	4620      	mov	r0, r4
 8002322:	f002 ff7d 	bl	8005220 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002326:	6822      	ldr	r2, [r4, #0]
 8002328:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800232c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002330:	041b      	lsls	r3, r3, #16
 8002332:	0c1b      	lsrs	r3, r3, #16
 8002334:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
 8002338:	f7ff bb26 	b.w	8001988 <HAL_PCD_IRQHandler+0x6e>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800233c:	6822      	ldr	r2, [r4, #0]
 800233e:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8002342:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002346:	041b      	lsls	r3, r3, #16
 8002348:	0c1b      	lsrs	r3, r3, #16
 800234a:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 800234e:	4620      	mov	r0, r4
 8002350:	f002 ff3f 	bl	80051d2 <HAL_PCD_SOFCallback>
 8002354:	f7ff bb71 	b.w	8001a3a <HAL_PCD_IRQHandler+0x120>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002358:	6822      	ldr	r2, [r4, #0]
 800235a:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 800235e:	f202 4204 	addw	r2, r2, #1028	; 0x404
 8002362:	4402      	add	r2, r0
 8002364:	f89a 3028 	ldrb.w	r3, [sl, #40]	; 0x28
 8002368:	eb02 1203 	add.w	r2, r2, r3, lsl #4
          len = ep->xfer_len_db;
 800236c:	460b      	mov	r3, r1
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800236e:	2b3e      	cmp	r3, #62	; 0x3e
 8002370:	f63f aee4 	bhi.w	800213c <HAL_PCD_IRQHandler+0x822>
 8002374:	0859      	lsrs	r1, r3, #1
 8002376:	f013 0f01 	tst.w	r3, #1
 800237a:	bf18      	it	ne
 800237c:	3101      	addne	r1, #1
 800237e:	0289      	lsls	r1, r1, #10
 8002380:	b289      	uxth	r1, r1
 8002382:	8011      	strh	r1, [r2, #0]
 8002384:	e6ab      	b.n	80020de <HAL_PCD_IRQHandler+0x7c4>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002386:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 800238a:	f202 430c 	addw	r3, r2, #1036	; 0x40c
 800238e:	4403      	add	r3, r0
 8002390:	f89a 0028 	ldrb.w	r0, [sl, #40]	; 0x28
 8002394:	eb03 1000 	add.w	r0, r3, r0, lsl #4
          len = ep->xfer_len_db;
 8002398:	460b      	mov	r3, r1
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800239a:	2b3e      	cmp	r3, #62	; 0x3e
 800239c:	d883      	bhi.n	80022a6 <HAL_PCD_IRQHandler+0x98c>
 800239e:	085a      	lsrs	r2, r3, #1
 80023a0:	f013 0f01 	tst.w	r3, #1
 80023a4:	bf18      	it	ne
 80023a6:	3201      	addne	r2, #1
 80023a8:	0292      	lsls	r2, r2, #10
 80023aa:	b292      	uxth	r2, r2
 80023ac:	8002      	strh	r2, [r0, #0]
 80023ae:	e76f      	b.n	8002290 <HAL_PCD_IRQHandler+0x976>

080023b0 <HAL_PCD_EP_Open>:
{
 80023b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((ep_addr & 0x80U) == 0x80U)
 80023b2:	f011 0f80 	tst.w	r1, #128	; 0x80
 80023b6:	d129      	bne.n	800240c <HAL_PCD_EP_Open+0x5c>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80023b8:	f001 0707 	and.w	r7, r1, #7
 80023bc:	00be      	lsls	r6, r7, #2
 80023be:	19f4      	adds	r4, r6, r7
 80023c0:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 80023c4:	f504 74b4 	add.w	r4, r4, #360	; 0x168
    ep->is_in = 0U;
 80023c8:	443e      	add	r6, r7
 80023ca:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 80023ce:	2500      	movs	r5, #0
 80023d0:	f886 5169 	strb.w	r5, [r6, #361]	; 0x169
  ep->num = ep_addr & EP_ADDR_MSK;
 80023d4:	f001 0107 	and.w	r1, r1, #7
 80023d8:	7021      	strb	r1, [r4, #0]
  ep->maxpacket = ep_mps;
 80023da:	6122      	str	r2, [r4, #16]
  ep->type = ep_type;
 80023dc:	70e3      	strb	r3, [r4, #3]
  if (ep->is_in != 0U)
 80023de:	7862      	ldrb	r2, [r4, #1]
 80023e0:	b102      	cbz	r2, 80023e4 <HAL_PCD_EP_Open+0x34>
    ep->tx_fifo_num = ep->num;
 80023e2:	81e1      	strh	r1, [r4, #14]
  if (ep_type == EP_TYPE_BULK)
 80023e4:	2b02      	cmp	r3, #2
    ep->data_pid_start = 0U;
 80023e6:	bf04      	itt	eq
 80023e8:	2300      	moveq	r3, #0
 80023ea:	7123      	strbeq	r3, [r4, #4]
  __HAL_LOCK(hpcd);
 80023ec:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d015      	beq.n	8002420 <HAL_PCD_EP_Open+0x70>
 80023f4:	4605      	mov	r5, r0
 80023f6:	2301      	movs	r3, #1
 80023f8:	f880 32a8 	strb.w	r3, [r0, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80023fc:	4621      	mov	r1, r4
 80023fe:	6800      	ldr	r0, [r0, #0]
 8002400:	f000 ffa2 	bl	8003348 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002404:	2000      	movs	r0, #0
 8002406:	f885 02a8 	strb.w	r0, [r5, #680]	; 0x2a8
}
 800240a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800240c:	f001 0507 	and.w	r5, r1, #7
 8002410:	1c6e      	adds	r6, r5, #1
 8002412:	00b5      	lsls	r5, r6, #2
 8002414:	19ac      	adds	r4, r5, r6
 8002416:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
    ep->is_in = 1U;
 800241a:	2601      	movs	r6, #1
 800241c:	7066      	strb	r6, [r4, #1]
 800241e:	e7d9      	b.n	80023d4 <HAL_PCD_EP_Open+0x24>
  __HAL_LOCK(hpcd);
 8002420:	2002      	movs	r0, #2
 8002422:	e7f2      	b.n	800240a <HAL_PCD_EP_Open+0x5a>

08002424 <HAL_PCD_EP_Close>:
{
 8002424:	b510      	push	{r4, lr}
  if ((ep_addr & 0x80U) == 0x80U)
 8002426:	f011 0f80 	tst.w	r1, #128	; 0x80
 800242a:	d120      	bne.n	800246e <HAL_PCD_EP_Close+0x4a>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800242c:	f001 0407 	and.w	r4, r1, #7
 8002430:	00a3      	lsls	r3, r4, #2
 8002432:	191a      	adds	r2, r3, r4
 8002434:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 8002438:	f502 72b4 	add.w	r2, r2, #360	; 0x168
    ep->is_in = 0U;
 800243c:	4423      	add	r3, r4
 800243e:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8002442:	2400      	movs	r4, #0
 8002444:	f883 4169 	strb.w	r4, [r3, #361]	; 0x169
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002448:	f001 0307 	and.w	r3, r1, #7
 800244c:	7013      	strb	r3, [r2, #0]
  __HAL_LOCK(hpcd);
 800244e:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
 8002452:	2b01      	cmp	r3, #1
 8002454:	d015      	beq.n	8002482 <HAL_PCD_EP_Close+0x5e>
 8002456:	4604      	mov	r4, r0
 8002458:	2301      	movs	r3, #1
 800245a:	f880 32a8 	strb.w	r3, [r0, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800245e:	4611      	mov	r1, r2
 8002460:	6800      	ldr	r0, [r0, #0]
 8002462:	f001 f8ec 	bl	800363e <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002466:	2000      	movs	r0, #0
 8002468:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 800246c:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800246e:	f001 0307 	and.w	r3, r1, #7
 8002472:	1c5c      	adds	r4, r3, #1
 8002474:	00a3      	lsls	r3, r4, #2
 8002476:	191a      	adds	r2, r3, r4
 8002478:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
    ep->is_in = 1U;
 800247c:	2401      	movs	r4, #1
 800247e:	7054      	strb	r4, [r2, #1]
 8002480:	e7e2      	b.n	8002448 <HAL_PCD_EP_Close+0x24>
  __HAL_LOCK(hpcd);
 8002482:	2002      	movs	r0, #2
 8002484:	e7f2      	b.n	800246c <HAL_PCD_EP_Close+0x48>

08002486 <HAL_PCD_EP_Receive>:
{
 8002486:	b570      	push	{r4, r5, r6, lr}
 8002488:	f001 0507 	and.w	r5, r1, #7
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800248c:	00ac      	lsls	r4, r5, #2
 800248e:	1961      	adds	r1, r4, r5
 8002490:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8002494:	f501 71b4 	add.w	r1, r1, #360	; 0x168
  ep->xfer_buff = pBuf;
 8002498:	1966      	adds	r6, r4, r5
 800249a:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 800249e:	f8c6 217c 	str.w	r2, [r6, #380]	; 0x17c
  ep->xfer_len = len;
 80024a2:	f8c6 3180 	str.w	r3, [r6, #384]	; 0x180
  ep->xfer_count = 0U;
 80024a6:	2300      	movs	r3, #0
 80024a8:	f8c6 3184 	str.w	r3, [r6, #388]	; 0x184
  ep->is_in = 0U;
 80024ac:	f886 3169 	strb.w	r3, [r6, #361]	; 0x169
  ep->num = ep_addr & EP_ADDR_MSK;
 80024b0:	f886 5168 	strb.w	r5, [r6, #360]	; 0x168
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80024b4:	6800      	ldr	r0, [r0, #0]
 80024b6:	f001 fa48 	bl	800394a <USB_EPStartXfer>
}
 80024ba:	2000      	movs	r0, #0
 80024bc:	bd70      	pop	{r4, r5, r6, pc}

080024be <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80024be:	f001 0107 	and.w	r1, r1, #7
 80024c2:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80024c6:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
}
 80024ca:	f8d1 0184 	ldr.w	r0, [r1, #388]	; 0x184
 80024ce:	4770      	bx	lr

080024d0 <HAL_PCD_EP_Transmit>:
{
 80024d0:	b570      	push	{r4, r5, r6, lr}
 80024d2:	f001 0607 	and.w	r6, r1, #7
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80024d6:	1c74      	adds	r4, r6, #1
 80024d8:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80024dc:	eb00 01c4 	add.w	r1, r0, r4, lsl #3
  ep->xfer_buff = pBuf;
 80024e0:	00b4      	lsls	r4, r6, #2
 80024e2:	19a5      	adds	r5, r4, r6
 80024e4:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
 80024e8:	63ea      	str	r2, [r5, #60]	; 0x3c
  ep->xfer_len = len;
 80024ea:	642b      	str	r3, [r5, #64]	; 0x40
  ep->xfer_fill_db = 1U;
 80024ec:	2201      	movs	r2, #1
 80024ee:	f885 204c 	strb.w	r2, [r5, #76]	; 0x4c
  ep->xfer_len_db = len;
 80024f2:	64ab      	str	r3, [r5, #72]	; 0x48
  ep->xfer_count = 0U;
 80024f4:	2300      	movs	r3, #0
 80024f6:	646b      	str	r3, [r5, #68]	; 0x44
  ep->is_in = 1U;
 80024f8:	f885 2029 	strb.w	r2, [r5, #41]	; 0x29
  ep->num = ep_addr & EP_ADDR_MSK;
 80024fc:	f885 6028 	strb.w	r6, [r5, #40]	; 0x28
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002500:	6800      	ldr	r0, [r0, #0]
 8002502:	f001 fa22 	bl	800394a <USB_EPStartXfer>
}
 8002506:	2000      	movs	r0, #0
 8002508:	bd70      	pop	{r4, r5, r6, pc}

0800250a <HAL_PCD_EP_SetStall>:
{
 800250a:	b538      	push	{r3, r4, r5, lr}
 800250c:	f001 0507 	and.w	r5, r1, #7
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002510:	6843      	ldr	r3, [r0, #4]
 8002512:	429d      	cmp	r5, r3
 8002514:	d830      	bhi.n	8002578 <HAL_PCD_EP_SetStall+0x6e>
  if ((0x80U & ep_addr) == 0x80U)
 8002516:	f011 0f80 	tst.w	r1, #128	; 0x80
 800251a:	d11f      	bne.n	800255c <HAL_PCD_EP_SetStall+0x52>
    ep = &hpcd->OUT_ep[ep_addr];
 800251c:	008a      	lsls	r2, r1, #2
 800251e:	1853      	adds	r3, r2, r1
 8002520:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8002524:	f503 73b4 	add.w	r3, r3, #360	; 0x168
    ep->is_in = 0U;
 8002528:	4411      	add	r1, r2
 800252a:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800252e:	2200      	movs	r2, #0
 8002530:	f881 2169 	strb.w	r2, [r1, #361]	; 0x169
  ep->is_stall = 1U;
 8002534:	2201      	movs	r2, #1
 8002536:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002538:	701d      	strb	r5, [r3, #0]
  __HAL_LOCK(hpcd);
 800253a:	f890 22a8 	ldrb.w	r2, [r0, #680]	; 0x2a8
 800253e:	2a01      	cmp	r2, #1
 8002540:	d01c      	beq.n	800257c <HAL_PCD_EP_SetStall+0x72>
 8002542:	4604      	mov	r4, r0
 8002544:	2201      	movs	r2, #1
 8002546:	f880 22a8 	strb.w	r2, [r0, #680]	; 0x2a8
  (void)USB_EPSetStall(hpcd->Instance, ep);
 800254a:	4619      	mov	r1, r3
 800254c:	6800      	ldr	r0, [r0, #0]
 800254e:	f001 f960 	bl	8003812 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002552:	b15d      	cbz	r5, 800256c <HAL_PCD_EP_SetStall+0x62>
  __HAL_UNLOCK(hpcd);
 8002554:	2000      	movs	r0, #0
 8002556:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
  return HAL_OK;
 800255a:	e00e      	b.n	800257a <HAL_PCD_EP_SetStall+0x70>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800255c:	1c6c      	adds	r4, r5, #1
 800255e:	00a2      	lsls	r2, r4, #2
 8002560:	1913      	adds	r3, r2, r4
 8002562:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
    ep->is_in = 1U;
 8002566:	2101      	movs	r1, #1
 8002568:	7059      	strb	r1, [r3, #1]
 800256a:	e7e3      	b.n	8002534 <HAL_PCD_EP_SetStall+0x2a>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800256c:	f504 712c 	add.w	r1, r4, #688	; 0x2b0
 8002570:	6820      	ldr	r0, [r4, #0]
 8002572:	f001 f9d1 	bl	8003918 <USB_EP0_OutStart>
 8002576:	e7ed      	b.n	8002554 <HAL_PCD_EP_SetStall+0x4a>
    return HAL_ERROR;
 8002578:	2001      	movs	r0, #1
}
 800257a:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 800257c:	2002      	movs	r0, #2
 800257e:	e7fc      	b.n	800257a <HAL_PCD_EP_SetStall+0x70>

08002580 <HAL_PCD_EP_ClrStall>:
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002580:	f001 020f 	and.w	r2, r1, #15
 8002584:	6843      	ldr	r3, [r0, #4]
 8002586:	429a      	cmp	r2, r3
 8002588:	d830      	bhi.n	80025ec <HAL_PCD_EP_ClrStall+0x6c>
{
 800258a:	b510      	push	{r4, lr}
  if ((0x80U & ep_addr) == 0x80U)
 800258c:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002590:	d122      	bne.n	80025d8 <HAL_PCD_EP_ClrStall+0x58>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002592:	f001 0407 	and.w	r4, r1, #7
 8002596:	00a3      	lsls	r3, r4, #2
 8002598:	191a      	adds	r2, r3, r4
 800259a:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 800259e:	f502 72b4 	add.w	r2, r2, #360	; 0x168
    ep->is_in = 0U;
 80025a2:	4423      	add	r3, r4
 80025a4:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 80025a8:	2400      	movs	r4, #0
 80025aa:	f883 4169 	strb.w	r4, [r3, #361]	; 0x169
  ep->is_stall = 0U;
 80025ae:	2300      	movs	r3, #0
 80025b0:	7093      	strb	r3, [r2, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80025b2:	f001 0307 	and.w	r3, r1, #7
 80025b6:	7013      	strb	r3, [r2, #0]
  __HAL_LOCK(hpcd);
 80025b8:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d017      	beq.n	80025f0 <HAL_PCD_EP_ClrStall+0x70>
 80025c0:	4604      	mov	r4, r0
 80025c2:	2301      	movs	r3, #1
 80025c4:	f880 32a8 	strb.w	r3, [r0, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80025c8:	4611      	mov	r1, r2
 80025ca:	6800      	ldr	r0, [r0, #0]
 80025cc:	f001 f946 	bl	800385c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80025d0:	2000      	movs	r0, #0
 80025d2:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 80025d6:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80025d8:	f001 0307 	and.w	r3, r1, #7
 80025dc:	1c5c      	adds	r4, r3, #1
 80025de:	00a3      	lsls	r3, r4, #2
 80025e0:	191a      	adds	r2, r3, r4
 80025e2:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
    ep->is_in = 1U;
 80025e6:	2401      	movs	r4, #1
 80025e8:	7054      	strb	r4, [r2, #1]
 80025ea:	e7e0      	b.n	80025ae <HAL_PCD_EP_ClrStall+0x2e>
    return HAL_ERROR;
 80025ec:	2001      	movs	r0, #1
}
 80025ee:	4770      	bx	lr
  __HAL_LOCK(hpcd);
 80025f0:	2002      	movs	r0, #2
 80025f2:	e7f0      	b.n	80025d6 <HAL_PCD_EP_ClrStall+0x56>

080025f4 <HAL_PCDEx_PMAConfig>:
                                       uint16_t ep_kind, uint32_t pmaadress)
{
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80025f4:	f011 0f80 	tst.w	r1, #128	; 0x80
 80025f8:	d00e      	beq.n	8002618 <HAL_PCDEx_PMAConfig+0x24>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80025fa:	f001 0107 	and.w	r1, r1, #7
 80025fe:	3101      	adds	r1, #1
 8002600:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8002604:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002608:	b16a      	cbz	r2, 8002626 <HAL_PCDEx_PMAConfig+0x32>
    ep->pmaadress = (uint16_t)pmaadress;
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800260a:	2201      	movs	r2, #1
 800260c:	730a      	strb	r2, [r1, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800260e:	810b      	strh	r3, [r1, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002610:	0c1b      	lsrs	r3, r3, #16
 8002612:	814b      	strh	r3, [r1, #10]
  }

  return HAL_OK;
}
 8002614:	2000      	movs	r0, #0
 8002616:	4770      	bx	lr
    ep = &hpcd->OUT_ep[ep_addr];
 8002618:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800261c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8002620:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 8002624:	e7f0      	b.n	8002608 <HAL_PCDEx_PMAConfig+0x14>
    ep->doublebuffer = 0U;
 8002626:	730a      	strb	r2, [r1, #12]
    ep->pmaadress = (uint16_t)pmaadress;
 8002628:	80cb      	strh	r3, [r1, #6]
 800262a:	e7f3      	b.n	8002614 <HAL_PCDEx_PMAConfig+0x20>

0800262c <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800262c:	2800      	cmp	r0, #0
 800262e:	f000 8206 	beq.w	8002a3e <HAL_RCC_OscConfig+0x412>
{
 8002632:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002636:	b082      	sub	sp, #8
 8002638:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800263a:	6803      	ldr	r3, [r0, #0]
 800263c:	f013 0f01 	tst.w	r3, #1
 8002640:	d02c      	beq.n	800269c <HAL_RCC_OscConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002642:	4bab      	ldr	r3, [pc, #684]	; (80028f0 <HAL_RCC_OscConfig+0x2c4>)
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	f003 030c 	and.w	r3, r3, #12
 800264a:	2b04      	cmp	r3, #4
 800264c:	d01d      	beq.n	800268a <HAL_RCC_OscConfig+0x5e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800264e:	4ba8      	ldr	r3, [pc, #672]	; (80028f0 <HAL_RCC_OscConfig+0x2c4>)
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	f003 030c 	and.w	r3, r3, #12
 8002656:	2b08      	cmp	r3, #8
 8002658:	d012      	beq.n	8002680 <HAL_RCC_OscConfig+0x54>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800265a:	6863      	ldr	r3, [r4, #4]
 800265c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002660:	d041      	beq.n	80026e6 <HAL_RCC_OscConfig+0xba>
 8002662:	2b00      	cmp	r3, #0
 8002664:	d155      	bne.n	8002712 <HAL_RCC_OscConfig+0xe6>
 8002666:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800266a:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002674:	601a      	str	r2, [r3, #0]
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800267c:	601a      	str	r2, [r3, #0]
 800267e:	e037      	b.n	80026f0 <HAL_RCC_OscConfig+0xc4>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002680:	4b9b      	ldr	r3, [pc, #620]	; (80028f0 <HAL_RCC_OscConfig+0x2c4>)
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8002688:	d0e7      	beq.n	800265a <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800268a:	4b99      	ldr	r3, [pc, #612]	; (80028f0 <HAL_RCC_OscConfig+0x2c4>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002692:	d003      	beq.n	800269c <HAL_RCC_OscConfig+0x70>
 8002694:	6863      	ldr	r3, [r4, #4]
 8002696:	2b00      	cmp	r3, #0
 8002698:	f000 81d3 	beq.w	8002a42 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800269c:	6823      	ldr	r3, [r4, #0]
 800269e:	f013 0f02 	tst.w	r3, #2
 80026a2:	d076      	beq.n	8002792 <HAL_RCC_OscConfig+0x166>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80026a4:	4b92      	ldr	r3, [pc, #584]	; (80028f0 <HAL_RCC_OscConfig+0x2c4>)
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	f013 0f0c 	tst.w	r3, #12
 80026ac:	d05f      	beq.n	800276e <HAL_RCC_OscConfig+0x142>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80026ae:	4b90      	ldr	r3, [pc, #576]	; (80028f0 <HAL_RCC_OscConfig+0x2c4>)
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	f003 030c 	and.w	r3, r3, #12
 80026b6:	2b08      	cmp	r3, #8
 80026b8:	d054      	beq.n	8002764 <HAL_RCC_OscConfig+0x138>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80026ba:	6923      	ldr	r3, [r4, #16]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	f000 808a 	beq.w	80027d6 <HAL_RCC_OscConfig+0x1aa>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026c2:	4b8c      	ldr	r3, [pc, #560]	; (80028f4 <HAL_RCC_OscConfig+0x2c8>)
 80026c4:	2201      	movs	r2, #1
 80026c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026c8:	f7fe fefa 	bl	80014c0 <HAL_GetTick>
 80026cc:	4606      	mov	r6, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026ce:	4d88      	ldr	r5, [pc, #544]	; (80028f0 <HAL_RCC_OscConfig+0x2c4>)
 80026d0:	682b      	ldr	r3, [r5, #0]
 80026d2:	f013 0f02 	tst.w	r3, #2
 80026d6:	d175      	bne.n	80027c4 <HAL_RCC_OscConfig+0x198>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026d8:	f7fe fef2 	bl	80014c0 <HAL_GetTick>
 80026dc:	1b80      	subs	r0, r0, r6
 80026de:	2802      	cmp	r0, #2
 80026e0:	d9f6      	bls.n	80026d0 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_TIMEOUT;
 80026e2:	2003      	movs	r0, #3
 80026e4:	e1b0      	b.n	8002a48 <HAL_RCC_OscConfig+0x41c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026e6:	4a82      	ldr	r2, [pc, #520]	; (80028f0 <HAL_RCC_OscConfig+0x2c4>)
 80026e8:	6813      	ldr	r3, [r2, #0]
 80026ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026ee:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026f0:	6863      	ldr	r3, [r4, #4]
 80026f2:	b343      	cbz	r3, 8002746 <HAL_RCC_OscConfig+0x11a>
        tickstart = HAL_GetTick();
 80026f4:	f7fe fee4 	bl	80014c0 <HAL_GetTick>
 80026f8:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026fa:	4d7d      	ldr	r5, [pc, #500]	; (80028f0 <HAL_RCC_OscConfig+0x2c4>)
 80026fc:	682b      	ldr	r3, [r5, #0]
 80026fe:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002702:	d1cb      	bne.n	800269c <HAL_RCC_OscConfig+0x70>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002704:	f7fe fedc 	bl	80014c0 <HAL_GetTick>
 8002708:	1b80      	subs	r0, r0, r6
 800270a:	2864      	cmp	r0, #100	; 0x64
 800270c:	d9f6      	bls.n	80026fc <HAL_RCC_OscConfig+0xd0>
            return HAL_TIMEOUT;
 800270e:	2003      	movs	r0, #3
 8002710:	e19a      	b.n	8002a48 <HAL_RCC_OscConfig+0x41c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002712:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002716:	d009      	beq.n	800272c <HAL_RCC_OscConfig+0x100>
 8002718:	4b75      	ldr	r3, [pc, #468]	; (80028f0 <HAL_RCC_OscConfig+0x2c4>)
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002720:	601a      	str	r2, [r3, #0]
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002728:	601a      	str	r2, [r3, #0]
 800272a:	e7e1      	b.n	80026f0 <HAL_RCC_OscConfig+0xc4>
 800272c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002730:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800273a:	601a      	str	r2, [r3, #0]
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002742:	601a      	str	r2, [r3, #0]
 8002744:	e7d4      	b.n	80026f0 <HAL_RCC_OscConfig+0xc4>
        tickstart = HAL_GetTick();
 8002746:	f7fe febb 	bl	80014c0 <HAL_GetTick>
 800274a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800274c:	4d68      	ldr	r5, [pc, #416]	; (80028f0 <HAL_RCC_OscConfig+0x2c4>)
 800274e:	682b      	ldr	r3, [r5, #0]
 8002750:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002754:	d0a2      	beq.n	800269c <HAL_RCC_OscConfig+0x70>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002756:	f7fe feb3 	bl	80014c0 <HAL_GetTick>
 800275a:	1b80      	subs	r0, r0, r6
 800275c:	2864      	cmp	r0, #100	; 0x64
 800275e:	d9f6      	bls.n	800274e <HAL_RCC_OscConfig+0x122>
            return HAL_TIMEOUT;
 8002760:	2003      	movs	r0, #3
 8002762:	e171      	b.n	8002a48 <HAL_RCC_OscConfig+0x41c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002764:	4b62      	ldr	r3, [pc, #392]	; (80028f0 <HAL_RCC_OscConfig+0x2c4>)
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800276c:	d1a5      	bne.n	80026ba <HAL_RCC_OscConfig+0x8e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800276e:	4b60      	ldr	r3, [pc, #384]	; (80028f0 <HAL_RCC_OscConfig+0x2c4>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f013 0f02 	tst.w	r3, #2
 8002776:	d004      	beq.n	8002782 <HAL_RCC_OscConfig+0x156>
 8002778:	6923      	ldr	r3, [r4, #16]
 800277a:	2b01      	cmp	r3, #1
 800277c:	d001      	beq.n	8002782 <HAL_RCC_OscConfig+0x156>
        return HAL_ERROR;
 800277e:	2001      	movs	r0, #1
 8002780:	e162      	b.n	8002a48 <HAL_RCC_OscConfig+0x41c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002782:	4a5b      	ldr	r2, [pc, #364]	; (80028f0 <HAL_RCC_OscConfig+0x2c4>)
 8002784:	6813      	ldr	r3, [r2, #0]
 8002786:	6961      	ldr	r1, [r4, #20]
 8002788:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800278c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002790:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002792:	6823      	ldr	r3, [r4, #0]
 8002794:	f013 0f08 	tst.w	r3, #8
 8002798:	d03c      	beq.n	8002814 <HAL_RCC_OscConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800279a:	69a3      	ldr	r3, [r4, #24]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d065      	beq.n	800286c <HAL_RCC_OscConfig+0x240>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027a0:	4b55      	ldr	r3, [pc, #340]	; (80028f8 <HAL_RCC_OscConfig+0x2cc>)
 80027a2:	2201      	movs	r2, #1
 80027a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027a6:	f7fe fe8b 	bl	80014c0 <HAL_GetTick>
 80027aa:	4606      	mov	r6, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027ac:	4d50      	ldr	r5, [pc, #320]	; (80028f0 <HAL_RCC_OscConfig+0x2c4>)
 80027ae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80027b0:	f013 0f02 	tst.w	r3, #2
 80027b4:	d121      	bne.n	80027fa <HAL_RCC_OscConfig+0x1ce>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027b6:	f7fe fe83 	bl	80014c0 <HAL_GetTick>
 80027ba:	1b80      	subs	r0, r0, r6
 80027bc:	2802      	cmp	r0, #2
 80027be:	d9f6      	bls.n	80027ae <HAL_RCC_OscConfig+0x182>
        {
          return HAL_TIMEOUT;
 80027c0:	2003      	movs	r0, #3
 80027c2:	e141      	b.n	8002a48 <HAL_RCC_OscConfig+0x41c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027c4:	4a4a      	ldr	r2, [pc, #296]	; (80028f0 <HAL_RCC_OscConfig+0x2c4>)
 80027c6:	6813      	ldr	r3, [r2, #0]
 80027c8:	6961      	ldr	r1, [r4, #20]
 80027ca:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80027ce:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80027d2:	6013      	str	r3, [r2, #0]
 80027d4:	e7dd      	b.n	8002792 <HAL_RCC_OscConfig+0x166>
        __HAL_RCC_HSI_DISABLE();
 80027d6:	4b47      	ldr	r3, [pc, #284]	; (80028f4 <HAL_RCC_OscConfig+0x2c8>)
 80027d8:	2200      	movs	r2, #0
 80027da:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80027dc:	f7fe fe70 	bl	80014c0 <HAL_GetTick>
 80027e0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027e2:	4d43      	ldr	r5, [pc, #268]	; (80028f0 <HAL_RCC_OscConfig+0x2c4>)
 80027e4:	682b      	ldr	r3, [r5, #0]
 80027e6:	f013 0f02 	tst.w	r3, #2
 80027ea:	d0d2      	beq.n	8002792 <HAL_RCC_OscConfig+0x166>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027ec:	f7fe fe68 	bl	80014c0 <HAL_GetTick>
 80027f0:	1b80      	subs	r0, r0, r6
 80027f2:	2802      	cmp	r0, #2
 80027f4:	d9f6      	bls.n	80027e4 <HAL_RCC_OscConfig+0x1b8>
            return HAL_TIMEOUT;
 80027f6:	2003      	movs	r0, #3
 80027f8:	e126      	b.n	8002a48 <HAL_RCC_OscConfig+0x41c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80027fa:	4b40      	ldr	r3, [pc, #256]	; (80028fc <HAL_RCC_OscConfig+0x2d0>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a40      	ldr	r2, [pc, #256]	; (8002900 <HAL_RCC_OscConfig+0x2d4>)
 8002800:	fba2 2303 	umull	r2, r3, r2, r3
 8002804:	0a5b      	lsrs	r3, r3, #9
 8002806:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8002808:	bf00      	nop
  }
  while (Delay --);
 800280a:	9b01      	ldr	r3, [sp, #4]
 800280c:	1e5a      	subs	r2, r3, #1
 800280e:	9201      	str	r2, [sp, #4]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d1f9      	bne.n	8002808 <HAL_RCC_OscConfig+0x1dc>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002814:	6823      	ldr	r3, [r4, #0]
 8002816:	f013 0f04 	tst.w	r3, #4
 800281a:	f000 809e 	beq.w	800295a <HAL_RCC_OscConfig+0x32e>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800281e:	4b34      	ldr	r3, [pc, #208]	; (80028f0 <HAL_RCC_OscConfig+0x2c4>)
 8002820:	69db      	ldr	r3, [r3, #28]
 8002822:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002826:	d133      	bne.n	8002890 <HAL_RCC_OscConfig+0x264>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002828:	4b31      	ldr	r3, [pc, #196]	; (80028f0 <HAL_RCC_OscConfig+0x2c4>)
 800282a:	69da      	ldr	r2, [r3, #28]
 800282c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002830:	61da      	str	r2, [r3, #28]
 8002832:	69db      	ldr	r3, [r3, #28]
 8002834:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002838:	9300      	str	r3, [sp, #0]
 800283a:	9b00      	ldr	r3, [sp, #0]
      pwrclkchanged = SET;
 800283c:	2501      	movs	r5, #1
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800283e:	4b31      	ldr	r3, [pc, #196]	; (8002904 <HAL_RCC_OscConfig+0x2d8>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002846:	d025      	beq.n	8002894 <HAL_RCC_OscConfig+0x268>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002848:	68e3      	ldr	r3, [r4, #12]
 800284a:	2b01      	cmp	r3, #1
 800284c:	d036      	beq.n	80028bc <HAL_RCC_OscConfig+0x290>
 800284e:	2b00      	cmp	r3, #0
 8002850:	d15a      	bne.n	8002908 <HAL_RCC_OscConfig+0x2dc>
 8002852:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002856:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 800285a:	6a1a      	ldr	r2, [r3, #32]
 800285c:	f022 0201 	bic.w	r2, r2, #1
 8002860:	621a      	str	r2, [r3, #32]
 8002862:	6a1a      	ldr	r2, [r3, #32]
 8002864:	f022 0204 	bic.w	r2, r2, #4
 8002868:	621a      	str	r2, [r3, #32]
 800286a:	e02c      	b.n	80028c6 <HAL_RCC_OscConfig+0x29a>
      __HAL_RCC_LSI_DISABLE();
 800286c:	4b22      	ldr	r3, [pc, #136]	; (80028f8 <HAL_RCC_OscConfig+0x2cc>)
 800286e:	2200      	movs	r2, #0
 8002870:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8002872:	f7fe fe25 	bl	80014c0 <HAL_GetTick>
 8002876:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002878:	4d1d      	ldr	r5, [pc, #116]	; (80028f0 <HAL_RCC_OscConfig+0x2c4>)
 800287a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800287c:	f013 0f02 	tst.w	r3, #2
 8002880:	d0c8      	beq.n	8002814 <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002882:	f7fe fe1d 	bl	80014c0 <HAL_GetTick>
 8002886:	1b80      	subs	r0, r0, r6
 8002888:	2802      	cmp	r0, #2
 800288a:	d9f6      	bls.n	800287a <HAL_RCC_OscConfig+0x24e>
          return HAL_TIMEOUT;
 800288c:	2003      	movs	r0, #3
 800288e:	e0db      	b.n	8002a48 <HAL_RCC_OscConfig+0x41c>
    FlagStatus       pwrclkchanged = RESET;
 8002890:	2500      	movs	r5, #0
 8002892:	e7d4      	b.n	800283e <HAL_RCC_OscConfig+0x212>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002894:	4a1b      	ldr	r2, [pc, #108]	; (8002904 <HAL_RCC_OscConfig+0x2d8>)
 8002896:	6813      	ldr	r3, [r2, #0]
 8002898:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800289c:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800289e:	f7fe fe0f 	bl	80014c0 <HAL_GetTick>
 80028a2:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028a4:	4e17      	ldr	r6, [pc, #92]	; (8002904 <HAL_RCC_OscConfig+0x2d8>)
 80028a6:	6833      	ldr	r3, [r6, #0]
 80028a8:	f413 7f80 	tst.w	r3, #256	; 0x100
 80028ac:	d1cc      	bne.n	8002848 <HAL_RCC_OscConfig+0x21c>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028ae:	f7fe fe07 	bl	80014c0 <HAL_GetTick>
 80028b2:	1bc0      	subs	r0, r0, r7
 80028b4:	2864      	cmp	r0, #100	; 0x64
 80028b6:	d9f6      	bls.n	80028a6 <HAL_RCC_OscConfig+0x27a>
          return HAL_TIMEOUT;
 80028b8:	2003      	movs	r0, #3
 80028ba:	e0c5      	b.n	8002a48 <HAL_RCC_OscConfig+0x41c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028bc:	4a0c      	ldr	r2, [pc, #48]	; (80028f0 <HAL_RCC_OscConfig+0x2c4>)
 80028be:	6a13      	ldr	r3, [r2, #32]
 80028c0:	f043 0301 	orr.w	r3, r3, #1
 80028c4:	6213      	str	r3, [r2, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80028c6:	68e3      	ldr	r3, [r4, #12]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d033      	beq.n	8002934 <HAL_RCC_OscConfig+0x308>
      tickstart = HAL_GetTick();
 80028cc:	f7fe fdf8 	bl	80014c0 <HAL_GetTick>
 80028d0:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028d2:	4e07      	ldr	r6, [pc, #28]	; (80028f0 <HAL_RCC_OscConfig+0x2c4>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028d4:	f241 3788 	movw	r7, #5000	; 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028d8:	6a33      	ldr	r3, [r6, #32]
 80028da:	f013 0f02 	tst.w	r3, #2
 80028de:	d13b      	bne.n	8002958 <HAL_RCC_OscConfig+0x32c>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028e0:	f7fe fdee 	bl	80014c0 <HAL_GetTick>
 80028e4:	eba0 0008 	sub.w	r0, r0, r8
 80028e8:	42b8      	cmp	r0, r7
 80028ea:	d9f5      	bls.n	80028d8 <HAL_RCC_OscConfig+0x2ac>
          return HAL_TIMEOUT;
 80028ec:	2003      	movs	r0, #3
 80028ee:	e0ab      	b.n	8002a48 <HAL_RCC_OscConfig+0x41c>
 80028f0:	40021000 	.word	0x40021000
 80028f4:	42420000 	.word	0x42420000
 80028f8:	42420480 	.word	0x42420480
 80028fc:	2000000c 	.word	0x2000000c
 8002900:	10624dd3 	.word	0x10624dd3
 8002904:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002908:	2b05      	cmp	r3, #5
 800290a:	d009      	beq.n	8002920 <HAL_RCC_OscConfig+0x2f4>
 800290c:	4b51      	ldr	r3, [pc, #324]	; (8002a54 <HAL_RCC_OscConfig+0x428>)
 800290e:	6a1a      	ldr	r2, [r3, #32]
 8002910:	f022 0201 	bic.w	r2, r2, #1
 8002914:	621a      	str	r2, [r3, #32]
 8002916:	6a1a      	ldr	r2, [r3, #32]
 8002918:	f022 0204 	bic.w	r2, r2, #4
 800291c:	621a      	str	r2, [r3, #32]
 800291e:	e7d2      	b.n	80028c6 <HAL_RCC_OscConfig+0x29a>
 8002920:	4b4c      	ldr	r3, [pc, #304]	; (8002a54 <HAL_RCC_OscConfig+0x428>)
 8002922:	6a1a      	ldr	r2, [r3, #32]
 8002924:	f042 0204 	orr.w	r2, r2, #4
 8002928:	621a      	str	r2, [r3, #32]
 800292a:	6a1a      	ldr	r2, [r3, #32]
 800292c:	f042 0201 	orr.w	r2, r2, #1
 8002930:	621a      	str	r2, [r3, #32]
 8002932:	e7c8      	b.n	80028c6 <HAL_RCC_OscConfig+0x29a>
      tickstart = HAL_GetTick();
 8002934:	f7fe fdc4 	bl	80014c0 <HAL_GetTick>
 8002938:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800293a:	4e46      	ldr	r6, [pc, #280]	; (8002a54 <HAL_RCC_OscConfig+0x428>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800293c:	f241 3788 	movw	r7, #5000	; 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002940:	6a33      	ldr	r3, [r6, #32]
 8002942:	f013 0f02 	tst.w	r3, #2
 8002946:	d007      	beq.n	8002958 <HAL_RCC_OscConfig+0x32c>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002948:	f7fe fdba 	bl	80014c0 <HAL_GetTick>
 800294c:	eba0 0008 	sub.w	r0, r0, r8
 8002950:	42b8      	cmp	r0, r7
 8002952:	d9f5      	bls.n	8002940 <HAL_RCC_OscConfig+0x314>
          return HAL_TIMEOUT;
 8002954:	2003      	movs	r0, #3
 8002956:	e077      	b.n	8002a48 <HAL_RCC_OscConfig+0x41c>
    if (pwrclkchanged == SET)
 8002958:	b9e5      	cbnz	r5, 8002994 <HAL_RCC_OscConfig+0x368>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800295a:	69e3      	ldr	r3, [r4, #28]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d072      	beq.n	8002a46 <HAL_RCC_OscConfig+0x41a>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002960:	4a3c      	ldr	r2, [pc, #240]	; (8002a54 <HAL_RCC_OscConfig+0x428>)
 8002962:	6852      	ldr	r2, [r2, #4]
 8002964:	f002 020c 	and.w	r2, r2, #12
 8002968:	2a08      	cmp	r2, #8
 800296a:	d056      	beq.n	8002a1a <HAL_RCC_OscConfig+0x3ee>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800296c:	2b02      	cmp	r3, #2
 800296e:	d017      	beq.n	80029a0 <HAL_RCC_OscConfig+0x374>
        __HAL_RCC_PLL_DISABLE();
 8002970:	4b39      	ldr	r3, [pc, #228]	; (8002a58 <HAL_RCC_OscConfig+0x42c>)
 8002972:	2200      	movs	r2, #0
 8002974:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002976:	f7fe fda3 	bl	80014c0 <HAL_GetTick>
 800297a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800297c:	4c35      	ldr	r4, [pc, #212]	; (8002a54 <HAL_RCC_OscConfig+0x428>)
 800297e:	6823      	ldr	r3, [r4, #0]
 8002980:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002984:	d047      	beq.n	8002a16 <HAL_RCC_OscConfig+0x3ea>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002986:	f7fe fd9b 	bl	80014c0 <HAL_GetTick>
 800298a:	1b40      	subs	r0, r0, r5
 800298c:	2802      	cmp	r0, #2
 800298e:	d9f6      	bls.n	800297e <HAL_RCC_OscConfig+0x352>
            return HAL_TIMEOUT;
 8002990:	2003      	movs	r0, #3
 8002992:	e059      	b.n	8002a48 <HAL_RCC_OscConfig+0x41c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002994:	4a2f      	ldr	r2, [pc, #188]	; (8002a54 <HAL_RCC_OscConfig+0x428>)
 8002996:	69d3      	ldr	r3, [r2, #28]
 8002998:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800299c:	61d3      	str	r3, [r2, #28]
 800299e:	e7dc      	b.n	800295a <HAL_RCC_OscConfig+0x32e>
        __HAL_RCC_PLL_DISABLE();
 80029a0:	4b2d      	ldr	r3, [pc, #180]	; (8002a58 <HAL_RCC_OscConfig+0x42c>)
 80029a2:	2200      	movs	r2, #0
 80029a4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80029a6:	f7fe fd8b 	bl	80014c0 <HAL_GetTick>
 80029aa:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029ac:	4d29      	ldr	r5, [pc, #164]	; (8002a54 <HAL_RCC_OscConfig+0x428>)
 80029ae:	682b      	ldr	r3, [r5, #0]
 80029b0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80029b4:	d006      	beq.n	80029c4 <HAL_RCC_OscConfig+0x398>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029b6:	f7fe fd83 	bl	80014c0 <HAL_GetTick>
 80029ba:	1b80      	subs	r0, r0, r6
 80029bc:	2802      	cmp	r0, #2
 80029be:	d9f6      	bls.n	80029ae <HAL_RCC_OscConfig+0x382>
            return HAL_TIMEOUT;
 80029c0:	2003      	movs	r0, #3
 80029c2:	e041      	b.n	8002a48 <HAL_RCC_OscConfig+0x41c>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80029c4:	6a23      	ldr	r3, [r4, #32]
 80029c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029ca:	d01a      	beq.n	8002a02 <HAL_RCC_OscConfig+0x3d6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029cc:	4921      	ldr	r1, [pc, #132]	; (8002a54 <HAL_RCC_OscConfig+0x428>)
 80029ce:	684a      	ldr	r2, [r1, #4]
 80029d0:	6a23      	ldr	r3, [r4, #32]
 80029d2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80029d4:	4303      	orrs	r3, r0
 80029d6:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 80029da:	4313      	orrs	r3, r2
 80029dc:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 80029de:	4b1e      	ldr	r3, [pc, #120]	; (8002a58 <HAL_RCC_OscConfig+0x42c>)
 80029e0:	2201      	movs	r2, #1
 80029e2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80029e4:	f7fe fd6c 	bl	80014c0 <HAL_GetTick>
 80029e8:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029ea:	4c1a      	ldr	r4, [pc, #104]	; (8002a54 <HAL_RCC_OscConfig+0x428>)
 80029ec:	6823      	ldr	r3, [r4, #0]
 80029ee:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80029f2:	d10e      	bne.n	8002a12 <HAL_RCC_OscConfig+0x3e6>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029f4:	f7fe fd64 	bl	80014c0 <HAL_GetTick>
 80029f8:	1b40      	subs	r0, r0, r5
 80029fa:	2802      	cmp	r0, #2
 80029fc:	d9f6      	bls.n	80029ec <HAL_RCC_OscConfig+0x3c0>
            return HAL_TIMEOUT;
 80029fe:	2003      	movs	r0, #3
 8002a00:	e022      	b.n	8002a48 <HAL_RCC_OscConfig+0x41c>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002a02:	4a14      	ldr	r2, [pc, #80]	; (8002a54 <HAL_RCC_OscConfig+0x428>)
 8002a04:	6853      	ldr	r3, [r2, #4]
 8002a06:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002a0a:	68a1      	ldr	r1, [r4, #8]
 8002a0c:	430b      	orrs	r3, r1
 8002a0e:	6053      	str	r3, [r2, #4]
 8002a10:	e7dc      	b.n	80029cc <HAL_RCC_OscConfig+0x3a0>
  return HAL_OK;
 8002a12:	2000      	movs	r0, #0
 8002a14:	e018      	b.n	8002a48 <HAL_RCC_OscConfig+0x41c>
 8002a16:	2000      	movs	r0, #0
 8002a18:	e016      	b.n	8002a48 <HAL_RCC_OscConfig+0x41c>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d017      	beq.n	8002a4e <HAL_RCC_OscConfig+0x422>
        pll_config = RCC->CFGR;
 8002a1e:	4b0d      	ldr	r3, [pc, #52]	; (8002a54 <HAL_RCC_OscConfig+0x428>)
 8002a20:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a22:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8002a26:	6a22      	ldr	r2, [r4, #32]
 8002a28:	4291      	cmp	r1, r2
 8002a2a:	d001      	beq.n	8002a30 <HAL_RCC_OscConfig+0x404>
          return HAL_ERROR;
 8002a2c:	2001      	movs	r0, #1
 8002a2e:	e00b      	b.n	8002a48 <HAL_RCC_OscConfig+0x41c>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002a30:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a34:	6a60      	ldr	r0, [r4, #36]	; 0x24
    return HAL_ERROR;
 8002a36:	1a18      	subs	r0, r3, r0
 8002a38:	bf18      	it	ne
 8002a3a:	2001      	movne	r0, #1
 8002a3c:	e004      	b.n	8002a48 <HAL_RCC_OscConfig+0x41c>
 8002a3e:	2001      	movs	r0, #1
}
 8002a40:	4770      	bx	lr
        return HAL_ERROR;
 8002a42:	2001      	movs	r0, #1
 8002a44:	e000      	b.n	8002a48 <HAL_RCC_OscConfig+0x41c>
  return HAL_OK;
 8002a46:	2000      	movs	r0, #0
}
 8002a48:	b002      	add	sp, #8
 8002a4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return HAL_ERROR;
 8002a4e:	2001      	movs	r0, #1
 8002a50:	e7fa      	b.n	8002a48 <HAL_RCC_OscConfig+0x41c>
 8002a52:	bf00      	nop
 8002a54:	40021000 	.word	0x40021000
 8002a58:	42420060 	.word	0x42420060

08002a5c <HAL_RCC_GetSysClockFreq>:
{
 8002a5c:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002a5e:	4b17      	ldr	r3, [pc, #92]	; (8002abc <HAL_RCC_GetSysClockFreq+0x60>)
 8002a60:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002a62:	f10d 0c18 	add.w	ip, sp, #24
 8002a66:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	f88d 3004 	strb.w	r3, [sp, #4]
 8002a70:	2302      	movs	r3, #2
 8002a72:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 8002a76:	4b12      	ldr	r3, [pc, #72]	; (8002ac0 <HAL_RCC_GetSysClockFreq+0x64>)
 8002a78:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8002a7a:	f003 020c 	and.w	r2, r3, #12
 8002a7e:	2a08      	cmp	r2, #8
 8002a80:	d119      	bne.n	8002ab6 <HAL_RCC_GetSysClockFreq+0x5a>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002a82:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8002a86:	4462      	add	r2, ip
 8002a88:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002a8c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8002a90:	d104      	bne.n	8002a9c <HAL_RCC_GetSysClockFreq+0x40>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002a92:	480c      	ldr	r0, [pc, #48]	; (8002ac4 <HAL_RCC_GetSysClockFreq+0x68>)
 8002a94:	fb00 f002 	mul.w	r0, r0, r2
}
 8002a98:	b006      	add	sp, #24
 8002a9a:	4770      	bx	lr
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002a9c:	4b08      	ldr	r3, [pc, #32]	; (8002ac0 <HAL_RCC_GetSysClockFreq+0x64>)
 8002a9e:	685b      	ldr	r3, [r3, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002aa0:	4809      	ldr	r0, [pc, #36]	; (8002ac8 <HAL_RCC_GetSysClockFreq+0x6c>)
 8002aa2:	fb00 f002 	mul.w	r0, r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002aa6:	f3c3 4340 	ubfx	r3, r3, #17, #1
 8002aaa:	4463      	add	r3, ip
 8002aac:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002ab0:	fbb0 f0f3 	udiv	r0, r0, r3
 8002ab4:	e7f0      	b.n	8002a98 <HAL_RCC_GetSysClockFreq+0x3c>
      sysclockfreq = HSE_VALUE;
 8002ab6:	4804      	ldr	r0, [pc, #16]	; (8002ac8 <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 8002ab8:	e7ee      	b.n	8002a98 <HAL_RCC_GetSysClockFreq+0x3c>
 8002aba:	bf00      	nop
 8002abc:	080054a0 	.word	0x080054a0
 8002ac0:	40021000 	.word	0x40021000
 8002ac4:	003d0900 	.word	0x003d0900
 8002ac8:	007a1200 	.word	0x007a1200

08002acc <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8002acc:	2800      	cmp	r0, #0
 8002ace:	f000 80a6 	beq.w	8002c1e <HAL_RCC_ClockConfig+0x152>
{
 8002ad2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002ad6:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ad8:	4b53      	ldr	r3, [pc, #332]	; (8002c28 <HAL_RCC_ClockConfig+0x15c>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 0307 	and.w	r3, r3, #7
 8002ae0:	428b      	cmp	r3, r1
 8002ae2:	d20d      	bcs.n	8002b00 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ae4:	4a50      	ldr	r2, [pc, #320]	; (8002c28 <HAL_RCC_ClockConfig+0x15c>)
 8002ae6:	6813      	ldr	r3, [r2, #0]
 8002ae8:	f023 0307 	bic.w	r3, r3, #7
 8002aec:	430b      	orrs	r3, r1
 8002aee:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002af0:	6813      	ldr	r3, [r2, #0]
 8002af2:	f003 0307 	and.w	r3, r3, #7
 8002af6:	428b      	cmp	r3, r1
 8002af8:	d002      	beq.n	8002b00 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8002afa:	2001      	movs	r0, #1
}
 8002afc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b00:	6823      	ldr	r3, [r4, #0]
 8002b02:	f013 0f02 	tst.w	r3, #2
 8002b06:	d017      	beq.n	8002b38 <HAL_RCC_ClockConfig+0x6c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b08:	f013 0f04 	tst.w	r3, #4
 8002b0c:	d004      	beq.n	8002b18 <HAL_RCC_ClockConfig+0x4c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b0e:	4a47      	ldr	r2, [pc, #284]	; (8002c2c <HAL_RCC_ClockConfig+0x160>)
 8002b10:	6853      	ldr	r3, [r2, #4]
 8002b12:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002b16:	6053      	str	r3, [r2, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b18:	6823      	ldr	r3, [r4, #0]
 8002b1a:	f013 0f08 	tst.w	r3, #8
 8002b1e:	d004      	beq.n	8002b2a <HAL_RCC_ClockConfig+0x5e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b20:	4a42      	ldr	r2, [pc, #264]	; (8002c2c <HAL_RCC_ClockConfig+0x160>)
 8002b22:	6853      	ldr	r3, [r2, #4]
 8002b24:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002b28:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b2a:	4a40      	ldr	r2, [pc, #256]	; (8002c2c <HAL_RCC_ClockConfig+0x160>)
 8002b2c:	6853      	ldr	r3, [r2, #4]
 8002b2e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b32:	68a0      	ldr	r0, [r4, #8]
 8002b34:	4303      	orrs	r3, r0
 8002b36:	6053      	str	r3, [r2, #4]
 8002b38:	460d      	mov	r5, r1
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b3a:	6823      	ldr	r3, [r4, #0]
 8002b3c:	f013 0f01 	tst.w	r3, #1
 8002b40:	d032      	beq.n	8002ba8 <HAL_RCC_ClockConfig+0xdc>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b42:	6862      	ldr	r2, [r4, #4]
 8002b44:	2a01      	cmp	r2, #1
 8002b46:	d021      	beq.n	8002b8c <HAL_RCC_ClockConfig+0xc0>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b48:	2a02      	cmp	r2, #2
 8002b4a:	d026      	beq.n	8002b9a <HAL_RCC_ClockConfig+0xce>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b4c:	4b37      	ldr	r3, [pc, #220]	; (8002c2c <HAL_RCC_ClockConfig+0x160>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f013 0f02 	tst.w	r3, #2
 8002b54:	d065      	beq.n	8002c22 <HAL_RCC_ClockConfig+0x156>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b56:	4935      	ldr	r1, [pc, #212]	; (8002c2c <HAL_RCC_ClockConfig+0x160>)
 8002b58:	684b      	ldr	r3, [r1, #4]
 8002b5a:	f023 0303 	bic.w	r3, r3, #3
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8002b62:	f7fe fcad 	bl	80014c0 <HAL_GetTick>
 8002b66:	4680      	mov	r8, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b68:	4e30      	ldr	r6, [pc, #192]	; (8002c2c <HAL_RCC_ClockConfig+0x160>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b6a:	f241 3788 	movw	r7, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b6e:	6873      	ldr	r3, [r6, #4]
 8002b70:	f003 030c 	and.w	r3, r3, #12
 8002b74:	6862      	ldr	r2, [r4, #4]
 8002b76:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002b7a:	d015      	beq.n	8002ba8 <HAL_RCC_ClockConfig+0xdc>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b7c:	f7fe fca0 	bl	80014c0 <HAL_GetTick>
 8002b80:	eba0 0008 	sub.w	r0, r0, r8
 8002b84:	42b8      	cmp	r0, r7
 8002b86:	d9f2      	bls.n	8002b6e <HAL_RCC_ClockConfig+0xa2>
        return HAL_TIMEOUT;
 8002b88:	2003      	movs	r0, #3
 8002b8a:	e7b7      	b.n	8002afc <HAL_RCC_ClockConfig+0x30>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b8c:	4b27      	ldr	r3, [pc, #156]	; (8002c2c <HAL_RCC_ClockConfig+0x160>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002b94:	d1df      	bne.n	8002b56 <HAL_RCC_ClockConfig+0x8a>
        return HAL_ERROR;
 8002b96:	2001      	movs	r0, #1
 8002b98:	e7b0      	b.n	8002afc <HAL_RCC_ClockConfig+0x30>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b9a:	4b24      	ldr	r3, [pc, #144]	; (8002c2c <HAL_RCC_ClockConfig+0x160>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002ba2:	d1d8      	bne.n	8002b56 <HAL_RCC_ClockConfig+0x8a>
        return HAL_ERROR;
 8002ba4:	2001      	movs	r0, #1
 8002ba6:	e7a9      	b.n	8002afc <HAL_RCC_ClockConfig+0x30>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ba8:	4b1f      	ldr	r3, [pc, #124]	; (8002c28 <HAL_RCC_ClockConfig+0x15c>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f003 0307 	and.w	r3, r3, #7
 8002bb0:	42ab      	cmp	r3, r5
 8002bb2:	d90c      	bls.n	8002bce <HAL_RCC_ClockConfig+0x102>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bb4:	4a1c      	ldr	r2, [pc, #112]	; (8002c28 <HAL_RCC_ClockConfig+0x15c>)
 8002bb6:	6813      	ldr	r3, [r2, #0]
 8002bb8:	f023 0307 	bic.w	r3, r3, #7
 8002bbc:	432b      	orrs	r3, r5
 8002bbe:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bc0:	6813      	ldr	r3, [r2, #0]
 8002bc2:	f003 0307 	and.w	r3, r3, #7
 8002bc6:	42ab      	cmp	r3, r5
 8002bc8:	d001      	beq.n	8002bce <HAL_RCC_ClockConfig+0x102>
    return HAL_ERROR;
 8002bca:	2001      	movs	r0, #1
 8002bcc:	e796      	b.n	8002afc <HAL_RCC_ClockConfig+0x30>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bce:	6823      	ldr	r3, [r4, #0]
 8002bd0:	f013 0f04 	tst.w	r3, #4
 8002bd4:	d006      	beq.n	8002be4 <HAL_RCC_ClockConfig+0x118>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bd6:	4a15      	ldr	r2, [pc, #84]	; (8002c2c <HAL_RCC_ClockConfig+0x160>)
 8002bd8:	6853      	ldr	r3, [r2, #4]
 8002bda:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002bde:	68e1      	ldr	r1, [r4, #12]
 8002be0:	430b      	orrs	r3, r1
 8002be2:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002be4:	6823      	ldr	r3, [r4, #0]
 8002be6:	f013 0f08 	tst.w	r3, #8
 8002bea:	d007      	beq.n	8002bfc <HAL_RCC_ClockConfig+0x130>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002bec:	4a0f      	ldr	r2, [pc, #60]	; (8002c2c <HAL_RCC_ClockConfig+0x160>)
 8002bee:	6853      	ldr	r3, [r2, #4]
 8002bf0:	6921      	ldr	r1, [r4, #16]
 8002bf2:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002bf6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002bfa:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002bfc:	f7ff ff2e 	bl	8002a5c <HAL_RCC_GetSysClockFreq>
 8002c00:	4b0a      	ldr	r3, [pc, #40]	; (8002c2c <HAL_RCC_ClockConfig+0x160>)
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002c08:	4a09      	ldr	r2, [pc, #36]	; (8002c30 <HAL_RCC_ClockConfig+0x164>)
 8002c0a:	5cd3      	ldrb	r3, [r2, r3]
 8002c0c:	40d8      	lsrs	r0, r3
 8002c0e:	4b09      	ldr	r3, [pc, #36]	; (8002c34 <HAL_RCC_ClockConfig+0x168>)
 8002c10:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8002c12:	4b09      	ldr	r3, [pc, #36]	; (8002c38 <HAL_RCC_ClockConfig+0x16c>)
 8002c14:	6818      	ldr	r0, [r3, #0]
 8002c16:	f7fe fc0f 	bl	8001438 <HAL_InitTick>
  return HAL_OK;
 8002c1a:	2000      	movs	r0, #0
 8002c1c:	e76e      	b.n	8002afc <HAL_RCC_ClockConfig+0x30>
    return HAL_ERROR;
 8002c1e:	2001      	movs	r0, #1
}
 8002c20:	4770      	bx	lr
        return HAL_ERROR;
 8002c22:	2001      	movs	r0, #1
 8002c24:	e76a      	b.n	8002afc <HAL_RCC_ClockConfig+0x30>
 8002c26:	bf00      	nop
 8002c28:	40022000 	.word	0x40022000
 8002c2c:	40021000 	.word	0x40021000
 8002c30:	080054bc 	.word	0x080054bc
 8002c34:	2000000c 	.word	0x2000000c
 8002c38:	20000014 	.word	0x20000014

08002c3c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002c40:	b082      	sub	sp, #8
 8002c42:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002c44:	6803      	ldr	r3, [r0, #0]
 8002c46:	f013 0f01 	tst.w	r3, #1
 8002c4a:	d034      	beq.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c4c:	4b40      	ldr	r3, [pc, #256]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8002c4e:	69db      	ldr	r3, [r3, #28]
 8002c50:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002c54:	d149      	bne.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0xae>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c56:	4b3e      	ldr	r3, [pc, #248]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8002c58:	69da      	ldr	r2, [r3, #28]
 8002c5a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002c5e:	61da      	str	r2, [r3, #28]
 8002c60:	69db      	ldr	r3, [r3, #28]
 8002c62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c66:	9301      	str	r3, [sp, #4]
 8002c68:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002c6a:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c6c:	4b39      	ldr	r3, [pc, #228]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002c74:	d03b      	beq.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0xb2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002c76:	4b36      	ldr	r3, [pc, #216]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8002c78:	6a1b      	ldr	r3, [r3, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002c7a:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8002c7e:	d011      	beq.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x68>
 8002c80:	6862      	ldr	r2, [r4, #4]
 8002c82:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d00c      	beq.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x68>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c8a:	4a31      	ldr	r2, [pc, #196]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8002c8c:	6a13      	ldr	r3, [r2, #32]
 8002c8e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c92:	4931      	ldr	r1, [pc, #196]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x11c>)
 8002c94:	2601      	movs	r6, #1
 8002c96:	600e      	str	r6, [r1, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002c98:	2600      	movs	r6, #0
 8002c9a:	600e      	str	r6, [r1, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002c9c:	6210      	str	r0, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002c9e:	f013 0f01 	tst.w	r3, #1
 8002ca2:	d138      	bne.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0xda>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ca4:	4a2a      	ldr	r2, [pc, #168]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8002ca6:	6a13      	ldr	r3, [r2, #32]
 8002ca8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cac:	6861      	ldr	r1, [r4, #4]
 8002cae:	430b      	orrs	r3, r1
 8002cb0:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002cb2:	2d00      	cmp	r5, #0
 8002cb4:	d144      	bne.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x104>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002cb6:	6823      	ldr	r3, [r4, #0]
 8002cb8:	f013 0f02 	tst.w	r3, #2
 8002cbc:	d006      	beq.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x90>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002cbe:	4a24      	ldr	r2, [pc, #144]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8002cc0:	6853      	ldr	r3, [r2, #4]
 8002cc2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002cc6:	68a1      	ldr	r1, [r4, #8]
 8002cc8:	430b      	orrs	r3, r1
 8002cca:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002ccc:	6823      	ldr	r3, [r4, #0]
 8002cce:	f013 0f10 	tst.w	r3, #16
 8002cd2:	d03a      	beq.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x10e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002cd4:	4a1e      	ldr	r2, [pc, #120]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8002cd6:	6853      	ldr	r3, [r2, #4]
 8002cd8:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002cdc:	68e1      	ldr	r1, [r4, #12]
 8002cde:	430b      	orrs	r3, r1
 8002ce0:	6053      	str	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002ce2:	2000      	movs	r0, #0
}
 8002ce4:	b002      	add	sp, #8
 8002ce6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    FlagStatus       pwrclkchanged = RESET;
 8002cea:	2500      	movs	r5, #0
 8002cec:	e7be      	b.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x30>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cee:	4a19      	ldr	r2, [pc, #100]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8002cf0:	6813      	ldr	r3, [r2, #0]
 8002cf2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cf6:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8002cf8:	f7fe fbe2 	bl	80014c0 <HAL_GetTick>
 8002cfc:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cfe:	4e15      	ldr	r6, [pc, #84]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8002d00:	6833      	ldr	r3, [r6, #0]
 8002d02:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002d06:	d1b6      	bne.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x3a>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d08:	f7fe fbda 	bl	80014c0 <HAL_GetTick>
 8002d0c:	1bc0      	subs	r0, r0, r7
 8002d0e:	2864      	cmp	r0, #100	; 0x64
 8002d10:	d9f6      	bls.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0xc4>
          return HAL_TIMEOUT;
 8002d12:	2003      	movs	r0, #3
 8002d14:	e7e6      	b.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0xa8>
        tickstart = HAL_GetTick();
 8002d16:	f7fe fbd3 	bl	80014c0 <HAL_GetTick>
 8002d1a:	4680      	mov	r8, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d1c:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8002d20:	f506 3604 	add.w	r6, r6, #135168	; 0x21000
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d24:	f241 3788 	movw	r7, #5000	; 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d28:	6a33      	ldr	r3, [r6, #32]
 8002d2a:	f013 0f02 	tst.w	r3, #2
 8002d2e:	d1b9      	bne.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x68>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d30:	f7fe fbc6 	bl	80014c0 <HAL_GetTick>
 8002d34:	eba0 0008 	sub.w	r0, r0, r8
 8002d38:	42b8      	cmp	r0, r7
 8002d3a:	d9f5      	bls.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0xec>
            return HAL_TIMEOUT;
 8002d3c:	2003      	movs	r0, #3
 8002d3e:	e7d1      	b.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0xa8>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d40:	69d3      	ldr	r3, [r2, #28]
 8002d42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d46:	61d3      	str	r3, [r2, #28]
 8002d48:	e7b5      	b.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
  return HAL_OK;
 8002d4a:	2000      	movs	r0, #0
 8002d4c:	e7ca      	b.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0xa8>
 8002d4e:	bf00      	nop
 8002d50:	40021000 	.word	0x40021000
 8002d54:	40007000 	.word	0x40007000
 8002d58:	42420440 	.word	0x42420440

08002d5c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002d5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002d60:	b083      	sub	sp, #12
 8002d62:	4680      	mov	r8, r0
 8002d64:	460e      	mov	r6, r1
 8002d66:	4615      	mov	r5, r2
 8002d68:	461c      	mov	r4, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002d6a:	f7fe fba9 	bl	80014c0 <HAL_GetTick>
 8002d6e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8002d70:	4427      	add	r7, r4
 8002d72:	1a3f      	subs	r7, r7, r0
  tmp_tickstart = HAL_GetTick();
 8002d74:	f7fe fba4 	bl	80014c0 <HAL_GetTick>
 8002d78:	4681      	mov	r9, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002d7a:	4b2d      	ldr	r3, [pc, #180]	; (8002e30 <SPI_WaitFlagStateUntilTimeout+0xd4>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8002d82:	fb07 f303 	mul.w	r3, r7, r3
 8002d86:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002d88:	f8d8 2000 	ldr.w	r2, [r8]
 8002d8c:	6893      	ldr	r3, [r2, #8]
 8002d8e:	ea36 0303 	bics.w	r3, r6, r3
 8002d92:	bf0c      	ite	eq
 8002d94:	2301      	moveq	r3, #1
 8002d96:	2300      	movne	r3, #0
 8002d98:	42ab      	cmp	r3, r5
 8002d9a:	d045      	beq.n	8002e28 <SPI_WaitFlagStateUntilTimeout+0xcc>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002d9c:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8002da0:	d0f4      	beq.n	8002d8c <SPI_WaitFlagStateUntilTimeout+0x30>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002da2:	f7fe fb8d 	bl	80014c0 <HAL_GetTick>
 8002da6:	eba0 0009 	sub.w	r0, r0, r9
 8002daa:	42b8      	cmp	r0, r7
 8002dac:	d208      	bcs.n	8002dc0 <SPI_WaitFlagStateUntilTimeout+0x64>
 8002dae:	b13f      	cbz	r7, 8002dc0 <SPI_WaitFlagStateUntilTimeout+0x64>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002db0:	9b01      	ldr	r3, [sp, #4]
      {
        tmp_timeout = 0U;
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	bf08      	it	eq
 8002db6:	2700      	moveq	r7, #0
      }
      count--;
 8002db8:	9b01      	ldr	r3, [sp, #4]
 8002dba:	3b01      	subs	r3, #1
 8002dbc:	9301      	str	r3, [sp, #4]
 8002dbe:	e7e3      	b.n	8002d88 <SPI_WaitFlagStateUntilTimeout+0x2c>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002dc0:	f8d8 2000 	ldr.w	r2, [r8]
 8002dc4:	6853      	ldr	r3, [r2, #4]
 8002dc6:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8002dca:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002dcc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8002dd0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002dd4:	d00c      	beq.n	8002df0 <SPI_WaitFlagStateUntilTimeout+0x94>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002dd6:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
 8002dda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002dde:	d016      	beq.n	8002e0e <SPI_WaitFlagStateUntilTimeout+0xb2>
        hspi->State = HAL_SPI_STATE_READY;
 8002de0:	2301      	movs	r3, #1
 8002de2:	f888 3051 	strb.w	r3, [r8, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8002de6:	2300      	movs	r3, #0
 8002de8:	f888 3050 	strb.w	r3, [r8, #80]	; 0x50
        return HAL_TIMEOUT;
 8002dec:	2003      	movs	r0, #3
 8002dee:	e01c      	b.n	8002e2a <SPI_WaitFlagStateUntilTimeout+0xce>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002df0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8002df4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002df8:	d002      	beq.n	8002e00 <SPI_WaitFlagStateUntilTimeout+0xa4>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002dfa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dfe:	d1ea      	bne.n	8002dd6 <SPI_WaitFlagStateUntilTimeout+0x7a>
          __HAL_SPI_DISABLE(hspi);
 8002e00:	f8d8 2000 	ldr.w	r2, [r8]
 8002e04:	6813      	ldr	r3, [r2, #0]
 8002e06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e0a:	6013      	str	r3, [r2, #0]
 8002e0c:	e7e3      	b.n	8002dd6 <SPI_WaitFlagStateUntilTimeout+0x7a>
          SPI_RESET_CRC(hspi);
 8002e0e:	f8d8 2000 	ldr.w	r2, [r8]
 8002e12:	6813      	ldr	r3, [r2, #0]
 8002e14:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002e18:	6013      	str	r3, [r2, #0]
 8002e1a:	f8d8 2000 	ldr.w	r2, [r8]
 8002e1e:	6813      	ldr	r3, [r2, #0]
 8002e20:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002e24:	6013      	str	r3, [r2, #0]
 8002e26:	e7db      	b.n	8002de0 <SPI_WaitFlagStateUntilTimeout+0x84>
    }
  }

  return HAL_OK;
 8002e28:	2000      	movs	r0, #0
}
 8002e2a:	b003      	add	sp, #12
 8002e2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002e30:	2000000c 	.word	0x2000000c

08002e34 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002e34:	b510      	push	{r4, lr}
 8002e36:	b082      	sub	sp, #8
 8002e38:	4604      	mov	r4, r0
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002e3a:	9200      	str	r2, [sp, #0]
 8002e3c:	460b      	mov	r3, r1
 8002e3e:	2200      	movs	r2, #0
 8002e40:	2180      	movs	r1, #128	; 0x80
 8002e42:	f7ff ff8b 	bl	8002d5c <SPI_WaitFlagStateUntilTimeout>
 8002e46:	4603      	mov	r3, r0
 8002e48:	b910      	cbnz	r0, 8002e50 <SPI_EndRxTxTransaction+0x1c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }
  return HAL_OK;
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	b002      	add	sp, #8
 8002e4e:	bd10      	pop	{r4, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e50:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002e52:	f043 0320 	orr.w	r3, r3, #32
 8002e56:	6563      	str	r3, [r4, #84]	; 0x54
    return HAL_TIMEOUT;
 8002e58:	2303      	movs	r3, #3
 8002e5a:	e7f6      	b.n	8002e4a <SPI_EndRxTxTransaction+0x16>

08002e5c <HAL_SPI_Init>:
  if (hspi == NULL)
 8002e5c:	2800      	cmp	r0, #0
 8002e5e:	d056      	beq.n	8002f0e <HAL_SPI_Init+0xb2>
{
 8002e60:	b510      	push	{r4, lr}
 8002e62:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002e64:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002e66:	b933      	cbnz	r3, 8002e76 <HAL_SPI_Init+0x1a>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002e68:	6843      	ldr	r3, [r0, #4]
 8002e6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e6e:	d005      	beq.n	8002e7c <HAL_SPI_Init+0x20>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002e70:	2300      	movs	r3, #0
 8002e72:	61c3      	str	r3, [r0, #28]
 8002e74:	e002      	b.n	8002e7c <HAL_SPI_Init+0x20>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002e76:	2300      	movs	r3, #0
 8002e78:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002e7a:	6143      	str	r3, [r0, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8002e80:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d03c      	beq.n	8002f02 <HAL_SPI_Init+0xa6>
  hspi->State = HAL_SPI_STATE_BUSY;
 8002e88:	2302      	movs	r3, #2
 8002e8a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8002e8e:	6822      	ldr	r2, [r4, #0]
 8002e90:	6813      	ldr	r3, [r2, #0]
 8002e92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e96:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002e98:	6822      	ldr	r2, [r4, #0]
 8002e9a:	6863      	ldr	r3, [r4, #4]
 8002e9c:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8002ea0:	68a1      	ldr	r1, [r4, #8]
 8002ea2:	f401 4104 	and.w	r1, r1, #33792	; 0x8400
 8002ea6:	430b      	orrs	r3, r1
 8002ea8:	68e1      	ldr	r1, [r4, #12]
 8002eaa:	f401 6100 	and.w	r1, r1, #2048	; 0x800
 8002eae:	430b      	orrs	r3, r1
 8002eb0:	6921      	ldr	r1, [r4, #16]
 8002eb2:	f001 0102 	and.w	r1, r1, #2
 8002eb6:	430b      	orrs	r3, r1
 8002eb8:	6961      	ldr	r1, [r4, #20]
 8002eba:	f001 0101 	and.w	r1, r1, #1
 8002ebe:	430b      	orrs	r3, r1
 8002ec0:	69a1      	ldr	r1, [r4, #24]
 8002ec2:	f401 7100 	and.w	r1, r1, #512	; 0x200
 8002ec6:	430b      	orrs	r3, r1
 8002ec8:	69e1      	ldr	r1, [r4, #28]
 8002eca:	f001 0138 	and.w	r1, r1, #56	; 0x38
 8002ece:	430b      	orrs	r3, r1
 8002ed0:	6a21      	ldr	r1, [r4, #32]
 8002ed2:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8002ed6:	430b      	orrs	r3, r1
 8002ed8:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002eda:	f401 5100 	and.w	r1, r1, #8192	; 0x2000
 8002ede:	430b      	orrs	r3, r1
 8002ee0:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002ee2:	6822      	ldr	r2, [r4, #0]
 8002ee4:	8b63      	ldrh	r3, [r4, #26]
 8002ee6:	f003 0304 	and.w	r3, r3, #4
 8002eea:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002eec:	6822      	ldr	r2, [r4, #0]
 8002eee:	69d3      	ldr	r3, [r2, #28]
 8002ef0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002ef4:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002ef6:	2000      	movs	r0, #0
 8002ef8:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002efa:	2301      	movs	r3, #1
 8002efc:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 8002f00:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8002f02:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8002f06:	4620      	mov	r0, r4
 8002f08:	f7fd ffbe 	bl	8000e88 <HAL_SPI_MspInit>
 8002f0c:	e7bc      	b.n	8002e88 <HAL_SPI_Init+0x2c>
    return HAL_ERROR;
 8002f0e:	2001      	movs	r0, #1
}
 8002f10:	4770      	bx	lr

08002f12 <HAL_SPI_Transmit>:
{
 8002f12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f16:	b082      	sub	sp, #8
  __HAL_LOCK(hspi);
 8002f18:	f890 4050 	ldrb.w	r4, [r0, #80]	; 0x50
 8002f1c:	2c01      	cmp	r4, #1
 8002f1e:	f000 80c7 	beq.w	80030b0 <HAL_SPI_Transmit+0x19e>
 8002f22:	461d      	mov	r5, r3
 8002f24:	4617      	mov	r7, r2
 8002f26:	4688      	mov	r8, r1
 8002f28:	4604      	mov	r4, r0
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8002f30:	f7fe fac6 	bl	80014c0 <HAL_GetTick>
 8002f34:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8002f36:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8002f3a:	b2db      	uxtb	r3, r3
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	d009      	beq.n	8002f54 <HAL_SPI_Transmit+0x42>
    errorcode = HAL_BUSY;
 8002f40:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8002f42:	2301      	movs	r3, #1
 8002f44:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002f48:	2300      	movs	r3, #0
 8002f4a:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8002f4e:	b002      	add	sp, #8
 8002f50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((pData == NULL) || (Size == 0U))
 8002f54:	f1b8 0f00 	cmp.w	r8, #0
 8002f58:	f000 80a2 	beq.w	80030a0 <HAL_SPI_Transmit+0x18e>
 8002f5c:	2f00      	cmp	r7, #0
 8002f5e:	f000 80a1 	beq.w	80030a4 <HAL_SPI_Transmit+0x192>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002f62:	2303      	movs	r3, #3
 8002f64:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002f6c:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002f70:	86a7      	strh	r7, [r4, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002f72:	86e7      	strh	r7, [r4, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002f74:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002f76:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002f78:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002f7a:	6463      	str	r3, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002f7c:	6423      	str	r3, [r4, #64]	; 0x40
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f7e:	68a3      	ldr	r3, [r4, #8]
 8002f80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f84:	d01c      	beq.n	8002fc0 <HAL_SPI_Transmit+0xae>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f86:	6823      	ldr	r3, [r4, #0]
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002f8e:	d103      	bne.n	8002f98 <HAL_SPI_Transmit+0x86>
    __HAL_SPI_ENABLE(hspi);
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f96:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002f98:	68e3      	ldr	r3, [r4, #12]
 8002f9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f9e:	d01a      	beq.n	8002fd6 <HAL_SPI_Transmit+0xc4>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002fa0:	6863      	ldr	r3, [r4, #4]
 8002fa2:	b10b      	cbz	r3, 8002fa8 <HAL_SPI_Transmit+0x96>
 8002fa4:	2f01      	cmp	r7, #1
 8002fa6:	d14e      	bne.n	8003046 <HAL_SPI_Transmit+0x134>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002fa8:	6823      	ldr	r3, [r4, #0]
 8002faa:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002fac:	7812      	ldrb	r2, [r2, #0]
 8002fae:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002fb0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002fb2:	3301      	adds	r3, #1
 8002fb4:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8002fb6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002fb8:	3b01      	subs	r3, #1
 8002fba:	b29b      	uxth	r3, r3
 8002fbc:	86e3      	strh	r3, [r4, #54]	; 0x36
 8002fbe:	e042      	b.n	8003046 <HAL_SPI_Transmit+0x134>
    __HAL_SPI_DISABLE(hspi);
 8002fc0:	6822      	ldr	r2, [r4, #0]
 8002fc2:	6813      	ldr	r3, [r2, #0]
 8002fc4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002fc8:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 8002fca:	6822      	ldr	r2, [r4, #0]
 8002fcc:	6813      	ldr	r3, [r2, #0]
 8002fce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fd2:	6013      	str	r3, [r2, #0]
 8002fd4:	e7d7      	b.n	8002f86 <HAL_SPI_Transmit+0x74>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002fd6:	6863      	ldr	r3, [r4, #4]
 8002fd8:	b10b      	cbz	r3, 8002fde <HAL_SPI_Transmit+0xcc>
 8002fda:	2f01      	cmp	r7, #1
 8002fdc:	d113      	bne.n	8003006 <HAL_SPI_Transmit+0xf4>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002fde:	6823      	ldr	r3, [r4, #0]
 8002fe0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002fe2:	8812      	ldrh	r2, [r2, #0]
 8002fe4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002fe6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002fe8:	3302      	adds	r3, #2
 8002fea:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8002fec:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002fee:	3b01      	subs	r3, #1
 8002ff0:	b29b      	uxth	r3, r3
 8002ff2:	86e3      	strh	r3, [r4, #54]	; 0x36
 8002ff4:	e007      	b.n	8003006 <HAL_SPI_Transmit+0xf4>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002ff6:	f7fe fa63 	bl	80014c0 <HAL_GetTick>
 8002ffa:	1b80      	subs	r0, r0, r6
 8002ffc:	42a8      	cmp	r0, r5
 8002ffe:	d316      	bcc.n	800302e <HAL_SPI_Transmit+0x11c>
 8003000:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8003004:	d150      	bne.n	80030a8 <HAL_SPI_Transmit+0x196>
    while (hspi->TxXferCount > 0U)
 8003006:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003008:	b29b      	uxth	r3, r3
 800300a:	2b00      	cmp	r3, #0
 800300c:	d032      	beq.n	8003074 <HAL_SPI_Transmit+0x162>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800300e:	6823      	ldr	r3, [r4, #0]
 8003010:	689a      	ldr	r2, [r3, #8]
 8003012:	f012 0f02 	tst.w	r2, #2
 8003016:	d0ee      	beq.n	8002ff6 <HAL_SPI_Transmit+0xe4>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003018:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800301a:	8812      	ldrh	r2, [r2, #0]
 800301c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800301e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003020:	3302      	adds	r3, #2
 8003022:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8003024:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003026:	3b01      	subs	r3, #1
 8003028:	b29b      	uxth	r3, r3
 800302a:	86e3      	strh	r3, [r4, #54]	; 0x36
 800302c:	e7eb      	b.n	8003006 <HAL_SPI_Transmit+0xf4>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800302e:	2d00      	cmp	r5, #0
 8003030:	d1e9      	bne.n	8003006 <HAL_SPI_Transmit+0xf4>
          errorcode = HAL_TIMEOUT;
 8003032:	2003      	movs	r0, #3
 8003034:	e785      	b.n	8002f42 <HAL_SPI_Transmit+0x30>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003036:	f7fe fa43 	bl	80014c0 <HAL_GetTick>
 800303a:	1b80      	subs	r0, r0, r6
 800303c:	42a8      	cmp	r0, r5
 800303e:	d315      	bcc.n	800306c <HAL_SPI_Transmit+0x15a>
 8003040:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8003044:	d132      	bne.n	80030ac <HAL_SPI_Transmit+0x19a>
    while (hspi->TxXferCount > 0U)
 8003046:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003048:	b29b      	uxth	r3, r3
 800304a:	b19b      	cbz	r3, 8003074 <HAL_SPI_Transmit+0x162>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800304c:	6823      	ldr	r3, [r4, #0]
 800304e:	689a      	ldr	r2, [r3, #8]
 8003050:	f012 0f02 	tst.w	r2, #2
 8003054:	d0ef      	beq.n	8003036 <HAL_SPI_Transmit+0x124>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003056:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003058:	7812      	ldrb	r2, [r2, #0]
 800305a:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800305c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800305e:	3301      	adds	r3, #1
 8003060:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8003062:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003064:	3b01      	subs	r3, #1
 8003066:	b29b      	uxth	r3, r3
 8003068:	86e3      	strh	r3, [r4, #54]	; 0x36
 800306a:	e7ec      	b.n	8003046 <HAL_SPI_Transmit+0x134>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800306c:	2d00      	cmp	r5, #0
 800306e:	d1ea      	bne.n	8003046 <HAL_SPI_Transmit+0x134>
          errorcode = HAL_TIMEOUT;
 8003070:	2003      	movs	r0, #3
 8003072:	e766      	b.n	8002f42 <HAL_SPI_Transmit+0x30>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003074:	4632      	mov	r2, r6
 8003076:	4629      	mov	r1, r5
 8003078:	4620      	mov	r0, r4
 800307a:	f7ff fedb 	bl	8002e34 <SPI_EndRxTxTransaction>
 800307e:	b108      	cbz	r0, 8003084 <HAL_SPI_Transmit+0x172>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003080:	2320      	movs	r3, #32
 8003082:	6563      	str	r3, [r4, #84]	; 0x54
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003084:	68a3      	ldr	r3, [r4, #8]
 8003086:	b933      	cbnz	r3, 8003096 <HAL_SPI_Transmit+0x184>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003088:	9301      	str	r3, [sp, #4]
 800308a:	6823      	ldr	r3, [r4, #0]
 800308c:	68da      	ldr	r2, [r3, #12]
 800308e:	9201      	str	r2, [sp, #4]
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	9301      	str	r3, [sp, #4]
 8003094:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003096:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 8003098:	3000      	adds	r0, #0
 800309a:	bf18      	it	ne
 800309c:	2001      	movne	r0, #1
error:
 800309e:	e750      	b.n	8002f42 <HAL_SPI_Transmit+0x30>
    errorcode = HAL_ERROR;
 80030a0:	2001      	movs	r0, #1
 80030a2:	e74e      	b.n	8002f42 <HAL_SPI_Transmit+0x30>
 80030a4:	2001      	movs	r0, #1
 80030a6:	e74c      	b.n	8002f42 <HAL_SPI_Transmit+0x30>
          errorcode = HAL_TIMEOUT;
 80030a8:	2003      	movs	r0, #3
 80030aa:	e74a      	b.n	8002f42 <HAL_SPI_Transmit+0x30>
          errorcode = HAL_TIMEOUT;
 80030ac:	2003      	movs	r0, #3
 80030ae:	e748      	b.n	8002f42 <HAL_SPI_Transmit+0x30>
  __HAL_LOCK(hspi);
 80030b0:	2002      	movs	r0, #2
 80030b2:	e74c      	b.n	8002f4e <HAL_SPI_Transmit+0x3c>

080030b4 <HAL_SPI_TransmitReceive>:
{
 80030b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80030b8:	b083      	sub	sp, #12
 80030ba:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 80030be:	f890 4050 	ldrb.w	r4, [r0, #80]	; 0x50
 80030c2:	2c01      	cmp	r4, #1
 80030c4:	f000 810f 	beq.w	80032e6 <HAL_SPI_TransmitReceive+0x232>
 80030c8:	461d      	mov	r5, r3
 80030ca:	4617      	mov	r7, r2
 80030cc:	460e      	mov	r6, r1
 80030ce:	4604      	mov	r4, r0
 80030d0:	2301      	movs	r3, #1
 80030d2:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 80030d6:	f7fe f9f3 	bl	80014c0 <HAL_GetTick>
 80030da:	4681      	mov	r9, r0
  tmp_state           = hspi->State;
 80030dc:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 80030e0:	b2c0      	uxtb	r0, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80030e2:	2801      	cmp	r0, #1
 80030e4:	d016      	beq.n	8003114 <HAL_SPI_TransmitReceive+0x60>
 80030e6:	6863      	ldr	r3, [r4, #4]
 80030e8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80030ec:	d00a      	beq.n	8003104 <HAL_SPI_TransmitReceive+0x50>
    errorcode = HAL_BUSY;
 80030ee:	2302      	movs	r3, #2
  hspi->State = HAL_SPI_STATE_READY;
 80030f0:	2201      	movs	r2, #1
 80030f2:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80030f6:	2200      	movs	r2, #0
 80030f8:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	b003      	add	sp, #12
 8003100:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003104:	68a3      	ldr	r3, [r4, #8]
 8003106:	2b00      	cmp	r3, #0
 8003108:	f040 80e1 	bne.w	80032ce <HAL_SPI_TransmitReceive+0x21a>
 800310c:	2804      	cmp	r0, #4
 800310e:	d001      	beq.n	8003114 <HAL_SPI_TransmitReceive+0x60>
    errorcode = HAL_BUSY;
 8003110:	2302      	movs	r3, #2
 8003112:	e7ed      	b.n	80030f0 <HAL_SPI_TransmitReceive+0x3c>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003114:	2e00      	cmp	r6, #0
 8003116:	f000 80dc 	beq.w	80032d2 <HAL_SPI_TransmitReceive+0x21e>
 800311a:	2f00      	cmp	r7, #0
 800311c:	f000 80db 	beq.w	80032d6 <HAL_SPI_TransmitReceive+0x222>
 8003120:	2d00      	cmp	r5, #0
 8003122:	f000 80da 	beq.w	80032da <HAL_SPI_TransmitReceive+0x226>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003126:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 800312a:	b2db      	uxtb	r3, r3
 800312c:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800312e:	bf1c      	itt	ne
 8003130:	2305      	movne	r3, #5
 8003132:	f884 3051 	strbne.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003136:	2300      	movs	r3, #0
 8003138:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800313a:	63a7      	str	r7, [r4, #56]	; 0x38
  hspi->RxXferCount = Size;
 800313c:	87e5      	strh	r5, [r4, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800313e:	87a5      	strh	r5, [r4, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003140:	6326      	str	r6, [r4, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003142:	86e5      	strh	r5, [r4, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003144:	86a5      	strh	r5, [r4, #52]	; 0x34
  hspi->RxISR       = NULL;
 8003146:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003148:	6463      	str	r3, [r4, #68]	; 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800314a:	6823      	ldr	r3, [r4, #0]
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003152:	d103      	bne.n	800315c <HAL_SPI_TransmitReceive+0xa8>
    __HAL_SPI_ENABLE(hspi);
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800315a:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800315c:	68e3      	ldr	r3, [r4, #12]
 800315e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003162:	d012      	beq.n	800318a <HAL_SPI_TransmitReceive+0xd6>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003164:	6863      	ldr	r3, [r4, #4]
 8003166:	b10b      	cbz	r3, 800316c <HAL_SPI_TransmitReceive+0xb8>
 8003168:	2d01      	cmp	r5, #1
 800316a:	d10a      	bne.n	8003182 <HAL_SPI_TransmitReceive+0xce>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800316c:	6823      	ldr	r3, [r4, #0]
 800316e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003170:	7812      	ldrb	r2, [r2, #0]
 8003172:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003174:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003176:	3301      	adds	r3, #1
 8003178:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 800317a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800317c:	3b01      	subs	r3, #1
 800317e:	b29b      	uxth	r3, r3
 8003180:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8003182:	2501      	movs	r5, #1
        txallowed = 0U;
 8003184:	2700      	movs	r7, #0
        txallowed = 1U;
 8003186:	462e      	mov	r6, r5
 8003188:	e068      	b.n	800325c <HAL_SPI_TransmitReceive+0x1a8>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800318a:	6863      	ldr	r3, [r4, #4]
 800318c:	b10b      	cbz	r3, 8003192 <HAL_SPI_TransmitReceive+0xde>
 800318e:	2d01      	cmp	r5, #1
 8003190:	d10a      	bne.n	80031a8 <HAL_SPI_TransmitReceive+0xf4>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003192:	6823      	ldr	r3, [r4, #0]
 8003194:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003196:	8812      	ldrh	r2, [r2, #0]
 8003198:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800319a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800319c:	3302      	adds	r3, #2
 800319e:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80031a0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80031a2:	3b01      	subs	r3, #1
 80031a4:	b29b      	uxth	r3, r3
 80031a6:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 80031a8:	2501      	movs	r5, #1
        txallowed = 0U;
 80031aa:	2700      	movs	r7, #0
        txallowed = 1U;
 80031ac:	462e      	mov	r6, r5
 80031ae:	e01b      	b.n	80031e8 <HAL_SPI_TransmitReceive+0x134>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80031b0:	6823      	ldr	r3, [r4, #0]
 80031b2:	689a      	ldr	r2, [r3, #8]
 80031b4:	f012 0f01 	tst.w	r2, #1
 80031b8:	d00d      	beq.n	80031d6 <HAL_SPI_TransmitReceive+0x122>
 80031ba:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80031bc:	b292      	uxth	r2, r2
 80031be:	b152      	cbz	r2, 80031d6 <HAL_SPI_TransmitReceive+0x122>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80031c0:	68da      	ldr	r2, [r3, #12]
 80031c2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80031c4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80031c6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80031c8:	3302      	adds	r3, #2
 80031ca:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80031cc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80031ce:	3b01      	subs	r3, #1
 80031d0:	b29b      	uxth	r3, r3
 80031d2:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 80031d4:	4635      	mov	r5, r6
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80031d6:	f7fe f973 	bl	80014c0 <HAL_GetTick>
 80031da:	eba0 0009 	sub.w	r0, r0, r9
 80031de:	4540      	cmp	r0, r8
 80031e0:	d302      	bcc.n	80031e8 <HAL_SPI_TransmitReceive+0x134>
 80031e2:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 80031e6:	d17a      	bne.n	80032de <HAL_SPI_TransmitReceive+0x22a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80031e8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80031ea:	b29b      	uxth	r3, r3
 80031ec:	b91b      	cbnz	r3, 80031f6 <HAL_SPI_TransmitReceive+0x142>
 80031ee:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80031f0:	b29b      	uxth	r3, r3
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d054      	beq.n	80032a0 <HAL_SPI_TransmitReceive+0x1ec>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80031f6:	6823      	ldr	r3, [r4, #0]
 80031f8:	689a      	ldr	r2, [r3, #8]
 80031fa:	f012 0f02 	tst.w	r2, #2
 80031fe:	d0d7      	beq.n	80031b0 <HAL_SPI_TransmitReceive+0xfc>
 8003200:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8003202:	b292      	uxth	r2, r2
 8003204:	2a00      	cmp	r2, #0
 8003206:	d0d3      	beq.n	80031b0 <HAL_SPI_TransmitReceive+0xfc>
 8003208:	2d00      	cmp	r5, #0
 800320a:	d0d1      	beq.n	80031b0 <HAL_SPI_TransmitReceive+0xfc>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800320c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800320e:	8812      	ldrh	r2, [r2, #0]
 8003210:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003212:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003214:	3302      	adds	r3, #2
 8003216:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8003218:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800321a:	3b01      	subs	r3, #1
 800321c:	b29b      	uxth	r3, r3
 800321e:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8003220:	463d      	mov	r5, r7
 8003222:	e7c5      	b.n	80031b0 <HAL_SPI_TransmitReceive+0xfc>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003224:	6823      	ldr	r3, [r4, #0]
 8003226:	689a      	ldr	r2, [r3, #8]
 8003228:	f012 0f01 	tst.w	r2, #1
 800322c:	d00d      	beq.n	800324a <HAL_SPI_TransmitReceive+0x196>
 800322e:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8003230:	b292      	uxth	r2, r2
 8003232:	b152      	cbz	r2, 800324a <HAL_SPI_TransmitReceive+0x196>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003234:	68da      	ldr	r2, [r3, #12]
 8003236:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003238:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800323a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800323c:	3301      	adds	r3, #1
 800323e:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8003240:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003242:	3b01      	subs	r3, #1
 8003244:	b29b      	uxth	r3, r3
 8003246:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8003248:	4635      	mov	r5, r6
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800324a:	f7fe f939 	bl	80014c0 <HAL_GetTick>
 800324e:	eba0 0009 	sub.w	r0, r0, r9
 8003252:	4540      	cmp	r0, r8
 8003254:	d31f      	bcc.n	8003296 <HAL_SPI_TransmitReceive+0x1e2>
 8003256:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 800325a:	d142      	bne.n	80032e2 <HAL_SPI_TransmitReceive+0x22e>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800325c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800325e:	b29b      	uxth	r3, r3
 8003260:	b913      	cbnz	r3, 8003268 <HAL_SPI_TransmitReceive+0x1b4>
 8003262:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003264:	b29b      	uxth	r3, r3
 8003266:	b1db      	cbz	r3, 80032a0 <HAL_SPI_TransmitReceive+0x1ec>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003268:	6823      	ldr	r3, [r4, #0]
 800326a:	689a      	ldr	r2, [r3, #8]
 800326c:	f012 0f02 	tst.w	r2, #2
 8003270:	d0d8      	beq.n	8003224 <HAL_SPI_TransmitReceive+0x170>
 8003272:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8003274:	b292      	uxth	r2, r2
 8003276:	2a00      	cmp	r2, #0
 8003278:	d0d4      	beq.n	8003224 <HAL_SPI_TransmitReceive+0x170>
 800327a:	2d01      	cmp	r5, #1
 800327c:	d1d2      	bne.n	8003224 <HAL_SPI_TransmitReceive+0x170>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800327e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003280:	7812      	ldrb	r2, [r2, #0]
 8003282:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 8003284:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003286:	3301      	adds	r3, #1
 8003288:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800328a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800328c:	3b01      	subs	r3, #1
 800328e:	b29b      	uxth	r3, r3
 8003290:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8003292:	463d      	mov	r5, r7
 8003294:	e7c6      	b.n	8003224 <HAL_SPI_TransmitReceive+0x170>
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003296:	f1b8 0f00 	cmp.w	r8, #0
 800329a:	d1df      	bne.n	800325c <HAL_SPI_TransmitReceive+0x1a8>
        errorcode = HAL_TIMEOUT;
 800329c:	2303      	movs	r3, #3
 800329e:	e727      	b.n	80030f0 <HAL_SPI_TransmitReceive+0x3c>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80032a0:	464a      	mov	r2, r9
 80032a2:	4641      	mov	r1, r8
 80032a4:	4620      	mov	r0, r4
 80032a6:	f7ff fdc5 	bl	8002e34 <SPI_EndRxTxTransaction>
 80032aa:	4603      	mov	r3, r0
 80032ac:	b118      	cbz	r0, 80032b6 <HAL_SPI_TransmitReceive+0x202>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80032ae:	2320      	movs	r3, #32
 80032b0:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
    goto error;
 80032b4:	e71c      	b.n	80030f0 <HAL_SPI_TransmitReceive+0x3c>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80032b6:	68a2      	ldr	r2, [r4, #8]
 80032b8:	2a00      	cmp	r2, #0
 80032ba:	f47f af19 	bne.w	80030f0 <HAL_SPI_TransmitReceive+0x3c>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80032be:	9201      	str	r2, [sp, #4]
 80032c0:	6822      	ldr	r2, [r4, #0]
 80032c2:	68d1      	ldr	r1, [r2, #12]
 80032c4:	9101      	str	r1, [sp, #4]
 80032c6:	6892      	ldr	r2, [r2, #8]
 80032c8:	9201      	str	r2, [sp, #4]
 80032ca:	9a01      	ldr	r2, [sp, #4]
 80032cc:	e710      	b.n	80030f0 <HAL_SPI_TransmitReceive+0x3c>
    errorcode = HAL_BUSY;
 80032ce:	2302      	movs	r3, #2
 80032d0:	e70e      	b.n	80030f0 <HAL_SPI_TransmitReceive+0x3c>
    errorcode = HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e70c      	b.n	80030f0 <HAL_SPI_TransmitReceive+0x3c>
 80032d6:	2301      	movs	r3, #1
 80032d8:	e70a      	b.n	80030f0 <HAL_SPI_TransmitReceive+0x3c>
 80032da:	2301      	movs	r3, #1
 80032dc:	e708      	b.n	80030f0 <HAL_SPI_TransmitReceive+0x3c>
        errorcode = HAL_TIMEOUT;
 80032de:	2303      	movs	r3, #3
 80032e0:	e706      	b.n	80030f0 <HAL_SPI_TransmitReceive+0x3c>
        errorcode = HAL_TIMEOUT;
 80032e2:	2303      	movs	r3, #3
 80032e4:	e704      	b.n	80030f0 <HAL_SPI_TransmitReceive+0x3c>
  __HAL_LOCK(hspi);
 80032e6:	2302      	movs	r3, #2
 80032e8:	e708      	b.n	80030fc <HAL_SPI_TransmitReceive+0x48>

080032ea <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80032ea:	b084      	sub	sp, #16
 80032ec:	a801      	add	r0, sp, #4
 80032ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 80032f2:	2000      	movs	r0, #0
 80032f4:	b004      	add	sp, #16
 80032f6:	4770      	bx	lr

080032f8 <USB_EnableGlobalInt>:
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80032f8:	2300      	movs	r3, #0
 80032fa:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80032fe:	f44f 423f 	mov.w	r2, #48896	; 0xbf00
 8003302:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40

  return HAL_OK;
}
 8003306:	4618      	mov	r0, r3
 8003308:	4770      	bx	lr

0800330a <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800330a:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 800330e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003312:	045b      	lsls	r3, r3, #17
 8003314:	0c5b      	lsrs	r3, r3, #17
 8003316:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 800331a:	2000      	movs	r0, #0
 800331c:	4770      	bx	lr

0800331e <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 800331e:	2000      	movs	r0, #0
 8003320:	4770      	bx	lr

08003322 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003322:	b084      	sub	sp, #16
 8003324:	b410      	push	{r4}
 8003326:	ac02      	add	r4, sp, #8
 8003328:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800332c:	2301      	movs	r3, #1
 800332e:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003332:	2300      	movs	r3, #0
 8003334:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003338:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800333c:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50

  return HAL_OK;
}
 8003340:	4618      	mov	r0, r3
 8003342:	bc10      	pop	{r4}
 8003344:	b004      	add	sp, #16
 8003346:	4770      	bx	lr

08003348 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003348:	b470      	push	{r4, r5, r6}
 800334a:	4603      	mov	r3, r0
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800334c:	780d      	ldrb	r5, [r1, #0]
 800334e:	f830 2025 	ldrh.w	r2, [r0, r5, lsl #2]
 8003352:	b292      	uxth	r2, r2
 8003354:	f422 42ec 	bic.w	r2, r2, #30208	; 0x7600
 8003358:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800335c:	b292      	uxth	r2, r2

  /* initialize Endpoint */
  switch (ep->type)
 800335e:	78c8      	ldrb	r0, [r1, #3]
 8003360:	2803      	cmp	r0, #3
 8003362:	d85c      	bhi.n	800341e <USB_ActivateEndpoint+0xd6>
 8003364:	e8df f000 	tbb	[pc, r0]
 8003368:	5302574f 	.word	0x5302574f
  HAL_StatusTypeDef ret = HAL_OK;
 800336c:	2000      	movs	r0, #0
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800336e:	f248 0480 	movw	r4, #32896	; 0x8080
 8003372:	4322      	orrs	r2, r4
 8003374:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003378:	780d      	ldrb	r5, [r1, #0]
 800337a:	f833 2025 	ldrh.w	r2, [r3, r5, lsl #2]
 800337e:	b292      	uxth	r2, r2
 8003380:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003384:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003388:	432c      	orrs	r4, r5
 800338a:	4322      	orrs	r2, r4
 800338c:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]

  if (ep->doublebuffer == 0U)
 8003390:	7b0a      	ldrb	r2, [r1, #12]
 8003392:	2a00      	cmp	r2, #0
 8003394:	f040 80a1 	bne.w	80034da <USB_ActivateEndpoint+0x192>
  {
    if (ep->is_in != 0U)
 8003398:	784a      	ldrb	r2, [r1, #1]
 800339a:	2a00      	cmp	r2, #0
 800339c:	d041      	beq.n	8003422 <USB_ActivateEndpoint+0xda>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800339e:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
 80033a2:	b2ad      	uxth	r5, r5
 80033a4:	780a      	ldrb	r2, [r1, #0]
 80033a6:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 80033aa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80033ae:	88cc      	ldrh	r4, [r1, #6]
 80033b0:	0864      	lsrs	r4, r4, #1
 80033b2:	0064      	lsls	r4, r4, #1
 80033b4:	5354      	strh	r4, [r2, r5]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80033b6:	780c      	ldrb	r4, [r1, #0]
 80033b8:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80033bc:	f012 0f40 	tst.w	r2, #64	; 0x40
 80033c0:	d00c      	beq.n	80033dc <USB_ActivateEndpoint+0x94>
 80033c2:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80033c6:	b292      	uxth	r2, r2
 80033c8:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80033cc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80033d0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80033d4:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80033d8:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 80033dc:	78ca      	ldrb	r2, [r1, #3]
 80033de:	2a01      	cmp	r2, #1
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80033e0:	7809      	ldrb	r1, [r1, #0]
 80033e2:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 80033e6:	b292      	uxth	r2, r2
 80033e8:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80033ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033f0:	bf18      	it	ne
 80033f2:	f082 0220 	eorne.w	r2, r2, #32
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80033f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80033fa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80033fe:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return ret;
}
 8003402:	bc70      	pop	{r4, r5, r6}
 8003404:	4770      	bx	lr
      wEpRegVal |= USB_EP_CONTROL;
 8003406:	f442 7200 	orr.w	r2, r2, #512	; 0x200
  HAL_StatusTypeDef ret = HAL_OK;
 800340a:	2000      	movs	r0, #0
      break;
 800340c:	e7af      	b.n	800336e <USB_ActivateEndpoint+0x26>
      wEpRegVal |= USB_EP_INTERRUPT;
 800340e:	f442 62c0 	orr.w	r2, r2, #1536	; 0x600
  HAL_StatusTypeDef ret = HAL_OK;
 8003412:	2000      	movs	r0, #0
      break;
 8003414:	e7ab      	b.n	800336e <USB_ActivateEndpoint+0x26>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003416:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
  HAL_StatusTypeDef ret = HAL_OK;
 800341a:	2000      	movs	r0, #0
      break;
 800341c:	e7a7      	b.n	800336e <USB_ActivateEndpoint+0x26>
      ret = HAL_ERROR;
 800341e:	2001      	movs	r0, #1
 8003420:	e7a5      	b.n	800336e <USB_ActivateEndpoint+0x26>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003422:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
 8003426:	b2ad      	uxth	r5, r5
 8003428:	780a      	ldrb	r2, [r1, #0]
 800342a:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 800342e:	f502 6281 	add.w	r2, r2, #1032	; 0x408
 8003432:	88cc      	ldrh	r4, [r1, #6]
 8003434:	0864      	lsrs	r4, r4, #1
 8003436:	0064      	lsls	r4, r4, #1
 8003438:	5354      	strh	r4, [r2, r5]
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800343a:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
 800343e:	b2ad      	uxth	r5, r5
 8003440:	780a      	ldrb	r2, [r1, #0]
 8003442:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8003446:	f202 420c 	addw	r2, r2, #1036	; 0x40c
 800344a:	690c      	ldr	r4, [r1, #16]
 800344c:	bb6c      	cbnz	r4, 80034aa <USB_ActivateEndpoint+0x162>
 800344e:	5b54      	ldrh	r4, [r2, r5]
 8003450:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
 8003454:	0424      	lsls	r4, r4, #16
 8003456:	0c24      	lsrs	r4, r4, #16
 8003458:	5354      	strh	r4, [r2, r5]
 800345a:	5b54      	ldrh	r4, [r2, r5]
 800345c:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 8003460:	5354      	strh	r4, [r2, r5]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003462:	780c      	ldrb	r4, [r1, #0]
 8003464:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003468:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 800346c:	d00c      	beq.n	8003488 <USB_ActivateEndpoint+0x140>
 800346e:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003472:	b292      	uxth	r2, r2
 8003474:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003478:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800347c:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8003480:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003484:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003488:	7809      	ldrb	r1, [r1, #0]
 800348a:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 800348e:	b292      	uxth	r2, r2
 8003490:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003494:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003498:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 800349c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80034a0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80034a4:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 80034a8:	e7ab      	b.n	8003402 <USB_ActivateEndpoint+0xba>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80034aa:	2c3e      	cmp	r4, #62	; 0x3e
 80034ac:	d808      	bhi.n	80034c0 <USB_ActivateEndpoint+0x178>
 80034ae:	0866      	lsrs	r6, r4, #1
 80034b0:	f014 0f01 	tst.w	r4, #1
 80034b4:	bf18      	it	ne
 80034b6:	3601      	addne	r6, #1
 80034b8:	02b6      	lsls	r6, r6, #10
 80034ba:	b2b6      	uxth	r6, r6
 80034bc:	5356      	strh	r6, [r2, r5]
 80034be:	e7d0      	b.n	8003462 <USB_ActivateEndpoint+0x11a>
 80034c0:	0966      	lsrs	r6, r4, #5
 80034c2:	f014 0f1f 	tst.w	r4, #31
 80034c6:	bf08      	it	eq
 80034c8:	f106 36ff 	addeq.w	r6, r6, #4294967295	; 0xffffffff
 80034cc:	ea6f 64c6 	mvn.w	r4, r6, lsl #27
 80034d0:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 80034d4:	b2a4      	uxth	r4, r4
 80034d6:	5354      	strh	r4, [r2, r5]
 80034d8:	e7c3      	b.n	8003462 <USB_ActivateEndpoint+0x11a>
    PCD_SET_EP_DBUF(USBx, ep->num);
 80034da:	780c      	ldrb	r4, [r1, #0]
 80034dc:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80034e0:	b292      	uxth	r2, r2
 80034e2:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80034e6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80034ea:	f442 4201 	orr.w	r2, r2, #33024	; 0x8100
 80034ee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80034f2:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80034f6:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
 80034fa:	b2ad      	uxth	r5, r5
 80034fc:	780a      	ldrb	r2, [r1, #0]
 80034fe:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8003502:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003506:	890c      	ldrh	r4, [r1, #8]
 8003508:	0864      	lsrs	r4, r4, #1
 800350a:	0064      	lsls	r4, r4, #1
 800350c:	5354      	strh	r4, [r2, r5]
 800350e:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
 8003512:	b2ad      	uxth	r5, r5
 8003514:	780a      	ldrb	r2, [r1, #0]
 8003516:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 800351a:	f502 6281 	add.w	r2, r2, #1032	; 0x408
 800351e:	894c      	ldrh	r4, [r1, #10]
 8003520:	0864      	lsrs	r4, r4, #1
 8003522:	0064      	lsls	r4, r4, #1
 8003524:	5354      	strh	r4, [r2, r5]
    if (ep->is_in == 0U)
 8003526:	784a      	ldrb	r2, [r1, #1]
 8003528:	2a00      	cmp	r2, #0
 800352a:	d140      	bne.n	80035ae <USB_ActivateEndpoint+0x266>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800352c:	780c      	ldrb	r4, [r1, #0]
 800352e:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003532:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8003536:	d00c      	beq.n	8003552 <USB_ActivateEndpoint+0x20a>
 8003538:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800353c:	b292      	uxth	r2, r2
 800353e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003542:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003546:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800354a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800354e:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003552:	780c      	ldrb	r4, [r1, #0]
 8003554:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003558:	f012 0f40 	tst.w	r2, #64	; 0x40
 800355c:	d00c      	beq.n	8003578 <USB_ActivateEndpoint+0x230>
 800355e:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003562:	b292      	uxth	r2, r2
 8003564:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003568:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800356c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003570:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8003574:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003578:	780d      	ldrb	r5, [r1, #0]
 800357a:	f833 2025 	ldrh.w	r2, [r3, r5, lsl #2]
 800357e:	b292      	uxth	r2, r2
 8003580:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003584:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003588:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 800358c:	f248 0480 	movw	r4, #32896	; 0x8080
 8003590:	4322      	orrs	r2, r4
 8003592:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003596:	7809      	ldrb	r1, [r1, #0]
 8003598:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 800359c:	b292      	uxth	r2, r2
 800359e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80035a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035a6:	4322      	orrs	r2, r4
 80035a8:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 80035ac:	e729      	b.n	8003402 <USB_ActivateEndpoint+0xba>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80035ae:	780c      	ldrb	r4, [r1, #0]
 80035b0:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80035b4:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 80035b8:	d00c      	beq.n	80035d4 <USB_ActivateEndpoint+0x28c>
 80035ba:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80035be:	b292      	uxth	r2, r2
 80035c0:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80035c4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80035c8:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80035cc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80035d0:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80035d4:	780c      	ldrb	r4, [r1, #0]
 80035d6:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80035da:	f012 0f40 	tst.w	r2, #64	; 0x40
 80035de:	d00c      	beq.n	80035fa <USB_ActivateEndpoint+0x2b2>
 80035e0:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80035e4:	b292      	uxth	r2, r2
 80035e6:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80035ea:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80035ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80035f2:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80035f6:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      if (ep->type != EP_TYPE_ISOC)
 80035fa:	78ca      	ldrb	r2, [r1, #3]
 80035fc:	2a01      	cmp	r2, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80035fe:	780c      	ldrb	r4, [r1, #0]
 8003600:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003604:	b292      	uxth	r2, r2
 8003606:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800360a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800360e:	bf18      	it	ne
 8003610:	f082 0220 	eorne.w	r2, r2, #32
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003614:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003618:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800361c:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003620:	7809      	ldrb	r1, [r1, #0]
 8003622:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8003626:	b292      	uxth	r2, r2
 8003628:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800362c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003630:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003634:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003638:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 800363c:	e6e1      	b.n	8003402 <USB_ActivateEndpoint+0xba>

0800363e <USB_DeactivateEndpoint>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 800363e:	7b0b      	ldrb	r3, [r1, #12]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d146      	bne.n	80036d2 <USB_DeactivateEndpoint+0x94>
  {
    if (ep->is_in != 0U)
 8003644:	784b      	ldrb	r3, [r1, #1]
 8003646:	b313      	cbz	r3, 800368e <USB_DeactivateEndpoint+0x50>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003648:	780a      	ldrb	r2, [r1, #0]
 800364a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800364e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003652:	d00c      	beq.n	800366e <USB_DeactivateEndpoint+0x30>
 8003654:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003658:	b29b      	uxth	r3, r3
 800365a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800365e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003662:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003666:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800366a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800366e:	780a      	ldrb	r2, [r1, #0]
 8003670:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003674:	b29b      	uxth	r3, r3
 8003676:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800367a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800367e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003682:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003686:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return HAL_OK;
}
 800368a:	2000      	movs	r0, #0
 800368c:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800368e:	780a      	ldrb	r2, [r1, #0]
 8003690:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003694:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8003698:	d00c      	beq.n	80036b4 <USB_DeactivateEndpoint+0x76>
 800369a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800369e:	b29b      	uxth	r3, r3
 80036a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80036ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036b0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80036b4:	780a      	ldrb	r2, [r1, #0]
 80036b6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80036ba:	b29b      	uxth	r3, r3
 80036bc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80036c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036cc:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 80036d0:	e7db      	b.n	800368a <USB_DeactivateEndpoint+0x4c>
{
 80036d2:	b410      	push	{r4}
    if (ep->is_in == 0U)
 80036d4:	784b      	ldrb	r3, [r1, #1]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d14e      	bne.n	8003778 <USB_DeactivateEndpoint+0x13a>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80036da:	780a      	ldrb	r2, [r1, #0]
 80036dc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80036e0:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80036e4:	d00c      	beq.n	8003700 <USB_DeactivateEndpoint+0xc2>
 80036e6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80036ea:	b29b      	uxth	r3, r3
 80036ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036f4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80036f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036fc:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003700:	780a      	ldrb	r2, [r1, #0]
 8003702:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003706:	f013 0f40 	tst.w	r3, #64	; 0x40
 800370a:	d00c      	beq.n	8003726 <USB_DeactivateEndpoint+0xe8>
 800370c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003710:	b29b      	uxth	r3, r3
 8003712:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003716:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800371a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800371e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003722:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 8003726:	780a      	ldrb	r2, [r1, #0]
 8003728:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800372c:	b29b      	uxth	r3, r3
 800372e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003732:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003736:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800373a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800373e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003742:	780c      	ldrb	r4, [r1, #0]
 8003744:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8003748:	b29b      	uxth	r3, r3
 800374a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800374e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003752:	f248 0280 	movw	r2, #32896	; 0x8080
 8003756:	4313      	orrs	r3, r2
 8003758:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800375c:	7809      	ldrb	r1, [r1, #0]
 800375e:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8003762:	b29b      	uxth	r3, r3
 8003764:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003768:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800376c:	4313      	orrs	r3, r2
 800376e:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
}
 8003772:	2000      	movs	r0, #0
 8003774:	bc10      	pop	{r4}
 8003776:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003778:	780a      	ldrb	r2, [r1, #0]
 800377a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800377e:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8003782:	d00c      	beq.n	800379e <USB_DeactivateEndpoint+0x160>
 8003784:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003788:	b29b      	uxth	r3, r3
 800378a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800378e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003792:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003796:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800379a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800379e:	780a      	ldrb	r2, [r1, #0]
 80037a0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80037a4:	f013 0f40 	tst.w	r3, #64	; 0x40
 80037a8:	d00c      	beq.n	80037c4 <USB_DeactivateEndpoint+0x186>
 80037aa:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80037ae:	b29b      	uxth	r3, r3
 80037b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037bc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80037c0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 80037c4:	780a      	ldrb	r2, [r1, #0]
 80037c6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80037ca:	b29b      	uxth	r3, r3
 80037cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80037d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037dc:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80037e0:	780c      	ldrb	r4, [r1, #0]
 80037e2:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 80037e6:	b29b      	uxth	r3, r3
 80037e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037f0:	f248 0280 	movw	r2, #32896	; 0x8080
 80037f4:	4313      	orrs	r3, r2
 80037f6:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80037fa:	7809      	ldrb	r1, [r1, #0]
 80037fc:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8003800:	b29b      	uxth	r3, r3
 8003802:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003806:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800380a:	4313      	orrs	r3, r2
 800380c:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
 8003810:	e7af      	b.n	8003772 <USB_DeactivateEndpoint+0x134>

08003812 <USB_EPSetStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
 8003812:	784b      	ldrb	r3, [r1, #1]
 8003814:	b98b      	cbnz	r3, 800383a <USB_EPSetStall+0x28>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8003816:	780a      	ldrb	r2, [r1, #0]
 8003818:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800381c:	b29b      	uxth	r3, r3
 800381e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003822:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003826:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800382a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800382e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003832:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  }

  return HAL_OK;
}
 8003836:	2000      	movs	r0, #0
 8003838:	4770      	bx	lr
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800383a:	780a      	ldrb	r2, [r1, #0]
 800383c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003840:	b29b      	uxth	r3, r3
 8003842:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003846:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800384a:	f083 0310 	eor.w	r3, r3, #16
 800384e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003852:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003856:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 800385a:	e7ec      	b.n	8003836 <USB_EPSetStall+0x24>

0800385c <USB_EPClearStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 800385c:	7b0b      	ldrb	r3, [r1, #12]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d14b      	bne.n	80038fa <USB_EPClearStall+0x9e>
  {
    if (ep->is_in != 0U)
 8003862:	784b      	ldrb	r3, [r1, #1]
 8003864:	b333      	cbz	r3, 80038b4 <USB_EPClearStall+0x58>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003866:	780a      	ldrb	r2, [r1, #0]
 8003868:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800386c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003870:	d00c      	beq.n	800388c <USB_EPClearStall+0x30>
 8003872:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003876:	b29b      	uxth	r3, r3
 8003878:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800387c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003880:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003884:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003888:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 800388c:	78cb      	ldrb	r3, [r1, #3]
 800388e:	2b01      	cmp	r3, #1
 8003890:	d033      	beq.n	80038fa <USB_EPClearStall+0x9e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003892:	780a      	ldrb	r2, [r1, #0]
 8003894:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003898:	b29b      	uxth	r3, r3
 800389a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800389e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80038a2:	f083 0320 	eor.w	r3, r3, #32
 80038a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038ae:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 80038b2:	e022      	b.n	80038fa <USB_EPClearStall+0x9e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80038b4:	780a      	ldrb	r2, [r1, #0]
 80038b6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80038ba:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80038be:	d00c      	beq.n	80038da <USB_EPClearStall+0x7e>
 80038c0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80038c4:	b29b      	uxth	r3, r3
 80038c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80038d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038d6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80038da:	780a      	ldrb	r2, [r1, #0]
 80038dc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80038e0:	b29b      	uxth	r3, r3
 80038e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80038e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038ea:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80038ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038f6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }

  return HAL_OK;
}
 80038fa:	2000      	movs	r0, #0
 80038fc:	4770      	bx	lr

080038fe <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 80038fe:	b911      	cbnz	r1, 8003906 <USB_SetDevAddress+0x8>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8003900:	2380      	movs	r3, #128	; 0x80
 8003902:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }

  return HAL_OK;
}
 8003906:	2000      	movs	r0, #0
 8003908:	4770      	bx	lr

0800390a <USB_DevConnect>:
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 800390a:	2000      	movs	r0, #0
 800390c:	4770      	bx	lr

0800390e <USB_DevDisconnect>:
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 800390e:	2000      	movs	r0, #0
 8003910:	4770      	bx	lr

08003912 <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8003912:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 8003916:	4770      	bx	lr

08003918 <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8003918:	2000      	movs	r0, #0
 800391a:	4770      	bx	lr

0800391c <USB_WritePMA>:
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800391c:	3301      	adds	r3, #1
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800391e:	eb00 0242 	add.w	r2, r0, r2, lsl #1

  for (i = n; i != 0U; i--)
 8003922:	085b      	lsrs	r3, r3, #1
 8003924:	d010      	beq.n	8003948 <USB_WritePMA+0x2c>
{
 8003926:	b410      	push	{r4}
 8003928:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800392c:	3102      	adds	r1, #2
  {
    temp1 = *pBuf;
    pBuf++;
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800392e:	f811 0c01 	ldrb.w	r0, [r1, #-1]
    temp1 = *pBuf;
 8003932:	f811 4c02 	ldrb.w	r4, [r1, #-2]
    *pdwVal = (uint16_t)temp2;
 8003936:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
 800393a:	f822 4b04 	strh.w	r4, [r2], #4
 800393e:	3102      	adds	r1, #2
  for (i = n; i != 0U; i--)
 8003940:	3b01      	subs	r3, #1
 8003942:	d1f4      	bne.n	800392e <USB_WritePMA+0x12>
    pdwVal++;
#endif

    pBuf++;
  }
}
 8003944:	bc10      	pop	{r4}
 8003946:	4770      	bx	lr
 8003948:	4770      	bx	lr

0800394a <USB_EPStartXfer>:
{
 800394a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (ep->is_in == 1U)
 800394c:	784b      	ldrb	r3, [r1, #1]
 800394e:	2b01      	cmp	r3, #1
 8003950:	d030      	beq.n	80039b4 <USB_EPStartXfer+0x6a>
    if (ep->doublebuffer == 0U)
 8003952:	7b0a      	ldrb	r2, [r1, #12]
 8003954:	2a00      	cmp	r2, #0
 8003956:	f040 8208 	bne.w	8003d6a <USB_EPStartXfer+0x420>
      if (ep->xfer_len > ep->maxpacket)
 800395a:	698b      	ldr	r3, [r1, #24]
 800395c:	690a      	ldr	r2, [r1, #16]
 800395e:	4293      	cmp	r3, r2
 8003960:	f240 81e7 	bls.w	8003d32 <USB_EPStartXfer+0x3e8>
        ep->xfer_len -= len;
 8003964:	1a9b      	subs	r3, r3, r2
 8003966:	618b      	str	r3, [r1, #24]
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8003968:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800396c:	780d      	ldrb	r5, [r1, #0]
 800396e:	012d      	lsls	r5, r5, #4
 8003970:	f200 440c 	addw	r4, r0, #1036	; 0x40c
 8003974:	4423      	add	r3, r4
 8003976:	2a00      	cmp	r2, #0
 8003978:	f040 81df 	bne.w	8003d3a <USB_EPStartXfer+0x3f0>
 800397c:	5aea      	ldrh	r2, [r5, r3]
 800397e:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8003982:	0412      	lsls	r2, r2, #16
 8003984:	0c12      	lsrs	r2, r2, #16
 8003986:	52ea      	strh	r2, [r5, r3]
 8003988:	5aea      	ldrh	r2, [r5, r3]
 800398a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800398e:	52ea      	strh	r2, [r5, r3]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003990:	780a      	ldrb	r2, [r1, #0]
 8003992:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003996:	b29b      	uxth	r3, r3
 8003998:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800399c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039a0:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80039a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039ac:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  return HAL_OK;
 80039b0:	2000      	movs	r0, #0
}
 80039b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80039b4:	460c      	mov	r4, r1
 80039b6:	4605      	mov	r5, r0
    if (ep->xfer_len > ep->maxpacket)
 80039b8:	690a      	ldr	r2, [r1, #16]
 80039ba:	698e      	ldr	r6, [r1, #24]
 80039bc:	4296      	cmp	r6, r2
 80039be:	bf28      	it	cs
 80039c0:	4616      	movcs	r6, r2
    if (ep->doublebuffer == 0U)
 80039c2:	7b0b      	ldrb	r3, [r1, #12]
 80039c4:	b353      	cbz	r3, 8003a1c <USB_EPStartXfer+0xd2>
      if (ep->type == EP_TYPE_BULK)
 80039c6:	78cb      	ldrb	r3, [r1, #3]
 80039c8:	2b02      	cmp	r3, #2
 80039ca:	d047      	beq.n	8003a5c <USB_EPStartXfer+0x112>
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80039cc:	780b      	ldrb	r3, [r1, #0]
 80039ce:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80039d2:	f012 0f40 	tst.w	r2, #64	; 0x40
 80039d6:	f000 8190 	beq.w	8003cfa <USB_EPStartXfer+0x3b0>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80039da:	f8b0 1050 	ldrh.w	r1, [r0, #80]	; 0x50
 80039de:	f200 420c 	addw	r2, r0, #1036	; 0x40c
 80039e2:	440a      	add	r2, r1
 80039e4:	011b      	lsls	r3, r3, #4
 80039e6:	b2b1      	uxth	r1, r6
 80039e8:	52d1      	strh	r1, [r2, r3]
          pmabuffer = ep->pmaaddr1;
 80039ea:	8962      	ldrh	r2, [r4, #10]
        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80039ec:	b2b3      	uxth	r3, r6
 80039ee:	6961      	ldr	r1, [r4, #20]
 80039f0:	4628      	mov	r0, r5
 80039f2:	f7ff ff93 	bl	800391c <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 80039f6:	7863      	ldrb	r3, [r4, #1]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	f040 8188 	bne.w	8003d0e <USB_EPStartXfer+0x3c4>
 80039fe:	7822      	ldrb	r2, [r4, #0]
 8003a00:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8003a04:	b29b      	uxth	r3, r3
 8003a06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a12:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003a16:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
 8003a1a:	e00d      	b.n	8003a38 <USB_EPStartXfer+0xee>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8003a1c:	b2b6      	uxth	r6, r6
 8003a1e:	4633      	mov	r3, r6
 8003a20:	88ca      	ldrh	r2, [r1, #6]
 8003a22:	6949      	ldr	r1, [r1, #20]
 8003a24:	f7ff ff7a 	bl	800391c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003a28:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 8003a2c:	7822      	ldrb	r2, [r4, #0]
 8003a2e:	0112      	lsls	r2, r2, #4
 8003a30:	f205 4304 	addw	r3, r5, #1028	; 0x404
 8003a34:	440b      	add	r3, r1
 8003a36:	52d6      	strh	r6, [r2, r3]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8003a38:	7822      	ldrb	r2, [r4, #0]
 8003a3a:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8003a3e:	b29b      	uxth	r3, r3
 8003a40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a48:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8003a4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a54:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
  return HAL_OK;
 8003a58:	2000      	movs	r0, #0
 8003a5a:	e7aa      	b.n	80039b2 <USB_EPStartXfer+0x68>
        if (ep->xfer_len_db > ep->maxpacket)
 8003a5c:	6a0b      	ldr	r3, [r1, #32]
 8003a5e:	429a      	cmp	r2, r3
 8003a60:	f080 812e 	bcs.w	8003cc0 <USB_EPStartXfer+0x376>
          PCD_SET_EP_DBUF(USBx, ep->num);
 8003a64:	780a      	ldrb	r2, [r1, #0]
 8003a66:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003a6a:	b29b      	uxth	r3, r3
 8003a6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a74:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8003a78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a7c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
          ep->xfer_len_db -= len;
 8003a80:	6a0b      	ldr	r3, [r1, #32]
 8003a82:	1b9b      	subs	r3, r3, r6
 8003a84:	620b      	str	r3, [r1, #32]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003a86:	780b      	ldrb	r3, [r1, #0]
 8003a88:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003a8c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003a90:	f000 808b 	beq.w	8003baa <USB_EPStartXfer+0x260>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003a94:	784a      	ldrb	r2, [r1, #1]
 8003a96:	bb4a      	cbnz	r2, 8003aec <USB_EPStartXfer+0x1a2>
 8003a98:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8003a9c:	f200 410c 	addw	r1, r0, #1036	; 0x40c
 8003aa0:	440a      	add	r2, r1
 8003aa2:	011b      	lsls	r3, r3, #4
 8003aa4:	b956      	cbnz	r6, 8003abc <USB_EPStartXfer+0x172>
 8003aa6:	5ad1      	ldrh	r1, [r2, r3]
 8003aa8:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 8003aac:	0409      	lsls	r1, r1, #16
 8003aae:	0c09      	lsrs	r1, r1, #16
 8003ab0:	52d1      	strh	r1, [r2, r3]
 8003ab2:	5ad1      	ldrh	r1, [r2, r3]
 8003ab4:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8003ab8:	52d1      	strh	r1, [r2, r3]
 8003aba:	e019      	b.n	8003af0 <USB_EPStartXfer+0x1a6>
 8003abc:	2e3e      	cmp	r6, #62	; 0x3e
 8003abe:	d808      	bhi.n	8003ad2 <USB_EPStartXfer+0x188>
 8003ac0:	0871      	lsrs	r1, r6, #1
 8003ac2:	f016 0f01 	tst.w	r6, #1
 8003ac6:	bf18      	it	ne
 8003ac8:	3101      	addne	r1, #1
 8003aca:	0289      	lsls	r1, r1, #10
 8003acc:	b289      	uxth	r1, r1
 8003ace:	52d1      	strh	r1, [r2, r3]
 8003ad0:	e00e      	b.n	8003af0 <USB_EPStartXfer+0x1a6>
 8003ad2:	0971      	lsrs	r1, r6, #5
 8003ad4:	f016 0f1f 	tst.w	r6, #31
 8003ad8:	bf08      	it	eq
 8003ada:	f101 31ff 	addeq.w	r1, r1, #4294967295	; 0xffffffff
 8003ade:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 8003ae2:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8003ae6:	b289      	uxth	r1, r1
 8003ae8:	52d1      	strh	r1, [r2, r3]
 8003aea:	e001      	b.n	8003af0 <USB_EPStartXfer+0x1a6>
 8003aec:	2a01      	cmp	r2, #1
 8003aee:	d024      	beq.n	8003b3a <USB_EPStartXfer+0x1f0>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003af0:	b2b3      	uxth	r3, r6
 8003af2:	8962      	ldrh	r2, [r4, #10]
 8003af4:	6961      	ldr	r1, [r4, #20]
 8003af6:	4628      	mov	r0, r5
 8003af8:	f7ff ff10 	bl	800391c <USB_WritePMA>
            ep->xfer_buff += len;
 8003afc:	6963      	ldr	r3, [r4, #20]
 8003afe:	4433      	add	r3, r6
 8003b00:	6163      	str	r3, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 8003b02:	6a23      	ldr	r3, [r4, #32]
 8003b04:	6922      	ldr	r2, [r4, #16]
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d920      	bls.n	8003b4c <USB_EPStartXfer+0x202>
              ep->xfer_len_db -= len;
 8003b0a:	1b9b      	subs	r3, r3, r6
 8003b0c:	6223      	str	r3, [r4, #32]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003b0e:	7863      	ldrb	r3, [r4, #1]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d137      	bne.n	8003b84 <USB_EPStartXfer+0x23a>
 8003b14:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8003b18:	7821      	ldrb	r1, [r4, #0]
 8003b1a:	0109      	lsls	r1, r1, #4
 8003b1c:	f205 4204 	addw	r2, r5, #1028	; 0x404
 8003b20:	4413      	add	r3, r2
 8003b22:	b9be      	cbnz	r6, 8003b54 <USB_EPStartXfer+0x20a>
 8003b24:	5aca      	ldrh	r2, [r1, r3]
 8003b26:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8003b2a:	0412      	lsls	r2, r2, #16
 8003b2c:	0c12      	lsrs	r2, r2, #16
 8003b2e:	52ca      	strh	r2, [r1, r3]
 8003b30:	5aca      	ldrh	r2, [r1, r3]
 8003b32:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b36:	52ca      	strh	r2, [r1, r3]
 8003b38:	e026      	b.n	8003b88 <USB_EPStartXfer+0x23e>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003b3a:	f8b0 1050 	ldrh.w	r1, [r0, #80]	; 0x50
 8003b3e:	f200 420c 	addw	r2, r0, #1036	; 0x40c
 8003b42:	440a      	add	r2, r1
 8003b44:	011b      	lsls	r3, r3, #4
 8003b46:	b2b1      	uxth	r1, r6
 8003b48:	52d1      	strh	r1, [r2, r3]
 8003b4a:	e7d1      	b.n	8003af0 <USB_EPStartXfer+0x1a6>
              ep->xfer_len_db = 0U;
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	6222      	str	r2, [r4, #32]
              len = ep->xfer_len_db;
 8003b50:	461e      	mov	r6, r3
 8003b52:	e7dc      	b.n	8003b0e <USB_EPStartXfer+0x1c4>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003b54:	2e3e      	cmp	r6, #62	; 0x3e
 8003b56:	d808      	bhi.n	8003b6a <USB_EPStartXfer+0x220>
 8003b58:	0872      	lsrs	r2, r6, #1
 8003b5a:	f016 0f01 	tst.w	r6, #1
 8003b5e:	bf18      	it	ne
 8003b60:	3201      	addne	r2, #1
 8003b62:	0292      	lsls	r2, r2, #10
 8003b64:	b292      	uxth	r2, r2
 8003b66:	52ca      	strh	r2, [r1, r3]
 8003b68:	e00e      	b.n	8003b88 <USB_EPStartXfer+0x23e>
 8003b6a:	0972      	lsrs	r2, r6, #5
 8003b6c:	f016 0f1f 	tst.w	r6, #31
 8003b70:	bf08      	it	eq
 8003b72:	f102 32ff 	addeq.w	r2, r2, #4294967295	; 0xffffffff
 8003b76:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 8003b7a:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8003b7e:	b292      	uxth	r2, r2
 8003b80:	52ca      	strh	r2, [r1, r3]
 8003b82:	e001      	b.n	8003b88 <USB_EPStartXfer+0x23e>
 8003b84:	2b01      	cmp	r3, #1
 8003b86:	d006      	beq.n	8003b96 <USB_EPStartXfer+0x24c>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003b88:	b2b3      	uxth	r3, r6
 8003b8a:	8922      	ldrh	r2, [r4, #8]
 8003b8c:	6961      	ldr	r1, [r4, #20]
 8003b8e:	4628      	mov	r0, r5
 8003b90:	f7ff fec4 	bl	800391c <USB_WritePMA>
 8003b94:	e750      	b.n	8003a38 <USB_EPStartXfer+0xee>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003b96:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 8003b9a:	7822      	ldrb	r2, [r4, #0]
 8003b9c:	0112      	lsls	r2, r2, #4
 8003b9e:	f205 4304 	addw	r3, r5, #1028	; 0x404
 8003ba2:	440b      	add	r3, r1
 8003ba4:	b2b1      	uxth	r1, r6
 8003ba6:	52d1      	strh	r1, [r2, r3]
 8003ba8:	e7ee      	b.n	8003b88 <USB_EPStartXfer+0x23e>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003baa:	784a      	ldrb	r2, [r1, #1]
 8003bac:	bb4a      	cbnz	r2, 8003c02 <USB_EPStartXfer+0x2b8>
 8003bae:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8003bb2:	f200 4104 	addw	r1, r0, #1028	; 0x404
 8003bb6:	440a      	add	r2, r1
 8003bb8:	011b      	lsls	r3, r3, #4
 8003bba:	b956      	cbnz	r6, 8003bd2 <USB_EPStartXfer+0x288>
 8003bbc:	5ad1      	ldrh	r1, [r2, r3]
 8003bbe:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 8003bc2:	0409      	lsls	r1, r1, #16
 8003bc4:	0c09      	lsrs	r1, r1, #16
 8003bc6:	52d1      	strh	r1, [r2, r3]
 8003bc8:	5ad1      	ldrh	r1, [r2, r3]
 8003bca:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8003bce:	52d1      	strh	r1, [r2, r3]
 8003bd0:	e019      	b.n	8003c06 <USB_EPStartXfer+0x2bc>
 8003bd2:	2e3e      	cmp	r6, #62	; 0x3e
 8003bd4:	d808      	bhi.n	8003be8 <USB_EPStartXfer+0x29e>
 8003bd6:	0871      	lsrs	r1, r6, #1
 8003bd8:	f016 0f01 	tst.w	r6, #1
 8003bdc:	bf18      	it	ne
 8003bde:	3101      	addne	r1, #1
 8003be0:	0289      	lsls	r1, r1, #10
 8003be2:	b289      	uxth	r1, r1
 8003be4:	52d1      	strh	r1, [r2, r3]
 8003be6:	e00e      	b.n	8003c06 <USB_EPStartXfer+0x2bc>
 8003be8:	0971      	lsrs	r1, r6, #5
 8003bea:	f016 0f1f 	tst.w	r6, #31
 8003bee:	bf08      	it	eq
 8003bf0:	f101 31ff 	addeq.w	r1, r1, #4294967295	; 0xffffffff
 8003bf4:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 8003bf8:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8003bfc:	b289      	uxth	r1, r1
 8003bfe:	52d1      	strh	r1, [r2, r3]
 8003c00:	e001      	b.n	8003c06 <USB_EPStartXfer+0x2bc>
 8003c02:	2a01      	cmp	r2, #1
 8003c04:	d024      	beq.n	8003c50 <USB_EPStartXfer+0x306>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003c06:	b2b3      	uxth	r3, r6
 8003c08:	8922      	ldrh	r2, [r4, #8]
 8003c0a:	6961      	ldr	r1, [r4, #20]
 8003c0c:	4628      	mov	r0, r5
 8003c0e:	f7ff fe85 	bl	800391c <USB_WritePMA>
            ep->xfer_buff += len;
 8003c12:	6963      	ldr	r3, [r4, #20]
 8003c14:	4433      	add	r3, r6
 8003c16:	6163      	str	r3, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 8003c18:	6a23      	ldr	r3, [r4, #32]
 8003c1a:	6922      	ldr	r2, [r4, #16]
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d920      	bls.n	8003c62 <USB_EPStartXfer+0x318>
              ep->xfer_len_db -= len;
 8003c20:	1b9b      	subs	r3, r3, r6
 8003c22:	6223      	str	r3, [r4, #32]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003c24:	7863      	ldrb	r3, [r4, #1]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d137      	bne.n	8003c9a <USB_EPStartXfer+0x350>
 8003c2a:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8003c2e:	7821      	ldrb	r1, [r4, #0]
 8003c30:	0109      	lsls	r1, r1, #4
 8003c32:	f205 420c 	addw	r2, r5, #1036	; 0x40c
 8003c36:	4413      	add	r3, r2
 8003c38:	b9be      	cbnz	r6, 8003c6a <USB_EPStartXfer+0x320>
 8003c3a:	5aca      	ldrh	r2, [r1, r3]
 8003c3c:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8003c40:	0412      	lsls	r2, r2, #16
 8003c42:	0c12      	lsrs	r2, r2, #16
 8003c44:	52ca      	strh	r2, [r1, r3]
 8003c46:	5aca      	ldrh	r2, [r1, r3]
 8003c48:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c4c:	52ca      	strh	r2, [r1, r3]
 8003c4e:	e026      	b.n	8003c9e <USB_EPStartXfer+0x354>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003c50:	f8b0 1050 	ldrh.w	r1, [r0, #80]	; 0x50
 8003c54:	f200 4204 	addw	r2, r0, #1028	; 0x404
 8003c58:	440a      	add	r2, r1
 8003c5a:	011b      	lsls	r3, r3, #4
 8003c5c:	b2b1      	uxth	r1, r6
 8003c5e:	52d1      	strh	r1, [r2, r3]
 8003c60:	e7d1      	b.n	8003c06 <USB_EPStartXfer+0x2bc>
              ep->xfer_len_db = 0U;
 8003c62:	2200      	movs	r2, #0
 8003c64:	6222      	str	r2, [r4, #32]
              len = ep->xfer_len_db;
 8003c66:	461e      	mov	r6, r3
 8003c68:	e7dc      	b.n	8003c24 <USB_EPStartXfer+0x2da>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003c6a:	2e3e      	cmp	r6, #62	; 0x3e
 8003c6c:	d808      	bhi.n	8003c80 <USB_EPStartXfer+0x336>
 8003c6e:	0872      	lsrs	r2, r6, #1
 8003c70:	f016 0f01 	tst.w	r6, #1
 8003c74:	bf18      	it	ne
 8003c76:	3201      	addne	r2, #1
 8003c78:	0292      	lsls	r2, r2, #10
 8003c7a:	b292      	uxth	r2, r2
 8003c7c:	52ca      	strh	r2, [r1, r3]
 8003c7e:	e00e      	b.n	8003c9e <USB_EPStartXfer+0x354>
 8003c80:	0972      	lsrs	r2, r6, #5
 8003c82:	f016 0f1f 	tst.w	r6, #31
 8003c86:	bf08      	it	eq
 8003c88:	f102 32ff 	addeq.w	r2, r2, #4294967295	; 0xffffffff
 8003c8c:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 8003c90:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8003c94:	b292      	uxth	r2, r2
 8003c96:	52ca      	strh	r2, [r1, r3]
 8003c98:	e001      	b.n	8003c9e <USB_EPStartXfer+0x354>
 8003c9a:	2b01      	cmp	r3, #1
 8003c9c:	d006      	beq.n	8003cac <USB_EPStartXfer+0x362>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003c9e:	b2b3      	uxth	r3, r6
 8003ca0:	8962      	ldrh	r2, [r4, #10]
 8003ca2:	6961      	ldr	r1, [r4, #20]
 8003ca4:	4628      	mov	r0, r5
 8003ca6:	f7ff fe39 	bl	800391c <USB_WritePMA>
 8003caa:	e6c5      	b.n	8003a38 <USB_EPStartXfer+0xee>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003cac:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 8003cb0:	7822      	ldrb	r2, [r4, #0]
 8003cb2:	0112      	lsls	r2, r2, #4
 8003cb4:	f205 430c 	addw	r3, r5, #1036	; 0x40c
 8003cb8:	440b      	add	r3, r1
 8003cba:	b2b1      	uxth	r1, r6
 8003cbc:	52d1      	strh	r1, [r2, r3]
 8003cbe:	e7ee      	b.n	8003c9e <USB_EPStartXfer+0x354>
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8003cc0:	7809      	ldrb	r1, [r1, #0]
 8003cc2:	f830 2021 	ldrh.w	r2, [r0, r1, lsl #2]
 8003cc6:	b292      	uxth	r2, r2
 8003cc8:	f422 42e2 	bic.w	r2, r2, #28928	; 0x7100
 8003ccc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003cd0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003cd4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003cd8:	f820 2021 	strh.w	r2, [r0, r1, lsl #2]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003cdc:	f8b0 0050 	ldrh.w	r0, [r0, #80]	; 0x50
 8003ce0:	7821      	ldrb	r1, [r4, #0]
 8003ce2:	0109      	lsls	r1, r1, #4
 8003ce4:	f205 4204 	addw	r2, r5, #1028	; 0x404
 8003ce8:	4402      	add	r2, r0
 8003cea:	b29b      	uxth	r3, r3
 8003cec:	528b      	strh	r3, [r1, r2]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003cee:	8922      	ldrh	r2, [r4, #8]
 8003cf0:	6961      	ldr	r1, [r4, #20]
 8003cf2:	4628      	mov	r0, r5
 8003cf4:	f7ff fe12 	bl	800391c <USB_WritePMA>
 8003cf8:	e69e      	b.n	8003a38 <USB_EPStartXfer+0xee>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003cfa:	f8b0 1050 	ldrh.w	r1, [r0, #80]	; 0x50
 8003cfe:	f200 4204 	addw	r2, r0, #1028	; 0x404
 8003d02:	440a      	add	r2, r1
 8003d04:	011b      	lsls	r3, r3, #4
 8003d06:	b2b1      	uxth	r1, r6
 8003d08:	52d1      	strh	r1, [r2, r3]
          pmabuffer = ep->pmaaddr0;
 8003d0a:	8922      	ldrh	r2, [r4, #8]
 8003d0c:	e66e      	b.n	80039ec <USB_EPStartXfer+0xa2>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8003d0e:	2b01      	cmp	r3, #1
 8003d10:	f47f ae92 	bne.w	8003a38 <USB_EPStartXfer+0xee>
 8003d14:	7822      	ldrb	r2, [r4, #0]
 8003d16:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8003d1a:	b29b      	uxth	r3, r3
 8003d1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d24:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003d28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d2c:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
 8003d30:	e682      	b.n	8003a38 <USB_EPStartXfer+0xee>
        ep->xfer_len = 0U;
 8003d32:	2200      	movs	r2, #0
 8003d34:	618a      	str	r2, [r1, #24]
        len = ep->xfer_len;
 8003d36:	461a      	mov	r2, r3
 8003d38:	e616      	b.n	8003968 <USB_EPStartXfer+0x1e>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8003d3a:	2a3e      	cmp	r2, #62	; 0x3e
 8003d3c:	d808      	bhi.n	8003d50 <USB_EPStartXfer+0x406>
 8003d3e:	0854      	lsrs	r4, r2, #1
 8003d40:	f012 0f01 	tst.w	r2, #1
 8003d44:	bf18      	it	ne
 8003d46:	3401      	addne	r4, #1
 8003d48:	02a4      	lsls	r4, r4, #10
 8003d4a:	b2a4      	uxth	r4, r4
 8003d4c:	52ec      	strh	r4, [r5, r3]
 8003d4e:	e61f      	b.n	8003990 <USB_EPStartXfer+0x46>
 8003d50:	0954      	lsrs	r4, r2, #5
 8003d52:	f012 0f1f 	tst.w	r2, #31
 8003d56:	bf08      	it	eq
 8003d58:	f104 34ff 	addeq.w	r4, r4, #4294967295	; 0xffffffff
 8003d5c:	ea6f 64c4 	mvn.w	r4, r4, lsl #27
 8003d60:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 8003d64:	b2a4      	uxth	r4, r4
 8003d66:	52ec      	strh	r4, [r5, r3]
 8003d68:	e612      	b.n	8003990 <USB_EPStartXfer+0x46>
      if (ep->type == EP_TYPE_BULK)
 8003d6a:	78ca      	ldrb	r2, [r1, #3]
 8003d6c:	2a02      	cmp	r2, #2
 8003d6e:	d004      	beq.n	8003d7a <USB_EPStartXfer+0x430>
      else if (ep->type == EP_TYPE_ISOC)
 8003d70:	2a01      	cmp	r2, #1
 8003d72:	f000 8087 	beq.w	8003e84 <USB_EPStartXfer+0x53a>
        return HAL_ERROR;
 8003d76:	2001      	movs	r0, #1
 8003d78:	e61b      	b.n	80039b2 <USB_EPStartXfer+0x68>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8003d7a:	bb53      	cbnz	r3, 8003dd2 <USB_EPStartXfer+0x488>
 8003d7c:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8003d80:	780d      	ldrb	r5, [r1, #0]
 8003d82:	012d      	lsls	r5, r5, #4
 8003d84:	f200 4204 	addw	r2, r0, #1028	; 0x404
 8003d88:	4413      	add	r3, r2
 8003d8a:	690a      	ldr	r2, [r1, #16]
 8003d8c:	2a00      	cmp	r2, #0
 8003d8e:	d13d      	bne.n	8003e0c <USB_EPStartXfer+0x4c2>
 8003d90:	5aea      	ldrh	r2, [r5, r3]
 8003d92:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8003d96:	0412      	lsls	r2, r2, #16
 8003d98:	0c12      	lsrs	r2, r2, #16
 8003d9a:	52ea      	strh	r2, [r5, r3]
 8003d9c:	5aea      	ldrh	r2, [r5, r3]
 8003d9e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003da2:	52ea      	strh	r2, [r5, r3]
 8003da4:	784b      	ldrb	r3, [r1, #1]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d160      	bne.n	8003e6c <USB_EPStartXfer+0x522>
 8003daa:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8003dae:	780a      	ldrb	r2, [r1, #0]
 8003db0:	0112      	lsls	r2, r2, #4
 8003db2:	f200 440c 	addw	r4, r0, #1036	; 0x40c
 8003db6:	4423      	add	r3, r4
 8003db8:	690c      	ldr	r4, [r1, #16]
 8003dba:	2c00      	cmp	r4, #0
 8003dbc:	d13e      	bne.n	8003e3c <USB_EPStartXfer+0x4f2>
 8003dbe:	5ad4      	ldrh	r4, [r2, r3]
 8003dc0:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
 8003dc4:	0424      	lsls	r4, r4, #16
 8003dc6:	0c24      	lsrs	r4, r4, #16
 8003dc8:	52d4      	strh	r4, [r2, r3]
 8003dca:	5ad4      	ldrh	r4, [r2, r3]
 8003dcc:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 8003dd0:	52d4      	strh	r4, [r2, r3]
        if (ep->xfer_count != 0U)
 8003dd2:	69cb      	ldr	r3, [r1, #28]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	f43f addb 	beq.w	8003990 <USB_EPStartXfer+0x46>
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8003dda:	780a      	ldrb	r2, [r1, #0]
 8003ddc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003de0:	f244 0440 	movw	r4, #16448	; 0x4040
 8003de4:	4023      	ands	r3, r4
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8003de6:	42a3      	cmp	r3, r4
 8003de8:	d002      	beq.n	8003df0 <USB_EPStartXfer+0x4a6>
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	f47f add0 	bne.w	8003990 <USB_EPStartXfer+0x46>
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8003df0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003df4:	b29b      	uxth	r3, r3
 8003df6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003dfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dfe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e02:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003e06:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8003e0a:	e5c1      	b.n	8003990 <USB_EPStartXfer+0x46>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8003e0c:	2a3e      	cmp	r2, #62	; 0x3e
 8003e0e:	d808      	bhi.n	8003e22 <USB_EPStartXfer+0x4d8>
 8003e10:	0854      	lsrs	r4, r2, #1
 8003e12:	f012 0f01 	tst.w	r2, #1
 8003e16:	bf18      	it	ne
 8003e18:	3401      	addne	r4, #1
 8003e1a:	02a2      	lsls	r2, r4, #10
 8003e1c:	b292      	uxth	r2, r2
 8003e1e:	52ea      	strh	r2, [r5, r3]
 8003e20:	e7c0      	b.n	8003da4 <USB_EPStartXfer+0x45a>
 8003e22:	0954      	lsrs	r4, r2, #5
 8003e24:	f012 0f1f 	tst.w	r2, #31
 8003e28:	bf08      	it	eq
 8003e2a:	f104 34ff 	addeq.w	r4, r4, #4294967295	; 0xffffffff
 8003e2e:	ea6f 62c4 	mvn.w	r2, r4, lsl #27
 8003e32:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8003e36:	b292      	uxth	r2, r2
 8003e38:	52ea      	strh	r2, [r5, r3]
 8003e3a:	e7b3      	b.n	8003da4 <USB_EPStartXfer+0x45a>
 8003e3c:	2c3e      	cmp	r4, #62	; 0x3e
 8003e3e:	d808      	bhi.n	8003e52 <USB_EPStartXfer+0x508>
 8003e40:	0865      	lsrs	r5, r4, #1
 8003e42:	f014 0f01 	tst.w	r4, #1
 8003e46:	bf18      	it	ne
 8003e48:	3501      	addne	r5, #1
 8003e4a:	02ac      	lsls	r4, r5, #10
 8003e4c:	b2a4      	uxth	r4, r4
 8003e4e:	52d4      	strh	r4, [r2, r3]
 8003e50:	e7bf      	b.n	8003dd2 <USB_EPStartXfer+0x488>
 8003e52:	0965      	lsrs	r5, r4, #5
 8003e54:	f014 0f1f 	tst.w	r4, #31
 8003e58:	bf08      	it	eq
 8003e5a:	f105 35ff 	addeq.w	r5, r5, #4294967295	; 0xffffffff
 8003e5e:	ea6f 64c5 	mvn.w	r4, r5, lsl #27
 8003e62:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 8003e66:	b2a4      	uxth	r4, r4
 8003e68:	52d4      	strh	r4, [r2, r3]
 8003e6a:	e7b2      	b.n	8003dd2 <USB_EPStartXfer+0x488>
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d1b0      	bne.n	8003dd2 <USB_EPStartXfer+0x488>
 8003e70:	f8b0 4050 	ldrh.w	r4, [r0, #80]	; 0x50
 8003e74:	780a      	ldrb	r2, [r1, #0]
 8003e76:	0112      	lsls	r2, r2, #4
 8003e78:	f200 430c 	addw	r3, r0, #1036	; 0x40c
 8003e7c:	4423      	add	r3, r4
 8003e7e:	8a0c      	ldrh	r4, [r1, #16]
 8003e80:	52d4      	strh	r4, [r2, r3]
 8003e82:	e7a6      	b.n	8003dd2 <USB_EPStartXfer+0x488>
        if (ep->xfer_len > ep->maxpacket)
 8003e84:	698c      	ldr	r4, [r1, #24]
 8003e86:	690a      	ldr	r2, [r1, #16]
 8003e88:	4294      	cmp	r4, r2
 8003e8a:	d92b      	bls.n	8003ee4 <USB_EPStartXfer+0x59a>
          ep->xfer_len -= len;
 8003e8c:	1aa4      	subs	r4, r4, r2
 8003e8e:	618c      	str	r4, [r1, #24]
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	f47f ad7d 	bne.w	8003990 <USB_EPStartXfer+0x46>
 8003e96:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8003e9a:	780d      	ldrb	r5, [r1, #0]
 8003e9c:	012d      	lsls	r5, r5, #4
 8003e9e:	f200 4404 	addw	r4, r0, #1028	; 0x404
 8003ea2:	441c      	add	r4, r3
 8003ea4:	bb12      	cbnz	r2, 8003eec <USB_EPStartXfer+0x5a2>
 8003ea6:	5b2b      	ldrh	r3, [r5, r4]
 8003ea8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003eac:	041b      	lsls	r3, r3, #16
 8003eae:	0c1b      	lsrs	r3, r3, #16
 8003eb0:	532b      	strh	r3, [r5, r4]
 8003eb2:	5b2b      	ldrh	r3, [r5, r4]
 8003eb4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003eb8:	532b      	strh	r3, [r5, r4]
 8003eba:	784c      	ldrb	r4, [r1, #1]
 8003ebc:	2c00      	cmp	r4, #0
 8003ebe:	d13d      	bne.n	8003f3c <USB_EPStartXfer+0x5f2>
 8003ec0:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8003ec4:	780c      	ldrb	r4, [r1, #0]
 8003ec6:	0124      	lsls	r4, r4, #4
 8003ec8:	f200 420c 	addw	r2, r0, #1036	; 0x40c
 8003ecc:	441a      	add	r2, r3
 8003ece:	5aa3      	ldrh	r3, [r4, r2]
 8003ed0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003ed4:	041b      	lsls	r3, r3, #16
 8003ed6:	0c1b      	lsrs	r3, r3, #16
 8003ed8:	52a3      	strh	r3, [r4, r2]
 8003eda:	5aa3      	ldrh	r3, [r4, r2]
 8003edc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ee0:	52a3      	strh	r3, [r4, r2]
 8003ee2:	e555      	b.n	8003990 <USB_EPStartXfer+0x46>
          ep->xfer_len = 0U;
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	618a      	str	r2, [r1, #24]
          len = ep->xfer_len;
 8003ee8:	4622      	mov	r2, r4
 8003eea:	e7d1      	b.n	8003e90 <USB_EPStartXfer+0x546>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8003eec:	2a3e      	cmp	r2, #62	; 0x3e
 8003eee:	d816      	bhi.n	8003f1e <USB_EPStartXfer+0x5d4>
 8003ef0:	0853      	lsrs	r3, r2, #1
 8003ef2:	f012 0701 	ands.w	r7, r2, #1
 8003ef6:	bf14      	ite	ne
 8003ef8:	1c5e      	addne	r6, r3, #1
 8003efa:	461e      	moveq	r6, r3
 8003efc:	02b6      	lsls	r6, r6, #10
 8003efe:	b2b6      	uxth	r6, r6
 8003f00:	532e      	strh	r6, [r5, r4]
 8003f02:	784c      	ldrb	r4, [r1, #1]
 8003f04:	b9d4      	cbnz	r4, 8003f3c <USB_EPStartXfer+0x5f2>
 8003f06:	f8b0 4050 	ldrh.w	r4, [r0, #80]	; 0x50
 8003f0a:	f200 420c 	addw	r2, r0, #1036	; 0x40c
 8003f0e:	4422      	add	r2, r4
 8003f10:	780c      	ldrb	r4, [r1, #0]
 8003f12:	0124      	lsls	r4, r4, #4
 8003f14:	b9ff      	cbnz	r7, 8003f56 <USB_EPStartXfer+0x60c>
 8003f16:	029b      	lsls	r3, r3, #10
 8003f18:	b29b      	uxth	r3, r3
 8003f1a:	5313      	strh	r3, [r2, r4]
 8003f1c:	e538      	b.n	8003990 <USB_EPStartXfer+0x46>
 8003f1e:	0953      	lsrs	r3, r2, #5
 8003f20:	f012 071f 	ands.w	r7, r2, #31
 8003f24:	bf0c      	ite	eq
 8003f26:	f103 36ff 	addeq.w	r6, r3, #4294967295	; 0xffffffff
 8003f2a:	461e      	movne	r6, r3
 8003f2c:	ea6f 66c6 	mvn.w	r6, r6, lsl #27
 8003f30:	ea6f 4656 	mvn.w	r6, r6, lsr #17
 8003f34:	b2b6      	uxth	r6, r6
 8003f36:	532e      	strh	r6, [r5, r4]
 8003f38:	784c      	ldrb	r4, [r1, #1]
 8003f3a:	b184      	cbz	r4, 8003f5e <USB_EPStartXfer+0x614>
 8003f3c:	2c01      	cmp	r4, #1
 8003f3e:	f47f ad27 	bne.w	8003990 <USB_EPStartXfer+0x46>
 8003f42:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8003f46:	780c      	ldrb	r4, [r1, #0]
 8003f48:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003f4c:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8003f50:	b292      	uxth	r2, r2
 8003f52:	52c2      	strh	r2, [r0, r3]
 8003f54:	e51c      	b.n	8003990 <USB_EPStartXfer+0x46>
 8003f56:	3301      	adds	r3, #1
 8003f58:	e7dd      	b.n	8003f16 <USB_EPStartXfer+0x5cc>
 8003f5a:	3b01      	subs	r3, #1
 8003f5c:	e008      	b.n	8003f70 <USB_EPStartXfer+0x626>
 8003f5e:	f8b0 4050 	ldrh.w	r4, [r0, #80]	; 0x50
 8003f62:	f200 420c 	addw	r2, r0, #1036	; 0x40c
 8003f66:	4422      	add	r2, r4
 8003f68:	780c      	ldrb	r4, [r1, #0]
 8003f6a:	0124      	lsls	r4, r4, #4
 8003f6c:	2f00      	cmp	r7, #0
 8003f6e:	d0f4      	beq.n	8003f5a <USB_EPStartXfer+0x610>
 8003f70:	ea6f 63c3 	mvn.w	r3, r3, lsl #27
 8003f74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f78:	b29b      	uxth	r3, r3
 8003f7a:	5313      	strh	r3, [r2, r4]
 8003f7c:	e508      	b.n	8003990 <USB_EPStartXfer+0x46>

08003f7e <USB_ReadPMA>:
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003f7e:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8003f82:	f502 6280 	add.w	r2, r2, #1024	; 0x400

  for (i = n; i != 0U; i--)
 8003f86:	0858      	lsrs	r0, r3, #1
 8003f88:	d019      	beq.n	8003fbe <USB_ReadPMA+0x40>
{
 8003f8a:	b4f0      	push	{r4, r5, r6, r7}
 8003f8c:	1c8d      	adds	r5, r1, #2
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003f8e:	4617      	mov	r7, r2
  for (i = n; i != 0U; i--)
 8003f90:	4606      	mov	r6, r0
  {
    temp = *(__IO uint16_t *)pdwVal;
 8003f92:	f837 4b04 	ldrh.w	r4, [r7], #4
 8003f96:	b2a4      	uxth	r4, r4
    pdwVal++;
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8003f98:	f805 4c02 	strb.w	r4, [r5, #-2]
    pBuf++;
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8003f9c:	0a24      	lsrs	r4, r4, #8
 8003f9e:	f805 4c01 	strb.w	r4, [r5, #-1]
 8003fa2:	3502      	adds	r5, #2
  for (i = n; i != 0U; i--)
 8003fa4:	3e01      	subs	r6, #1
 8003fa6:	d1f4      	bne.n	8003f92 <USB_ReadPMA+0x14>
 8003fa8:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 8003fac:	eb02 0280 	add.w	r2, r2, r0, lsl #2
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8003fb0:	f013 0f01 	tst.w	r3, #1
  {
    temp = *pdwVal;
 8003fb4:	bf1c      	itt	ne
 8003fb6:	8813      	ldrhne	r3, [r2, #0]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8003fb8:	700b      	strbne	r3, [r1, #0]
  }
}
 8003fba:	bcf0      	pop	{r4, r5, r6, r7}
 8003fbc:	4770      	bx	lr
  if ((wNBytes % 2U) != 0U)
 8003fbe:	f013 0f01 	tst.w	r3, #1
    temp = *pdwVal;
 8003fc2:	bf1c      	itt	ne
 8003fc4:	8813      	ldrhne	r3, [r2, #0]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8003fc6:	700b      	strbne	r3, [r1, #0]
 8003fc8:	4770      	bx	lr
	...

08003fcc <ST7735_Select>:
    ST7735_NORON  ,    DELAY, //  3: Normal display on, no args, w/delay
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

static void ST7735_Select() {
 8003fcc:	b508      	push	{r3, lr}
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 8003fce:	2200      	movs	r2, #0
 8003fd0:	2180      	movs	r1, #128	; 0x80
 8003fd2:	4802      	ldr	r0, [pc, #8]	; (8003fdc <ST7735_Select+0x10>)
 8003fd4:	f7fd fbec 	bl	80017b0 <HAL_GPIO_WritePin>
}
 8003fd8:	bd08      	pop	{r3, pc}
 8003fda:	bf00      	nop
 8003fdc:	40010c00 	.word	0x40010c00

08003fe0 <ST7735_WriteCommand>:
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
    HAL_Delay(5);
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
}

static void ST7735_WriteCommand(uint8_t cmd) {
 8003fe0:	b510      	push	{r4, lr}
 8003fe2:	b082      	sub	sp, #8
 8003fe4:	ac02      	add	r4, sp, #8
 8003fe6:	f804 0d01 	strb.w	r0, [r4, #-1]!
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 8003fea:	2200      	movs	r2, #0
 8003fec:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003ff0:	4805      	ldr	r0, [pc, #20]	; (8004008 <ST7735_WriteCommand+0x28>)
 8003ff2:	f7fd fbdd 	bl	80017b0 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8003ff6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	4621      	mov	r1, r4
 8003ffe:	4803      	ldr	r0, [pc, #12]	; (800400c <ST7735_WriteCommand+0x2c>)
 8004000:	f7fe ff87 	bl	8002f12 <HAL_SPI_Transmit>

//    while( __HAL_DMA_GET_COUNTER(ST7735_SPI_PORT.hdmatx) != 0 );
//    		HAL_SPI_Transmit_DMA(&ST7735_SPI_PORT, &cmd, sizeof(cmd));
}
 8004004:	b002      	add	sp, #8
 8004006:	bd10      	pop	{r4, pc}
 8004008:	40010c00 	.word	0x40010c00
 800400c:	200008bc 	.word	0x200008bc

08004010 <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 8004010:	b538      	push	{r3, r4, r5, lr}
 8004012:	4604      	mov	r4, r0
 8004014:	460d      	mov	r5, r1
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8004016:	2201      	movs	r2, #1
 8004018:	f44f 7180 	mov.w	r1, #256	; 0x100
 800401c:	4805      	ldr	r0, [pc, #20]	; (8004034 <ST7735_WriteData+0x24>)
 800401e:	f7fd fbc7 	bl	80017b0 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8004022:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004026:	b2aa      	uxth	r2, r5
 8004028:	4621      	mov	r1, r4
 800402a:	4803      	ldr	r0, [pc, #12]	; (8004038 <ST7735_WriteData+0x28>)
 800402c:	f7fe ff71 	bl	8002f12 <HAL_SPI_Transmit>
//
//    while( __HAL_DMA_GET_COUNTER(ST7735_SPI_PORT.hdmatx) != 0 );
//    		HAL_SPI_Transmit_DMA(&ST7735_SPI_PORT, buff, buff_size);
}
 8004030:	bd38      	pop	{r3, r4, r5, pc}
 8004032:	bf00      	nop
 8004034:	40010c00 	.word	0x40010c00
 8004038:	200008bc 	.word	0x200008bc

0800403c <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr) {
 800403c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 800403e:	1c46      	adds	r6, r0, #1
 8004040:	7805      	ldrb	r5, [r0, #0]
    while(numCommands--) {
 8004042:	e006      	b.n	8004052 <ST7735_ExecuteCommandList+0x16>
        numArgs = *addr++;
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
        numArgs &= ~DELAY;
        if(numArgs) {
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8004044:	4639      	mov	r1, r7
 8004046:	4620      	mov	r0, r4
 8004048:	f7ff ffe2 	bl	8004010 <ST7735_WriteData>
            addr += numArgs;
 800404c:	443c      	add	r4, r7
 800404e:	e00d      	b.n	800406c <ST7735_ExecuteCommandList+0x30>
        }

        if(ms) {
            ms = *addr++;
 8004050:	4626      	mov	r6, r4
    while(numCommands--) {
 8004052:	3d01      	subs	r5, #1
 8004054:	b2ed      	uxtb	r5, r5
 8004056:	2dff      	cmp	r5, #255	; 0xff
 8004058:	d015      	beq.n	8004086 <ST7735_ExecuteCommandList+0x4a>
        ST7735_WriteCommand(cmd);
 800405a:	4634      	mov	r4, r6
 800405c:	f814 0b02 	ldrb.w	r0, [r4], #2
 8004060:	f7ff ffbe 	bl	8003fe0 <ST7735_WriteCommand>
        numArgs = *addr++;
 8004064:	7876      	ldrb	r6, [r6, #1]
        if(numArgs) {
 8004066:	f016 077f 	ands.w	r7, r6, #127	; 0x7f
 800406a:	d1eb      	bne.n	8004044 <ST7735_ExecuteCommandList+0x8>
        if(ms) {
 800406c:	f016 0f80 	tst.w	r6, #128	; 0x80
 8004070:	d0ee      	beq.n	8004050 <ST7735_ExecuteCommandList+0x14>
            ms = *addr++;
 8004072:	1c66      	adds	r6, r4, #1
 8004074:	7820      	ldrb	r0, [r4, #0]
            if(ms == 255) ms = 500;
 8004076:	28ff      	cmp	r0, #255	; 0xff
            HAL_Delay(ms);
 8004078:	bf08      	it	eq
 800407a:	f44f 70fa 	moveq.w	r0, #500	; 0x1f4
 800407e:	f7fd fa25 	bl	80014cc <HAL_Delay>
            ms = *addr++;
 8004082:	4634      	mov	r4, r6
 8004084:	e7e4      	b.n	8004050 <ST7735_ExecuteCommandList+0x14>
        }
    }
}
 8004086:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004088 <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 8004088:	b5f0      	push	{r4, r5, r6, r7, lr}
 800408a:	b083      	sub	sp, #12
 800408c:	4607      	mov	r7, r0
 800408e:	460d      	mov	r5, r1
 8004090:	4616      	mov	r6, r2
 8004092:	461c      	mov	r4, r3
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 8004094:	202a      	movs	r0, #42	; 0x2a
 8004096:	f7ff ffa3 	bl	8003fe0 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 800409a:	2300      	movs	r3, #0
 800409c:	f88d 3004 	strb.w	r3, [sp, #4]
 80040a0:	3702      	adds	r7, #2
 80040a2:	f88d 7005 	strb.w	r7, [sp, #5]
 80040a6:	f88d 3006 	strb.w	r3, [sp, #6]
 80040aa:	3602      	adds	r6, #2
 80040ac:	f88d 6007 	strb.w	r6, [sp, #7]
    ST7735_WriteData(data, sizeof(data));
 80040b0:	2104      	movs	r1, #4
 80040b2:	eb0d 0001 	add.w	r0, sp, r1
 80040b6:	f7ff ffab 	bl	8004010 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 80040ba:	202b      	movs	r0, #43	; 0x2b
 80040bc:	f7ff ff90 	bl	8003fe0 <ST7735_WriteCommand>
    data[1] = y0 + ST7735_YSTART;
 80040c0:	3503      	adds	r5, #3
 80040c2:	f88d 5005 	strb.w	r5, [sp, #5]
    data[3] = y1 + ST7735_YSTART;
 80040c6:	3403      	adds	r4, #3
 80040c8:	f88d 4007 	strb.w	r4, [sp, #7]
    ST7735_WriteData(data, sizeof(data));
 80040cc:	2104      	movs	r1, #4
 80040ce:	eb0d 0001 	add.w	r0, sp, r1
 80040d2:	f7ff ff9d 	bl	8004010 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 80040d6:	202c      	movs	r0, #44	; 0x2c
 80040d8:	f7ff ff82 	bl	8003fe0 <ST7735_WriteCommand>
}
 80040dc:	b003      	add	sp, #12
 80040de:	bdf0      	pop	{r4, r5, r6, r7, pc}

080040e0 <ST7735_Unselect>:
void ST7735_Unselect() {
 80040e0:	b508      	push	{r3, lr}
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 80040e2:	2201      	movs	r2, #1
 80040e4:	2180      	movs	r1, #128	; 0x80
 80040e6:	4802      	ldr	r0, [pc, #8]	; (80040f0 <ST7735_Unselect+0x10>)
 80040e8:	f7fd fb62 	bl	80017b0 <HAL_GPIO_WritePin>
}
 80040ec:	bd08      	pop	{r3, pc}
 80040ee:	bf00      	nop
 80040f0:	40010c00 	.word	0x40010c00

080040f4 <ST7735_Init>:

void ST7735_Init() {
 80040f4:	b510      	push	{r4, lr}
    ST7735_Select();
 80040f6:	f7ff ff69 	bl	8003fcc <ST7735_Select>
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 80040fa:	4c0e      	ldr	r4, [pc, #56]	; (8004134 <ST7735_Init+0x40>)
 80040fc:	2200      	movs	r2, #0
 80040fe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004102:	4620      	mov	r0, r4
 8004104:	f7fd fb54 	bl	80017b0 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8004108:	2005      	movs	r0, #5
 800410a:	f7fd f9df 	bl	80014cc <HAL_Delay>
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
 800410e:	2201      	movs	r2, #1
 8004110:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004114:	4620      	mov	r0, r4
 8004116:	f7fd fb4b 	bl	80017b0 <HAL_GPIO_WritePin>
    ST7735_Reset();
    ST7735_ExecuteCommandList(init_cmds1);
 800411a:	4807      	ldr	r0, [pc, #28]	; (8004138 <ST7735_Init+0x44>)
 800411c:	f7ff ff8e 	bl	800403c <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds2);
 8004120:	4806      	ldr	r0, [pc, #24]	; (800413c <ST7735_Init+0x48>)
 8004122:	f7ff ff8b 	bl	800403c <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds3);
 8004126:	4806      	ldr	r0, [pc, #24]	; (8004140 <ST7735_Init+0x4c>)
 8004128:	f7ff ff88 	bl	800403c <ST7735_ExecuteCommandList>
    ST7735_Unselect();
 800412c:	f7ff ffd8 	bl	80040e0 <ST7735_Unselect>
}
 8004130:	bd10      	pop	{r4, pc}
 8004132:	bf00      	nop
 8004134:	40010c00 	.word	0x40010c00
 8004138:	08005c50 	.word	0x08005c50
 800413c:	08005c8c 	.word	0x08005c8c
 8004140:	08005c9c 	.word	0x08005c9c

08004144 <ST7735_WriteString>:
            } 
        }
    }
}
*/
void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8004144:	b082      	sub	sp, #8
 8004146:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800414a:	b089      	sub	sp, #36	; 0x24
 800414c:	9002      	str	r0, [sp, #8]
 800414e:	9104      	str	r1, [sp, #16]
 8004150:	4614      	mov	r4, r2
 8004152:	9313      	str	r3, [sp, #76]	; 0x4c
 8004154:	f8bd a054 	ldrh.w	sl, [sp, #84]	; 0x54
 8004158:	f8bd b058 	ldrh.w	fp, [sp, #88]	; 0x58
 800415c:	b2da      	uxtb	r2, r3
 800415e:	9200      	str	r2, [sp, #0]
 8004160:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8004164:	9305      	str	r3, [sp, #20]
    ST7735_Select();
 8004166:	f7ff ff31 	bl	8003fcc <ST7735_Select>
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 800416a:	ea4f 291b 	mov.w	r9, fp, lsr #8
                uint8_t data[] = { color >> 8, color & 0xFF };
 800416e:	ea4f 261a 	mov.w	r6, sl, lsr #8
 8004172:	9403      	str	r4, [sp, #12]
    while(*str) {
 8004174:	e03f      	b.n	80041f6 <ST7735_WriteString+0xb2>
 8004176:	9c14      	ldr	r4, [sp, #80]	; 0x50
    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8004178:	f89d 0008 	ldrb.w	r0, [sp, #8]
 800417c:	f89d 1010 	ldrb.w	r1, [sp, #16]
 8004180:	9f05      	ldr	r7, [sp, #20]
 8004182:	1e7b      	subs	r3, r7, #1
 8004184:	440b      	add	r3, r1
 8004186:	9a00      	ldr	r2, [sp, #0]
 8004188:	3a01      	subs	r2, #1
 800418a:	4402      	add	r2, r0
 800418c:	b2db      	uxtb	r3, r3
 800418e:	b2d2      	uxtb	r2, r2
 8004190:	f7ff ff7a 	bl	8004088 <ST7735_SetAddressWindow>
    for(i = 0; i < font.height; i++) {
 8004194:	b357      	cbz	r7, 80041ec <ST7735_WriteString+0xa8>
        b = font.data[(ch - 32) * font.height + i];
 8004196:	3d20      	subs	r5, #32
 8004198:	fb07 f505 	mul.w	r5, r7, r5
 800419c:	f105 4800 	add.w	r8, r5, #2147483648	; 0x80000000
 80041a0:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80041a4:	eb04 0848 	add.w	r8, r4, r8, lsl #1
 80041a8:	443d      	add	r5, r7
 80041aa:	3c02      	subs	r4, #2
 80041ac:	eb04 0345 	add.w	r3, r4, r5, lsl #1
 80041b0:	9301      	str	r3, [sp, #4]
        for(j = 0; j < font.width; j++) {
 80041b2:	9f00      	ldr	r7, [sp, #0]
        b = font.data[(ch - 32) * font.height + i];
 80041b4:	f838 5f02 	ldrh.w	r5, [r8, #2]!
        for(j = 0; j < font.width; j++) {
 80041b8:	9b00      	ldr	r3, [sp, #0]
 80041ba:	b1a3      	cbz	r3, 80041e6 <ST7735_WriteString+0xa2>
 80041bc:	2400      	movs	r4, #0
            if((b << j) & 0x8000)  {
 80041be:	fa05 f304 	lsl.w	r3, r5, r4
 80041c2:	f413 4f00 	tst.w	r3, #32768	; 0x8000
                uint8_t data[] = { color >> 8, color & 0xFF };
 80041c6:	bf19      	ittee	ne
 80041c8:	f88d 601c 	strbne.w	r6, [sp, #28]
 80041cc:	f88d a01d 	strbne.w	sl, [sp, #29]
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 80041d0:	f88d 901c 	strbeq.w	r9, [sp, #28]
 80041d4:	f88d b01d 	strbeq.w	fp, [sp, #29]
                ST7735_WriteData(data, sizeof(data));
 80041d8:	2102      	movs	r1, #2
 80041da:	a807      	add	r0, sp, #28
 80041dc:	f7ff ff18 	bl	8004010 <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 80041e0:	3401      	adds	r4, #1
 80041e2:	42bc      	cmp	r4, r7
 80041e4:	d1eb      	bne.n	80041be <ST7735_WriteString+0x7a>
    for(i = 0; i < font.height; i++) {
 80041e6:	9b01      	ldr	r3, [sp, #4]
 80041e8:	4598      	cmp	r8, r3
 80041ea:	d1e3      	bne.n	80041b4 <ST7735_WriteString+0x70>
                continue;
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
        x += font.width;
 80041ec:	9b02      	ldr	r3, [sp, #8]
 80041ee:	9a00      	ldr	r2, [sp, #0]
 80041f0:	4413      	add	r3, r2
 80041f2:	b29b      	uxth	r3, r3
 80041f4:	9302      	str	r3, [sp, #8]
    while(*str) {
 80041f6:	9b03      	ldr	r3, [sp, #12]
 80041f8:	f813 5b01 	ldrb.w	r5, [r3], #1
 80041fc:	9303      	str	r3, [sp, #12]
 80041fe:	b1a5      	cbz	r5, 800422a <ST7735_WriteString+0xe6>
        if(x + font.width >= ST7735_WIDTH) {
 8004200:	9b02      	ldr	r3, [sp, #8]
 8004202:	9a00      	ldr	r2, [sp, #0]
 8004204:	4413      	add	r3, r2
 8004206:	2b7f      	cmp	r3, #127	; 0x7f
 8004208:	ddb5      	ble.n	8004176 <ST7735_WriteString+0x32>
            y += font.height;
 800420a:	9b04      	ldr	r3, [sp, #16]
 800420c:	9a05      	ldr	r2, [sp, #20]
 800420e:	4413      	add	r3, r2
 8004210:	b29b      	uxth	r3, r3
 8004212:	9304      	str	r3, [sp, #16]
            if(y + font.height >= ST7735_HEIGHT) {
 8004214:	4413      	add	r3, r2
 8004216:	2b7f      	cmp	r3, #127	; 0x7f
 8004218:	dc07      	bgt.n	800422a <ST7735_WriteString+0xe6>
            if(*str == ' ') {
 800421a:	2d20      	cmp	r5, #32
 800421c:	d002      	beq.n	8004224 <ST7735_WriteString+0xe0>
            x = 0;
 800421e:	2300      	movs	r3, #0
 8004220:	9302      	str	r3, [sp, #8]
 8004222:	e7a8      	b.n	8004176 <ST7735_WriteString+0x32>
 8004224:	2300      	movs	r3, #0
 8004226:	9302      	str	r3, [sp, #8]
 8004228:	e7e5      	b.n	80041f6 <ST7735_WriteString+0xb2>
        str++;
    }

    ST7735_Unselect();
 800422a:	f7ff ff59 	bl	80040e0 <ST7735_Unselect>
}
 800422e:	b009      	add	sp, #36	; 0x24
 8004230:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004234:	b002      	add	sp, #8
 8004236:	4770      	bx	lr

08004238 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8004238:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800423c:	b083      	sub	sp, #12
 800423e:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8004242:	287f      	cmp	r0, #127	; 0x7f
 8004244:	d845      	bhi.n	80042d2 <ST7735_FillRectangle+0x9a>
 8004246:	4604      	mov	r4, r0
 8004248:	460d      	mov	r5, r1
 800424a:	4690      	mov	r8, r2
 800424c:	461e      	mov	r6, r3
 800424e:	297f      	cmp	r1, #127	; 0x7f
 8004250:	d83f      	bhi.n	80042d2 <ST7735_FillRectangle+0x9a>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 8004252:	1883      	adds	r3, r0, r2
 8004254:	3b01      	subs	r3, #1
 8004256:	2b7f      	cmp	r3, #127	; 0x7f
 8004258:	bfc4      	itt	gt
 800425a:	f1c0 0880 	rsbgt	r8, r0, #128	; 0x80
 800425e:	fa1f f888 	uxthgt.w	r8, r8
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 8004262:	198b      	adds	r3, r1, r6
 8004264:	3b01      	subs	r3, #1
 8004266:	2b7f      	cmp	r3, #127	; 0x7f
 8004268:	bfc4      	itt	gt
 800426a:	f1c1 0680 	rsbgt	r6, r1, #128	; 0x80
 800426e:	b2b6      	uxthgt	r6, r6

    ST7735_Select();
 8004270:	f7ff feac 	bl	8003fcc <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8004274:	b2e0      	uxtb	r0, r4
 8004276:	b2e9      	uxtb	r1, r5
 8004278:	1e4b      	subs	r3, r1, #1
 800427a:	4433      	add	r3, r6
 800427c:	1e42      	subs	r2, r0, #1
 800427e:	4442      	add	r2, r8
 8004280:	b2db      	uxtb	r3, r3
 8004282:	b2d2      	uxtb	r2, r2
 8004284:	f7ff ff00 	bl	8004088 <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8004288:	0a3b      	lsrs	r3, r7, #8
 800428a:	f88d 3004 	strb.w	r3, [sp, #4]
 800428e:	f88d 7005 	strb.w	r7, [sp, #5]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8004292:	2201      	movs	r2, #1
 8004294:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004298:	480f      	ldr	r0, [pc, #60]	; (80042d8 <ST7735_FillRectangle+0xa0>)
 800429a:	f7fd fa89 	bl	80017b0 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 800429e:	b1b6      	cbz	r6, 80042ce <ST7735_FillRectangle+0x96>
        for(x = w; x > 0; x--) {
 80042a0:	46c1      	mov	r9, r8
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 80042a2:	4f0e      	ldr	r7, [pc, #56]	; (80042dc <ST7735_FillRectangle+0xa4>)
 80042a4:	e00f      	b.n	80042c6 <ST7735_FillRectangle+0x8e>
        for(x = w; x > 0; x--) {
 80042a6:	464c      	mov	r4, r9
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 80042a8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80042ac:	462b      	mov	r3, r5
 80042ae:	2202      	movs	r2, #2
 80042b0:	a901      	add	r1, sp, #4
 80042b2:	4638      	mov	r0, r7
 80042b4:	f7fe fe2d 	bl	8002f12 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 80042b8:	3c01      	subs	r4, #1
 80042ba:	b2a4      	uxth	r4, r4
 80042bc:	2c00      	cmp	r4, #0
 80042be:	d1f5      	bne.n	80042ac <ST7735_FillRectangle+0x74>
    for(y = h; y > 0; y--) {
 80042c0:	3e01      	subs	r6, #1
 80042c2:	b2b6      	uxth	r6, r6
 80042c4:	b11e      	cbz	r6, 80042ce <ST7735_FillRectangle+0x96>
        for(x = w; x > 0; x--) {
 80042c6:	f1b8 0f00 	cmp.w	r8, #0
 80042ca:	d1ec      	bne.n	80042a6 <ST7735_FillRectangle+0x6e>
 80042cc:	e7f8      	b.n	80042c0 <ST7735_FillRectangle+0x88>
        }
    }

    ST7735_Unselect();
 80042ce:	f7ff ff07 	bl	80040e0 <ST7735_Unselect>
}
 80042d2:	b003      	add	sp, #12
 80042d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80042d8:	40010c00 	.word	0x40010c00
 80042dc:	200008bc 	.word	0x200008bc

080042e0 <ST7735_FillScreen>:
//    if((x2 >= ST7735_WIDTH) || (y2 >= ST7735_HEIGHT)) return;
    ST7735_DrawPixel(x,ST7735_WIDTH-y-1,color);
    ST7735_DrawPixel(x2,ST7735_WIDTH-y2-1,color);
}

void ST7735_FillScreen(uint16_t color) {
 80042e0:	b500      	push	{lr}
 80042e2:	b083      	sub	sp, #12
    ST7735_FillRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 80042e4:	9000      	str	r0, [sp, #0]
 80042e6:	2380      	movs	r3, #128	; 0x80
 80042e8:	461a      	mov	r2, r3
 80042ea:	2100      	movs	r1, #0
 80042ec:	4608      	mov	r0, r1
 80042ee:	f7ff ffa3 	bl	8004238 <ST7735_FillRectangle>
}
 80042f2:	b003      	add	sp, #12
 80042f4:	f85d fb04 	ldr.w	pc, [sp], #4

080042f8 <ST7735_setColor>:

uint16_t tmpcolor=0;
void ST7735_setColor(uint16_t d){
	tmpcolor=d;
 80042f8:	4b01      	ldr	r3, [pc, #4]	; (8004300 <ST7735_setColor+0x8>)
 80042fa:	8018      	strh	r0, [r3, #0]
}
 80042fc:	4770      	bx	lr
 80042fe:	bf00      	nop
 8004300:	2000063c 	.word	0x2000063c

08004304 <ST7735_print>:


void ST7735_print(char* p_txt,uint16_t x, uint16_t y){
 8004304:	b510      	push	{r4, lr}
 8004306:	b084      	sub	sp, #16
 8004308:	460c      	mov	r4, r1
 800430a:	4611      	mov	r1, r2
//vvoid ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
	ST7735_WriteString(x, y, p_txt, Font_7x10, tmpcolor, ST7735_BLACK);
 800430c:	4b07      	ldr	r3, [pc, #28]	; (800432c <ST7735_print+0x28>)
 800430e:	2200      	movs	r2, #0
 8004310:	9202      	str	r2, [sp, #8]
 8004312:	4a07      	ldr	r2, [pc, #28]	; (8004330 <ST7735_print+0x2c>)
 8004314:	8812      	ldrh	r2, [r2, #0]
 8004316:	9201      	str	r2, [sp, #4]
 8004318:	685a      	ldr	r2, [r3, #4]
 800431a:	9200      	str	r2, [sp, #0]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4602      	mov	r2, r0
 8004320:	4620      	mov	r0, r4
 8004322:	f7ff ff0f 	bl	8004144 <ST7735_WriteString>
}
 8004326:	b004      	add	sp, #16
 8004328:	bd10      	pop	{r4, pc}
 800432a:	bf00      	nop
 800432c:	20000018 	.word	0x20000018
 8004330:	2000063c 	.word	0x2000063c

08004334 <_Z12digitalWritecb>:
#include "hal_ardu.h"


void digitalWrite(char n, bool PinState){
 8004334:	b508      	push	{r3, lr}
		switch (n){
 8004336:	2819      	cmp	r0, #25
 8004338:	d008      	beq.n	800434c <_Z12digitalWritecb+0x18>
 800433a:	281d      	cmp	r0, #29
 800433c:	d105      	bne.n	800434a <_Z12digitalWritecb+0x16>
		case 29:
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8, (GPIO_PinState) PinState);
 800433e:	460a      	mov	r2, r1
 8004340:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004344:	4805      	ldr	r0, [pc, #20]	; (800435c <_Z12digitalWritecb+0x28>)
 8004346:	f7fd fa33 	bl	80017b0 <HAL_GPIO_WritePin>
			break;
		default:
//#error !
			break;
		}
 }
 800434a:	bd08      	pop	{r3, pc}
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_12, (GPIO_PinState) PinState);
 800434c:	460a      	mov	r2, r1
 800434e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004352:	4803      	ldr	r0, [pc, #12]	; (8004360 <_Z12digitalWritecb+0x2c>)
 8004354:	f7fd fa2c 	bl	80017b0 <HAL_GPIO_WritePin>
 }
 8004358:	e7f7      	b.n	800434a <_Z12digitalWritecb+0x16>
 800435a:	bf00      	nop
 800435c:	40010800 	.word	0x40010800
 8004360:	40010c00 	.word	0x40010c00

08004364 <_Z17delayMicrosecondsi>:
//		}
 }

void delayMicroseconds(int n){
	int m=n*64;
	while (m) m-=1;
 8004364:	0180      	lsls	r0, r0, #6
 8004366:	d001      	beq.n	800436c <_Z17delayMicrosecondsi+0x8>
 8004368:	3801      	subs	r0, #1
 800436a:	d1fd      	bne.n	8004368 <_Z17delayMicrosecondsi+0x4>
}
 800436c:	4770      	bx	lr

0800436e <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800436e:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 8004372:	b183      	cbz	r3, 8004396 <USBD_CDC_EP0_RxReady+0x28>
{
 8004374:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004376:	f8d0 42b8 	ldr.w	r4, [r0, #696]	; 0x2b8
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800437a:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 800437e:	28ff      	cmp	r0, #255	; 0xff
 8004380:	d007      	beq.n	8004392 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 8004388:	4621      	mov	r1, r4
 800438a:	4798      	blx	r3
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 800438c:	23ff      	movs	r3, #255	; 0xff
 800438e:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }
  return USBD_OK;
}
 8004392:	2000      	movs	r0, #0
 8004394:	bd10      	pop	{r4, pc}
 8004396:	2000      	movs	r0, #0
 8004398:	4770      	bx	lr
	...

0800439c <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800439c:	2343      	movs	r3, #67	; 0x43
 800439e:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 80043a0:	4800      	ldr	r0, [pc, #0]	; (80043a4 <USBD_CDC_GetFSCfgDesc+0x8>)
 80043a2:	4770      	bx	lr
 80043a4:	20000058 	.word	0x20000058

080043a8 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80043a8:	2343      	movs	r3, #67	; 0x43
 80043aa:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 80043ac:	4800      	ldr	r0, [pc, #0]	; (80043b0 <USBD_CDC_GetHSCfgDesc+0x8>)
 80043ae:	4770      	bx	lr
 80043b0:	2000009c 	.word	0x2000009c

080043b4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80043b4:	2343      	movs	r3, #67	; 0x43
 80043b6:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 80043b8:	4800      	ldr	r0, [pc, #0]	; (80043bc <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 80043ba:	4770      	bx	lr
 80043bc:	200000ec 	.word	0x200000ec

080043c0 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80043c0:	230a      	movs	r3, #10
 80043c2:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 80043c4:	4800      	ldr	r0, [pc, #0]	; (80043c8 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 80043c6:	4770      	bx	lr
 80043c8:	200000e0 	.word	0x200000e0

080043cc <USBD_CDC_DataOut>:
{
 80043cc:	b538      	push	{r3, r4, r5, lr}
 80043ce:	4604      	mov	r4, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80043d0:	f8d0 52b8 	ldr.w	r5, [r0, #696]	; 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80043d4:	f000 ffc6 	bl	8005364 <USBD_LL_GetRxDataSize>
 80043d8:	f8c5 020c 	str.w	r0, [r5, #524]	; 0x20c
  if (pdev->pClassData != NULL)
 80043dc:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 80043e0:	b14b      	cbz	r3, 80043f6 <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80043e2:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 80043e6:	68db      	ldr	r3, [r3, #12]
 80043e8:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 80043ec:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 80043f0:	4798      	blx	r3
    return USBD_OK;
 80043f2:	2000      	movs	r0, #0
}
 80043f4:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 80043f6:	2002      	movs	r0, #2
 80043f8:	e7fc      	b.n	80043f4 <USBD_CDC_DataOut+0x28>

080043fa <USBD_CDC_DataIn>:
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80043fa:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
  if (pdev->pClassData != NULL)
 80043fe:	b312      	cbz	r2, 8004446 <USBD_CDC_DataIn+0x4c>
{
 8004400:	b538      	push	{r3, r4, r5, lr}
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8004402:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8004406:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800440a:	69db      	ldr	r3, [r3, #28]
 800440c:	b15b      	cbz	r3, 8004426 <USBD_CDC_DataIn+0x2c>
 800440e:	f8d0 42c0 	ldr.w	r4, [r0, #704]	; 0x2c0
 8004412:	eb01 0581 	add.w	r5, r1, r1, lsl #2
 8004416:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800441a:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 800441c:	fbb3 f4f5 	udiv	r4, r3, r5
 8004420:	fb05 3314 	mls	r3, r5, r4, r3
 8004424:	b11b      	cbz	r3, 800442e <USBD_CDC_DataIn+0x34>
      hcdc->TxState = 0U;
 8004426:	2000      	movs	r0, #0
 8004428:	f8c2 0214 	str.w	r0, [r2, #532]	; 0x214
}
 800442c:	bd38      	pop	{r3, r4, r5, pc}
      pdev->ep_in[epnum].total_length = 0U;
 800442e:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8004432:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8004436:	2400      	movs	r4, #0
 8004438:	61dc      	str	r4, [r3, #28]
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800443a:	4623      	mov	r3, r4
 800443c:	4622      	mov	r2, r4
 800443e:	f000 ff81 	bl	8005344 <USBD_LL_Transmit>
    return USBD_OK;
 8004442:	4620      	mov	r0, r4
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8004444:	e7f2      	b.n	800442c <USBD_CDC_DataIn+0x32>
    return USBD_FAIL;
 8004446:	2002      	movs	r0, #2
}
 8004448:	4770      	bx	lr

0800444a <USBD_CDC_Setup>:
{
 800444a:	b570      	push	{r4, r5, r6, lr}
 800444c:	b082      	sub	sp, #8
 800444e:	4605      	mov	r5, r0
 8004450:	460c      	mov	r4, r1
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004452:	f8d0 62b8 	ldr.w	r6, [r0, #696]	; 0x2b8
  uint8_t ifalt = 0U;
 8004456:	2300      	movs	r3, #0
 8004458:	f88d 3007 	strb.w	r3, [sp, #7]
  uint16_t status_info = 0U;
 800445c:	f8ad 3004 	strh.w	r3, [sp, #4]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004460:	780b      	ldrb	r3, [r1, #0]
 8004462:	f013 0260 	ands.w	r2, r3, #96	; 0x60
 8004466:	d027      	beq.n	80044b8 <USBD_CDC_Setup+0x6e>
 8004468:	2a20      	cmp	r2, #32
 800446a:	d156      	bne.n	800451a <USBD_CDC_Setup+0xd0>
      if (req->wLength)
 800446c:	88ca      	ldrh	r2, [r1, #6]
 800446e:	b93a      	cbnz	r2, 8004480 <USBD_CDC_Setup+0x36>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004470:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 8004474:	689b      	ldr	r3, [r3, #8]
 8004476:	2200      	movs	r2, #0
 8004478:	7848      	ldrb	r0, [r1, #1]
 800447a:	4798      	blx	r3
  uint8_t ret = USBD_OK;
 800447c:	2000      	movs	r0, #0
 800447e:	e04f      	b.n	8004520 <USBD_CDC_Setup+0xd6>
        if (req->bmRequest & 0x80U)
 8004480:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004484:	d00c      	beq.n	80044a0 <USBD_CDC_Setup+0x56>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004486:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	4631      	mov	r1, r6
 800448e:	7860      	ldrb	r0, [r4, #1]
 8004490:	4798      	blx	r3
          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8004492:	88e2      	ldrh	r2, [r4, #6]
 8004494:	4631      	mov	r1, r6
 8004496:	4628      	mov	r0, r5
 8004498:	f000 fd4c 	bl	8004f34 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 800449c:	2000      	movs	r0, #0
 800449e:	e03f      	b.n	8004520 <USBD_CDC_Setup+0xd6>
          hcdc->CmdOpCode = req->bRequest;
 80044a0:	784b      	ldrb	r3, [r1, #1]
 80044a2:	f886 3200 	strb.w	r3, [r6, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80044a6:	88cb      	ldrh	r3, [r1, #6]
 80044a8:	f886 3201 	strb.w	r3, [r6, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80044ac:	88ca      	ldrh	r2, [r1, #6]
 80044ae:	4631      	mov	r1, r6
 80044b0:	f000 fd55 	bl	8004f5e <USBD_CtlPrepareRx>
  uint8_t ret = USBD_OK;
 80044b4:	2000      	movs	r0, #0
 80044b6:	e033      	b.n	8004520 <USBD_CDC_Setup+0xd6>
      switch (req->bRequest)
 80044b8:	784b      	ldrb	r3, [r1, #1]
 80044ba:	2b0a      	cmp	r3, #10
 80044bc:	d014      	beq.n	80044e8 <USBD_CDC_Setup+0x9e>
 80044be:	2b0b      	cmp	r3, #11
 80044c0:	d021      	beq.n	8004506 <USBD_CDC_Setup+0xbc>
 80044c2:	b11b      	cbz	r3, 80044cc <USBD_CDC_Setup+0x82>
          USBD_CtlError(pdev, req);
 80044c4:	f000 fa47 	bl	8004956 <USBD_CtlError>
          ret = USBD_FAIL;
 80044c8:	2002      	movs	r0, #2
          break;
 80044ca:	e029      	b.n	8004520 <USBD_CDC_Setup+0xd6>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80044cc:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80044d0:	2b03      	cmp	r3, #3
 80044d2:	d105      	bne.n	80044e0 <USBD_CDC_Setup+0x96>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80044d4:	2202      	movs	r2, #2
 80044d6:	a901      	add	r1, sp, #4
 80044d8:	f000 fd2c 	bl	8004f34 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 80044dc:	2000      	movs	r0, #0
 80044de:	e01f      	b.n	8004520 <USBD_CDC_Setup+0xd6>
            USBD_CtlError(pdev, req);
 80044e0:	f000 fa39 	bl	8004956 <USBD_CtlError>
            ret = USBD_FAIL;
 80044e4:	2002      	movs	r0, #2
 80044e6:	e01b      	b.n	8004520 <USBD_CDC_Setup+0xd6>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80044e8:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80044ec:	2b03      	cmp	r3, #3
 80044ee:	d106      	bne.n	80044fe <USBD_CDC_Setup+0xb4>
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80044f0:	2201      	movs	r2, #1
 80044f2:	f10d 0107 	add.w	r1, sp, #7
 80044f6:	f000 fd1d 	bl	8004f34 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 80044fa:	2000      	movs	r0, #0
 80044fc:	e010      	b.n	8004520 <USBD_CDC_Setup+0xd6>
            USBD_CtlError(pdev, req);
 80044fe:	f000 fa2a 	bl	8004956 <USBD_CtlError>
            ret = USBD_FAIL;
 8004502:	2002      	movs	r0, #2
 8004504:	e00c      	b.n	8004520 <USBD_CDC_Setup+0xd6>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004506:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800450a:	2b03      	cmp	r3, #3
 800450c:	d101      	bne.n	8004512 <USBD_CDC_Setup+0xc8>
  uint8_t ret = USBD_OK;
 800450e:	2000      	movs	r0, #0
 8004510:	e006      	b.n	8004520 <USBD_CDC_Setup+0xd6>
            USBD_CtlError(pdev, req);
 8004512:	f000 fa20 	bl	8004956 <USBD_CtlError>
            ret = USBD_FAIL;
 8004516:	2002      	movs	r0, #2
 8004518:	e002      	b.n	8004520 <USBD_CDC_Setup+0xd6>
      USBD_CtlError(pdev, req);
 800451a:	f000 fa1c 	bl	8004956 <USBD_CtlError>
      ret = USBD_FAIL;
 800451e:	2002      	movs	r0, #2
}
 8004520:	b002      	add	sp, #8
 8004522:	bd70      	pop	{r4, r5, r6, pc}

08004524 <USBD_CDC_DeInit>:
{
 8004524:	b538      	push	{r3, r4, r5, lr}
 8004526:	4604      	mov	r4, r0
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8004528:	2181      	movs	r1, #129	; 0x81
 800452a:	f000 fed4 	bl	80052d6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800452e:	2500      	movs	r5, #0
 8004530:	62e5      	str	r5, [r4, #44]	; 0x2c
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8004532:	2101      	movs	r1, #1
 8004534:	4620      	mov	r0, r4
 8004536:	f000 fece 	bl	80052d6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800453a:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800453e:	2182      	movs	r1, #130	; 0x82
 8004540:	4620      	mov	r0, r4
 8004542:	f000 fec8 	bl	80052d6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8004546:	6425      	str	r5, [r4, #64]	; 0x40
  if (pdev->pClassData != NULL)
 8004548:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 800454c:	b14b      	cbz	r3, 8004562 <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800454e:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8004556:	f8d4 02b8 	ldr.w	r0, [r4, #696]	; 0x2b8
 800455a:	f000 ff0d 	bl	8005378 <USBD_static_free>
    pdev->pClassData = NULL;
 800455e:	f8c4 52b8 	str.w	r5, [r4, #696]	; 0x2b8
}
 8004562:	2000      	movs	r0, #0
 8004564:	bd38      	pop	{r3, r4, r5, pc}

08004566 <USBD_CDC_Init>:
{
 8004566:	b538      	push	{r3, r4, r5, lr}
 8004568:	4604      	mov	r4, r0
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800456a:	7c03      	ldrb	r3, [r0, #16]
 800456c:	bba3      	cbnz	r3, 80045d8 <USBD_CDC_Init+0x72>
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800456e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004572:	2202      	movs	r2, #2
 8004574:	2181      	movs	r1, #129	; 0x81
 8004576:	f000 fea3 	bl	80052c0 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800457a:	2501      	movs	r5, #1
 800457c:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800457e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004582:	2202      	movs	r2, #2
 8004584:	4629      	mov	r1, r5
 8004586:	4620      	mov	r0, r4
 8004588:	f000 fe9a 	bl	80052c0 <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800458c:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004590:	2308      	movs	r3, #8
 8004592:	2203      	movs	r2, #3
 8004594:	2182      	movs	r1, #130	; 0x82
 8004596:	4620      	mov	r0, r4
 8004598:	f000 fe92 	bl	80052c0 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800459c:	2301      	movs	r3, #1
 800459e:	6423      	str	r3, [r4, #64]	; 0x40
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80045a0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80045a4:	f000 fee4 	bl	8005370 <USBD_static_malloc>
 80045a8:	4605      	mov	r5, r0
 80045aa:	f8c4 02b8 	str.w	r0, [r4, #696]	; 0x2b8
  if (pdev->pClassData == NULL)
 80045ae:	b368      	cbz	r0, 800460c <USBD_CDC_Init+0xa6>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80045b0:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4798      	blx	r3
    hcdc->TxState = 0U;
 80045b8:	2300      	movs	r3, #0
 80045ba:	f8c5 3214 	str.w	r3, [r5, #532]	; 0x214
    hcdc->RxState = 0U;
 80045be:	f8c5 3218 	str.w	r3, [r5, #536]	; 0x218
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80045c2:	7c23      	ldrb	r3, [r4, #16]
 80045c4:	b1c3      	cbz	r3, 80045f8 <USBD_CDC_Init+0x92>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80045c6:	2340      	movs	r3, #64	; 0x40
 80045c8:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 80045cc:	2101      	movs	r1, #1
 80045ce:	4620      	mov	r0, r4
 80045d0:	f000 fec0 	bl	8005354 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 80045d4:	2000      	movs	r0, #0
}
 80045d6:	bd38      	pop	{r3, r4, r5, pc}
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80045d8:	2340      	movs	r3, #64	; 0x40
 80045da:	2202      	movs	r2, #2
 80045dc:	2181      	movs	r1, #129	; 0x81
 80045de:	f000 fe6f 	bl	80052c0 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80045e2:	2501      	movs	r5, #1
 80045e4:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80045e6:	2340      	movs	r3, #64	; 0x40
 80045e8:	2202      	movs	r2, #2
 80045ea:	4629      	mov	r1, r5
 80045ec:	4620      	mov	r0, r4
 80045ee:	f000 fe67 	bl	80052c0 <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80045f2:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
 80045f6:	e7cb      	b.n	8004590 <USBD_CDC_Init+0x2a>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80045f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80045fc:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 8004600:	2101      	movs	r1, #1
 8004602:	4620      	mov	r0, r4
 8004604:	f000 fea6 	bl	8005354 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 8004608:	2000      	movs	r0, #0
 800460a:	e7e4      	b.n	80045d6 <USBD_CDC_Init+0x70>
    ret = 1U;
 800460c:	2001      	movs	r0, #1
 800460e:	e7e2      	b.n	80045d6 <USBD_CDC_Init+0x70>

08004610 <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;

  if (fops != NULL)
 8004610:	b119      	cbz	r1, 800461a <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData = fops;
 8004612:	f8c0 12bc 	str.w	r1, [r0, #700]	; 0x2bc
    ret = USBD_OK;
 8004616:	2000      	movs	r0, #0
 8004618:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 800461a:	2002      	movs	r0, #2
  }

  return ret;
}
 800461c:	4770      	bx	lr

0800461e <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800461e:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  hcdc->TxBuffer = pbuff;
 8004622:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8004626:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
}
 800462a:	2000      	movs	r0, #0
 800462c:	4770      	bx	lr

0800462e <USBD_CDC_SetRxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800462e:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  hcdc->RxBuffer = pbuff;
 8004632:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204

  return USBD_OK;
}
 8004636:	2000      	movs	r0, #0
 8004638:	4770      	bx	lr

0800463a <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800463a:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800463e:	b19a      	cbz	r2, 8004668 <USBD_CDC_ReceivePacket+0x2e>
{
 8004640:	b508      	push	{r3, lr}
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004642:	7c03      	ldrb	r3, [r0, #16]
 8004644:	b13b      	cbz	r3, 8004656 <USBD_CDC_ReceivePacket+0x1c>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8004646:	2340      	movs	r3, #64	; 0x40
 8004648:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 800464c:	2101      	movs	r1, #1
 800464e:	f000 fe81 	bl	8005354 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8004652:	2000      	movs	r0, #0
  }
  else
  {
    return USBD_FAIL;
  }
}
 8004654:	bd08      	pop	{r3, pc}
      USBD_LL_PrepareReceive(pdev,
 8004656:	f44f 7300 	mov.w	r3, #512	; 0x200
 800465a:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 800465e:	2101      	movs	r1, #1
 8004660:	f000 fe78 	bl	8005354 <USBD_LL_PrepareReceive>
    return USBD_OK;
 8004664:	2000      	movs	r0, #0
 8004666:	e7f5      	b.n	8004654 <USBD_CDC_ReceivePacket+0x1a>
    return USBD_FAIL;
 8004668:	2002      	movs	r0, #2
}
 800466a:	4770      	bx	lr

0800466c <USBD_Init>:
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800466c:	b198      	cbz	r0, 8004696 <USBD_Init+0x2a>
{
 800466e:	b508      	push	{r3, lr}
 8004670:	4603      	mov	r3, r0
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8004672:	f8d0 02b4 	ldr.w	r0, [r0, #692]	; 0x2b4
 8004676:	b110      	cbz	r0, 800467e <USBD_Init+0x12>
  {
    pdev->pClass = NULL;
 8004678:	2000      	movs	r0, #0
 800467a:	f8c3 02b4 	str.w	r0, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800467e:	b109      	cbz	r1, 8004684 <USBD_Init+0x18>
  {
    pdev->pDesc = pdesc;
 8004680:	f8c3 12b0 	str.w	r1, [r3, #688]	; 0x2b0
 8004684:	4618      	mov	r0, r3
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004686:	2301      	movs	r3, #1
 8004688:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  pdev->id = id;
 800468c:	7002      	strb	r2, [r0, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800468e:	f000 fdcd 	bl	800522c <USBD_LL_Init>

  return USBD_OK;
 8004692:	2000      	movs	r0, #0
}
 8004694:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 8004696:	2002      	movs	r0, #2
}
 8004698:	4770      	bx	lr

0800469a <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef status = USBD_OK;
  if (pclass != NULL)
 800469a:	b119      	cbz	r1, 80046a4 <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800469c:	f8c0 12b4 	str.w	r1, [r0, #692]	; 0x2b4
    status = USBD_OK;
 80046a0:	2000      	movs	r0, #0
 80046a2:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80046a4:	2002      	movs	r0, #2
  }

  return status;
}
 80046a6:	4770      	bx	lr

080046a8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80046a8:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80046aa:	f000 fe01 	bl	80052b0 <USBD_LL_Start>

  return USBD_OK;
}
 80046ae:	2000      	movs	r0, #0
 80046b0:	bd08      	pop	{r3, pc}

080046b2 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80046b2:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 80046b4:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80046b8:	b133      	cbz	r3, 80046c8 <USBD_SetClassConfig+0x16>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4798      	blx	r3
 80046be:	2800      	cmp	r0, #0
    {
      ret = USBD_OK;
 80046c0:	bf14      	ite	ne
 80046c2:	2002      	movne	r0, #2
 80046c4:	2000      	moveq	r0, #0
    }
  }

  return ret;
}
 80046c6:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef ret = USBD_FAIL;
 80046c8:	2002      	movs	r0, #2
 80046ca:	e7fc      	b.n	80046c6 <USBD_SetClassConfig+0x14>

080046cc <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80046cc:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80046ce:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	4798      	blx	r3

  return USBD_OK;
}
 80046d6:	2000      	movs	r0, #0
 80046d8:	bd08      	pop	{r3, pc}

080046da <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80046da:	b538      	push	{r3, r4, r5, lr}
 80046dc:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80046de:	f500 752a 	add.w	r5, r0, #680	; 0x2a8
 80046e2:	4628      	mov	r0, r5
 80046e4:	f000 f923 	bl	800492e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80046e8:	2301      	movs	r3, #1
 80046ea:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80046ee:	f8b4 32ae 	ldrh.w	r3, [r4, #686]	; 0x2ae
 80046f2:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80046f6:	f894 12a8 	ldrb.w	r1, [r4, #680]	; 0x2a8
 80046fa:	f001 031f 	and.w	r3, r1, #31
 80046fe:	2b01      	cmp	r3, #1
 8004700:	d00e      	beq.n	8004720 <USBD_LL_SetupStage+0x46>
 8004702:	b13b      	cbz	r3, 8004714 <USBD_LL_SetupStage+0x3a>
 8004704:	2b02      	cmp	r3, #2
 8004706:	d010      	beq.n	800472a <USBD_LL_SetupStage+0x50>
    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004708:	f001 0180 	and.w	r1, r1, #128	; 0x80
 800470c:	4620      	mov	r0, r4
 800470e:	f000 fdea 	bl	80052e6 <USBD_LL_StallEP>
      break;
 8004712:	e003      	b.n	800471c <USBD_LL_SetupStage+0x42>
      USBD_StdDevReq(pdev, &pdev->request);
 8004714:	4629      	mov	r1, r5
 8004716:	4620      	mov	r0, r4
 8004718:	f000 f928 	bl	800496c <USBD_StdDevReq>
  }

  return USBD_OK;
}
 800471c:	2000      	movs	r0, #0
 800471e:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdItfReq(pdev, &pdev->request);
 8004720:	4629      	mov	r1, r5
 8004722:	4620      	mov	r0, r4
 8004724:	f000 fadc 	bl	8004ce0 <USBD_StdItfReq>
      break;
 8004728:	e7f8      	b.n	800471c <USBD_LL_SetupStage+0x42>
      USBD_StdEPReq(pdev, &pdev->request);
 800472a:	4629      	mov	r1, r5
 800472c:	4620      	mov	r0, r4
 800472e:	f000 fb07 	bl	8004d40 <USBD_StdEPReq>
      break;
 8004732:	e7f3      	b.n	800471c <USBD_LL_SetupStage+0x42>

08004734 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8004734:	b538      	push	{r3, r4, r5, lr}
 8004736:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8004738:	bb99      	cbnz	r1, 80047a2 <USBD_LL_DataOutStage+0x6e>
 800473a:	4610      	mov	r0, r2
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800473c:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
 8004740:	2b03      	cmp	r3, #3
 8004742:	d003      	beq.n	800474c <USBD_LL_DataOutStage+0x18>
        USBD_CtlSendStatus(pdev);
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8004744:	2b05      	cmp	r3, #5
 8004746:	d023      	beq.n	8004790 <USBD_LL_DataOutStage+0x5c>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8004748:	2000      	movs	r0, #0
 800474a:	e036      	b.n	80047ba <USBD_LL_DataOutStage+0x86>
      if (pep->rem_length > pep->maxpacket)
 800474c:	f8d4 3160 	ldr.w	r3, [r4, #352]	; 0x160
 8004750:	f8d4 2164 	ldr.w	r2, [r4, #356]	; 0x164
 8004754:	4293      	cmp	r3, r2
 8004756:	d90c      	bls.n	8004772 <USBD_LL_DataOutStage+0x3e>
        pep->rem_length -= pep->maxpacket;
 8004758:	1a9b      	subs	r3, r3, r2
 800475a:	f8c4 3160 	str.w	r3, [r4, #352]	; 0x160
        USBD_CtlContinueRx(pdev, pdata,
 800475e:	429a      	cmp	r2, r3
 8004760:	bf8c      	ite	hi
 8004762:	b29a      	uxthhi	r2, r3
 8004764:	b292      	uxthls	r2, r2
 8004766:	4601      	mov	r1, r0
 8004768:	4620      	mov	r0, r4
 800476a:	f000 fc07 	bl	8004f7c <USBD_CtlContinueRx>
  return USBD_OK;
 800476e:	2000      	movs	r0, #0
 8004770:	e023      	b.n	80047ba <USBD_LL_DataOutStage+0x86>
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8004772:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8004776:	691b      	ldr	r3, [r3, #16]
 8004778:	b12b      	cbz	r3, 8004786 <USBD_LL_DataOutStage+0x52>
 800477a:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
 800477e:	2a03      	cmp	r2, #3
 8004780:	d101      	bne.n	8004786 <USBD_LL_DataOutStage+0x52>
          pdev->pClass->EP0_RxReady(pdev);
 8004782:	4620      	mov	r0, r4
 8004784:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8004786:	4620      	mov	r0, r4
 8004788:	f000 fc00 	bl	8004f8c <USBD_CtlSendStatus>
  return USBD_OK;
 800478c:	2000      	movs	r0, #0
 800478e:	e014      	b.n	80047ba <USBD_LL_DataOutStage+0x86>
        pdev->ep0_state = USBD_EP0_IDLE;
 8004790:	2500      	movs	r5, #0
 8004792:	f8c4 5294 	str.w	r5, [r4, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8004796:	4629      	mov	r1, r5
 8004798:	4620      	mov	r0, r4
 800479a:	f000 fda4 	bl	80052e6 <USBD_LL_StallEP>
  return USBD_OK;
 800479e:	4628      	mov	r0, r5
 80047a0:	e00b      	b.n	80047ba <USBD_LL_DataOutStage+0x86>
 80047a2:	460a      	mov	r2, r1
  else if ((pdev->pClass->DataOut != NULL) &&
 80047a4:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80047a8:	699b      	ldr	r3, [r3, #24]
 80047aa:	b13b      	cbz	r3, 80047bc <USBD_LL_DataOutStage+0x88>
 80047ac:	f890 129c 	ldrb.w	r1, [r0, #668]	; 0x29c
 80047b0:	2903      	cmp	r1, #3
 80047b2:	d105      	bne.n	80047c0 <USBD_LL_DataOutStage+0x8c>
    pdev->pClass->DataOut(pdev, epnum);
 80047b4:	4611      	mov	r1, r2
 80047b6:	4798      	blx	r3
  return USBD_OK;
 80047b8:	2000      	movs	r0, #0
}
 80047ba:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 80047bc:	2002      	movs	r0, #2
 80047be:	e7fc      	b.n	80047ba <USBD_LL_DataOutStage+0x86>
 80047c0:	2002      	movs	r0, #2
 80047c2:	e7fa      	b.n	80047ba <USBD_LL_DataOutStage+0x86>

080047c4 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80047c4:	b510      	push	{r4, lr}
 80047c6:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80047c8:	2900      	cmp	r1, #0
 80047ca:	d153      	bne.n	8004874 <USBD_LL_DataInStage+0xb0>
 80047cc:	4610      	mov	r0, r2
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80047ce:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
 80047d2:	2b02      	cmp	r3, #2
 80047d4:	d00c      	beq.n	80047f0 <USBD_LL_DataInStage+0x2c>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80047d6:	f033 0304 	bics.w	r3, r3, #4
 80047da:	d103      	bne.n	80047e4 <USBD_LL_DataInStage+0x20>
          (pdev->ep0_state == USBD_EP0_IDLE))
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80047dc:	2180      	movs	r1, #128	; 0x80
 80047de:	4620      	mov	r0, r4
 80047e0:	f000 fd81 	bl	80052e6 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80047e4:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	d03f      	beq.n	800486c <USBD_LL_DataInStage+0xa8>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 80047ec:	2000      	movs	r0, #0
 80047ee:	e04d      	b.n	800488c <USBD_LL_DataInStage+0xc8>
      if (pep->rem_length > pep->maxpacket)
 80047f0:	6a23      	ldr	r3, [r4, #32]
 80047f2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d81d      	bhi.n	8004834 <USBD_LL_DataInStage+0x70>
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80047f8:	69e1      	ldr	r1, [r4, #28]
 80047fa:	fbb1 f3f2 	udiv	r3, r1, r2
 80047fe:	fb02 1313 	mls	r3, r2, r3, r1
 8004802:	b92b      	cbnz	r3, 8004810 <USBD_LL_DataInStage+0x4c>
 8004804:	428a      	cmp	r2, r1
 8004806:	d803      	bhi.n	8004810 <USBD_LL_DataInStage+0x4c>
            (pep->total_length >= pep->maxpacket) &&
 8004808:	f8d4 3298 	ldr.w	r3, [r4, #664]	; 0x298
 800480c:	4299      	cmp	r1, r3
 800480e:	d31f      	bcc.n	8004850 <USBD_LL_DataInStage+0x8c>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8004810:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8004814:	68db      	ldr	r3, [r3, #12]
 8004816:	b12b      	cbz	r3, 8004824 <USBD_LL_DataInStage+0x60>
 8004818:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
 800481c:	2a03      	cmp	r2, #3
 800481e:	d101      	bne.n	8004824 <USBD_LL_DataInStage+0x60>
            pdev->pClass->EP0_TxSent(pdev);
 8004820:	4620      	mov	r0, r4
 8004822:	4798      	blx	r3
          USBD_LL_StallEP(pdev, 0x80U);
 8004824:	2180      	movs	r1, #128	; 0x80
 8004826:	4620      	mov	r0, r4
 8004828:	f000 fd5d 	bl	80052e6 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800482c:	4620      	mov	r0, r4
 800482e:	f000 fbb8 	bl	8004fa2 <USBD_CtlReceiveStatus>
 8004832:	e7d7      	b.n	80047e4 <USBD_LL_DataInStage+0x20>
        pep->rem_length -= pep->maxpacket;
 8004834:	1a9a      	subs	r2, r3, r2
 8004836:	6222      	str	r2, [r4, #32]
        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8004838:	b292      	uxth	r2, r2
 800483a:	4601      	mov	r1, r0
 800483c:	4620      	mov	r0, r4
 800483e:	f000 fb86 	bl	8004f4e <USBD_CtlContinueSendData>
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004842:	2300      	movs	r3, #0
 8004844:	461a      	mov	r2, r3
 8004846:	4619      	mov	r1, r3
 8004848:	4620      	mov	r0, r4
 800484a:	f000 fd83 	bl	8005354 <USBD_LL_PrepareReceive>
 800484e:	e7c9      	b.n	80047e4 <USBD_LL_DataInStage+0x20>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8004850:	2200      	movs	r2, #0
 8004852:	4611      	mov	r1, r2
 8004854:	4620      	mov	r0, r4
 8004856:	f000 fb7a 	bl	8004f4e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800485a:	2100      	movs	r1, #0
 800485c:	f8c4 1298 	str.w	r1, [r4, #664]	; 0x298
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004860:	460b      	mov	r3, r1
 8004862:	460a      	mov	r2, r1
 8004864:	4620      	mov	r0, r4
 8004866:	f000 fd75 	bl	8005354 <USBD_LL_PrepareReceive>
 800486a:	e7bb      	b.n	80047e4 <USBD_LL_DataInStage+0x20>
      pdev->dev_test_mode = 0U;
 800486c:	2000      	movs	r0, #0
 800486e:	f884 02a0 	strb.w	r0, [r4, #672]	; 0x2a0
 8004872:	e00b      	b.n	800488c <USBD_LL_DataInStage+0xc8>
 8004874:	460a      	mov	r2, r1
  else if ((pdev->pClass->DataIn != NULL) &&
 8004876:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800487a:	695b      	ldr	r3, [r3, #20]
 800487c:	b13b      	cbz	r3, 800488e <USBD_LL_DataInStage+0xca>
 800487e:	f890 129c 	ldrb.w	r1, [r0, #668]	; 0x29c
 8004882:	2903      	cmp	r1, #3
 8004884:	d105      	bne.n	8004892 <USBD_LL_DataInStage+0xce>
    pdev->pClass->DataIn(pdev, epnum);
 8004886:	4611      	mov	r1, r2
 8004888:	4798      	blx	r3
  return USBD_OK;
 800488a:	2000      	movs	r0, #0
}
 800488c:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 800488e:	2002      	movs	r0, #2
 8004890:	e7fc      	b.n	800488c <USBD_LL_DataInStage+0xc8>
 8004892:	2002      	movs	r0, #2
 8004894:	e7fa      	b.n	800488c <USBD_LL_DataInStage+0xc8>

08004896 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8004896:	b570      	push	{r4, r5, r6, lr}
 8004898:	4604      	mov	r4, r0
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800489a:	2340      	movs	r3, #64	; 0x40
 800489c:	2200      	movs	r2, #0
 800489e:	4611      	mov	r1, r2
 80048a0:	f000 fd0e 	bl	80052c0 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80048a4:	2501      	movs	r5, #1
 80048a6:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80048aa:	2640      	movs	r6, #64	; 0x40
 80048ac:	f8c4 6164 	str.w	r6, [r4, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80048b0:	4633      	mov	r3, r6
 80048b2:	2200      	movs	r2, #0
 80048b4:	2180      	movs	r1, #128	; 0x80
 80048b6:	4620      	mov	r0, r4
 80048b8:	f000 fd02 	bl	80052c0 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80048bc:	61a5      	str	r5, [r4, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80048be:	6266      	str	r6, [r4, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80048c0:	f884 529c 	strb.w	r5, [r4, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80048c4:	2300      	movs	r3, #0
 80048c6:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
  pdev->dev_config = 0U;
 80048ca:	6063      	str	r3, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 80048cc:	f8c4 32a4 	str.w	r3, [r4, #676]	; 0x2a4

  if (pdev->pClassData)
 80048d0:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 80048d4:	b12b      	cbz	r3, 80048e2 <USBD_LL_Reset+0x4c>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80048d6:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	2100      	movs	r1, #0
 80048de:	4620      	mov	r0, r4
 80048e0:	4798      	blx	r3
  }

  return USBD_OK;
}
 80048e2:	2000      	movs	r0, #0
 80048e4:	bd70      	pop	{r4, r5, r6, pc}

080048e6 <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 80048e6:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 80048e8:	2000      	movs	r0, #0
 80048ea:	4770      	bx	lr

080048ec <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 80048ec:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80048f0:	f880 329d 	strb.w	r3, [r0, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80048f4:	2304      	movs	r3, #4
 80048f6:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  return USBD_OK;
}
 80048fa:	2000      	movs	r0, #0
 80048fc:	4770      	bx	lr

080048fe <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80048fe:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004902:	2b04      	cmp	r3, #4
  {
    pdev->dev_state = pdev->dev_old_state;
 8004904:	bf04      	itt	eq
 8004906:	f890 329d 	ldrbeq.w	r3, [r0, #669]	; 0x29d
 800490a:	f880 329c 	strbeq.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 800490e:	2000      	movs	r0, #0
 8004910:	4770      	bx	lr

08004912 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8004912:	b508      	push	{r3, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004914:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004918:	2b03      	cmp	r3, #3
 800491a:	d001      	beq.n	8004920 <USBD_LL_SOF+0xe>
      pdev->pClass->SOF(pdev);
    }
  }

  return USBD_OK;
}
 800491c:	2000      	movs	r0, #0
 800491e:	bd08      	pop	{r3, pc}
    if (pdev->pClass->SOF != NULL)
 8004920:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004924:	69db      	ldr	r3, [r3, #28]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d0f8      	beq.n	800491c <USBD_LL_SOF+0xa>
      pdev->pClass->SOF(pdev);
 800492a:	4798      	blx	r3
 800492c:	e7f6      	b.n	800491c <USBD_LL_SOF+0xa>

0800492e <USBD_ParseSetupRequest>:
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
  req->bmRequest = *(uint8_t *)(pdata);
 800492e:	780b      	ldrb	r3, [r1, #0]
 8004930:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8004932:	784b      	ldrb	r3, [r1, #1]
 8004934:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8004936:	78ca      	ldrb	r2, [r1, #3]
 8004938:	788b      	ldrb	r3, [r1, #2]
 800493a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800493e:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8004940:	794a      	ldrb	r2, [r1, #5]
 8004942:	790b      	ldrb	r3, [r1, #4]
 8004944:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8004948:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800494a:	79ca      	ldrb	r2, [r1, #7]
 800494c:	798b      	ldrb	r3, [r1, #6]
 800494e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8004952:	80c3      	strh	r3, [r0, #6]

}
 8004954:	4770      	bx	lr

08004956 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8004956:	b510      	push	{r4, lr}
 8004958:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev, 0x80U);
 800495a:	2180      	movs	r1, #128	; 0x80
 800495c:	f000 fcc3 	bl	80052e6 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8004960:	2100      	movs	r1, #0
 8004962:	4620      	mov	r0, r4
 8004964:	f000 fcbf 	bl	80052e6 <USBD_LL_StallEP>
}
 8004968:	bd10      	pop	{r4, pc}
	...

0800496c <USBD_StdDevReq>:
{
 800496c:	b530      	push	{r4, r5, lr}
 800496e:	b083      	sub	sp, #12
 8004970:	4605      	mov	r5, r0
 8004972:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004974:	780b      	ldrb	r3, [r1, #0]
 8004976:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800497a:	2b20      	cmp	r3, #32
 800497c:	d005      	beq.n	800498a <USBD_StdDevReq+0x1e>
 800497e:	2b40      	cmp	r3, #64	; 0x40
 8004980:	d003      	beq.n	800498a <USBD_StdDevReq+0x1e>
 8004982:	b15b      	cbz	r3, 800499c <USBD_StdDevReq+0x30>
      USBD_CtlError(pdev, req);
 8004984:	f7ff ffe7 	bl	8004956 <USBD_CtlError>
      break;
 8004988:	e005      	b.n	8004996 <USBD_StdDevReq+0x2a>
      pdev->pClass->Setup(pdev, req);
 800498a:	f8d5 32b4 	ldr.w	r3, [r5, #692]	; 0x2b4
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	4621      	mov	r1, r4
 8004992:	4628      	mov	r0, r5
 8004994:	4798      	blx	r3
}
 8004996:	2000      	movs	r0, #0
 8004998:	b003      	add	sp, #12
 800499a:	bd30      	pop	{r4, r5, pc}
      switch (req->bRequest)
 800499c:	784b      	ldrb	r3, [r1, #1]
 800499e:	2b09      	cmp	r3, #9
 80049a0:	f200 8199 	bhi.w	8004cd6 <USBD_StdDevReq+0x36a>
 80049a4:	e8df f013 	tbh	[pc, r3, lsl #1]
 80049a8:	01850160 	.word	0x01850160
 80049ac:	017c0197 	.word	0x017c0197
 80049b0:	00c90197 	.word	0x00c90197
 80049b4:	0197000a 	.word	0x0197000a
 80049b8:	00ef0141 	.word	0x00ef0141
  uint16_t len = 0U;
 80049bc:	2300      	movs	r3, #0
 80049be:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 80049c2:	884a      	ldrh	r2, [r1, #2]
 80049c4:	0a13      	lsrs	r3, r2, #8
 80049c6:	3b01      	subs	r3, #1
 80049c8:	2b06      	cmp	r3, #6
 80049ca:	f200 80a4 	bhi.w	8004b16 <USBD_StdDevReq+0x1aa>
 80049ce:	e8df f003 	tbb	[pc, r3]
 80049d2:	1804      	.short	0x1804
 80049d4:	86a2a22c 	.word	0x86a2a22c
 80049d8:	93          	.byte	0x93
 80049d9:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80049da:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f10d 0106 	add.w	r1, sp, #6
 80049e4:	7c00      	ldrb	r0, [r0, #16]
 80049e6:	4798      	blx	r3
    if ((len != 0U) && (req->wLength != 0U))
 80049e8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80049ec:	2a00      	cmp	r2, #0
 80049ee:	f000 809f 	beq.w	8004b30 <USBD_StdDevReq+0x1c4>
 80049f2:	88e3      	ldrh	r3, [r4, #6]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	f040 8092 	bne.w	8004b1e <USBD_StdDevReq+0x1b2>
      (void)USBD_CtlSendStatus(pdev);
 80049fa:	4628      	mov	r0, r5
 80049fc:	f000 fac6 	bl	8004f8c <USBD_CtlSendStatus>
 8004a00:	e7c9      	b.n	8004996 <USBD_StdDevReq+0x2a>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004a02:	7c03      	ldrb	r3, [r0, #16]
 8004a04:	b943      	cbnz	r3, 8004a18 <USBD_StdDevReq+0xac>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8004a06:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004a0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a0c:	f10d 0006 	add.w	r0, sp, #6
 8004a10:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8004a12:	2302      	movs	r3, #2
 8004a14:	7043      	strb	r3, [r0, #1]
 8004a16:	e7e7      	b.n	80049e8 <USBD_StdDevReq+0x7c>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8004a18:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a1e:	f10d 0006 	add.w	r0, sp, #6
 8004a22:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8004a24:	2302      	movs	r3, #2
 8004a26:	7043      	strb	r3, [r0, #1]
 8004a28:	e7de      	b.n	80049e8 <USBD_StdDevReq+0x7c>
      switch ((uint8_t)(req->wValue))
 8004a2a:	b2d2      	uxtb	r2, r2
 8004a2c:	2a05      	cmp	r2, #5
 8004a2e:	d852      	bhi.n	8004ad6 <USBD_StdDevReq+0x16a>
 8004a30:	e8df f002 	tbb	[pc, r2]
 8004a34:	2a1d1003 	.word	0x2a1d1003
 8004a38:	4437      	.short	0x4437
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8004a3a:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	b123      	cbz	r3, 8004a4c <USBD_StdDevReq+0xe0>
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8004a42:	f10d 0106 	add.w	r1, sp, #6
 8004a46:	7c00      	ldrb	r0, [r0, #16]
 8004a48:	4798      	blx	r3
 8004a4a:	e7cd      	b.n	80049e8 <USBD_StdDevReq+0x7c>
            USBD_CtlError(pdev, req);
 8004a4c:	4621      	mov	r1, r4
 8004a4e:	f7ff ff82 	bl	8004956 <USBD_CtlError>
 8004a52:	e7a0      	b.n	8004996 <USBD_StdDevReq+0x2a>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8004a54:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	b123      	cbz	r3, 8004a66 <USBD_StdDevReq+0xfa>
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8004a5c:	f10d 0106 	add.w	r1, sp, #6
 8004a60:	7c00      	ldrb	r0, [r0, #16]
 8004a62:	4798      	blx	r3
 8004a64:	e7c0      	b.n	80049e8 <USBD_StdDevReq+0x7c>
            USBD_CtlError(pdev, req);
 8004a66:	4621      	mov	r1, r4
 8004a68:	f7ff ff75 	bl	8004956 <USBD_CtlError>
 8004a6c:	e793      	b.n	8004996 <USBD_StdDevReq+0x2a>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8004a6e:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8004a72:	68db      	ldr	r3, [r3, #12]
 8004a74:	b123      	cbz	r3, 8004a80 <USBD_StdDevReq+0x114>
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8004a76:	f10d 0106 	add.w	r1, sp, #6
 8004a7a:	7c00      	ldrb	r0, [r0, #16]
 8004a7c:	4798      	blx	r3
 8004a7e:	e7b3      	b.n	80049e8 <USBD_StdDevReq+0x7c>
            USBD_CtlError(pdev, req);
 8004a80:	4621      	mov	r1, r4
 8004a82:	f7ff ff68 	bl	8004956 <USBD_CtlError>
 8004a86:	e786      	b.n	8004996 <USBD_StdDevReq+0x2a>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8004a88:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8004a8c:	691b      	ldr	r3, [r3, #16]
 8004a8e:	b123      	cbz	r3, 8004a9a <USBD_StdDevReq+0x12e>
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8004a90:	f10d 0106 	add.w	r1, sp, #6
 8004a94:	7c00      	ldrb	r0, [r0, #16]
 8004a96:	4798      	blx	r3
 8004a98:	e7a6      	b.n	80049e8 <USBD_StdDevReq+0x7c>
            USBD_CtlError(pdev, req);
 8004a9a:	4621      	mov	r1, r4
 8004a9c:	f7ff ff5b 	bl	8004956 <USBD_CtlError>
 8004aa0:	e779      	b.n	8004996 <USBD_StdDevReq+0x2a>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8004aa2:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8004aa6:	695b      	ldr	r3, [r3, #20]
 8004aa8:	b123      	cbz	r3, 8004ab4 <USBD_StdDevReq+0x148>
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8004aaa:	f10d 0106 	add.w	r1, sp, #6
 8004aae:	7c00      	ldrb	r0, [r0, #16]
 8004ab0:	4798      	blx	r3
 8004ab2:	e799      	b.n	80049e8 <USBD_StdDevReq+0x7c>
            USBD_CtlError(pdev, req);
 8004ab4:	4621      	mov	r1, r4
 8004ab6:	f7ff ff4e 	bl	8004956 <USBD_CtlError>
 8004aba:	e76c      	b.n	8004996 <USBD_StdDevReq+0x2a>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8004abc:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8004ac0:	699b      	ldr	r3, [r3, #24]
 8004ac2:	b123      	cbz	r3, 8004ace <USBD_StdDevReq+0x162>
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8004ac4:	f10d 0106 	add.w	r1, sp, #6
 8004ac8:	7c00      	ldrb	r0, [r0, #16]
 8004aca:	4798      	blx	r3
 8004acc:	e78c      	b.n	80049e8 <USBD_StdDevReq+0x7c>
            USBD_CtlError(pdev, req);
 8004ace:	4621      	mov	r1, r4
 8004ad0:	f7ff ff41 	bl	8004956 <USBD_CtlError>
 8004ad4:	e75f      	b.n	8004996 <USBD_StdDevReq+0x2a>
          USBD_CtlError(pdev, req);
 8004ad6:	4621      	mov	r1, r4
 8004ad8:	f7ff ff3d 	bl	8004956 <USBD_CtlError>
 8004adc:	e75b      	b.n	8004996 <USBD_StdDevReq+0x2a>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004ade:	7c03      	ldrb	r3, [r0, #16]
 8004ae0:	b933      	cbnz	r3, 8004af0 <USBD_StdDevReq+0x184>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8004ae2:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004ae6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ae8:	f10d 0006 	add.w	r0, sp, #6
 8004aec:	4798      	blx	r3
 8004aee:	e77b      	b.n	80049e8 <USBD_StdDevReq+0x7c>
        USBD_CtlError(pdev, req);
 8004af0:	4621      	mov	r1, r4
 8004af2:	f7ff ff30 	bl	8004956 <USBD_CtlError>
 8004af6:	e74e      	b.n	8004996 <USBD_StdDevReq+0x2a>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004af8:	7c03      	ldrb	r3, [r0, #16]
 8004afa:	b943      	cbnz	r3, 8004b0e <USBD_StdDevReq+0x1a2>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8004afc:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b02:	f10d 0006 	add.w	r0, sp, #6
 8004b06:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8004b08:	2307      	movs	r3, #7
 8004b0a:	7043      	strb	r3, [r0, #1]
 8004b0c:	e76c      	b.n	80049e8 <USBD_StdDevReq+0x7c>
        USBD_CtlError(pdev, req);
 8004b0e:	4621      	mov	r1, r4
 8004b10:	f7ff ff21 	bl	8004956 <USBD_CtlError>
 8004b14:	e73f      	b.n	8004996 <USBD_StdDevReq+0x2a>
      USBD_CtlError(pdev, req);
 8004b16:	4621      	mov	r1, r4
 8004b18:	f7ff ff1d 	bl	8004956 <USBD_CtlError>
 8004b1c:	e73b      	b.n	8004996 <USBD_StdDevReq+0x2a>
      len = MIN(len, req->wLength);
 8004b1e:	429a      	cmp	r2, r3
 8004b20:	bf28      	it	cs
 8004b22:	461a      	movcs	r2, r3
 8004b24:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8004b28:	4601      	mov	r1, r0
 8004b2a:	4628      	mov	r0, r5
 8004b2c:	f000 fa02 	bl	8004f34 <USBD_CtlSendData>
    if (req->wLength == 0U)
 8004b30:	88e3      	ldrh	r3, [r4, #6]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	f47f af2f 	bne.w	8004996 <USBD_StdDevReq+0x2a>
 8004b38:	e75f      	b.n	80049fa <USBD_StdDevReq+0x8e>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8004b3a:	888b      	ldrh	r3, [r1, #4]
 8004b3c:	b9f3      	cbnz	r3, 8004b7c <USBD_StdDevReq+0x210>
 8004b3e:	88cb      	ldrh	r3, [r1, #6]
 8004b40:	b9e3      	cbnz	r3, 8004b7c <USBD_StdDevReq+0x210>
 8004b42:	884b      	ldrh	r3, [r1, #2]
 8004b44:	2b7f      	cmp	r3, #127	; 0x7f
 8004b46:	d819      	bhi.n	8004b7c <USBD_StdDevReq+0x210>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004b48:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8004b4c:	2a03      	cmp	r2, #3
 8004b4e:	d00e      	beq.n	8004b6e <USBD_StdDevReq+0x202>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8004b50:	f003 047f 	and.w	r4, r3, #127	; 0x7f
      pdev->dev_address = dev_addr;
 8004b54:	f880 429e 	strb.w	r4, [r0, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8004b58:	4621      	mov	r1, r4
 8004b5a:	f000 fbeb 	bl	8005334 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8004b5e:	4628      	mov	r0, r5
 8004b60:	f000 fa14 	bl	8004f8c <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8004b64:	b134      	cbz	r4, 8004b74 <USBD_StdDevReq+0x208>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8004b66:	2302      	movs	r3, #2
 8004b68:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 8004b6c:	e713      	b.n	8004996 <USBD_StdDevReq+0x2a>
      USBD_CtlError(pdev, req);
 8004b6e:	f7ff fef2 	bl	8004956 <USBD_CtlError>
 8004b72:	e710      	b.n	8004996 <USBD_StdDevReq+0x2a>
        pdev->dev_state = USBD_STATE_DEFAULT;
 8004b74:	2301      	movs	r3, #1
 8004b76:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 8004b7a:	e70c      	b.n	8004996 <USBD_StdDevReq+0x2a>
    USBD_CtlError(pdev, req);
 8004b7c:	4621      	mov	r1, r4
 8004b7e:	4628      	mov	r0, r5
 8004b80:	f7ff fee9 	bl	8004956 <USBD_CtlError>
 8004b84:	e707      	b.n	8004996 <USBD_StdDevReq+0x2a>
  cfgidx = (uint8_t)(req->wValue);
 8004b86:	7889      	ldrb	r1, [r1, #2]
 8004b88:	4b54      	ldr	r3, [pc, #336]	; (8004cdc <USBD_StdDevReq+0x370>)
 8004b8a:	7019      	strb	r1, [r3, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8004b8c:	2901      	cmp	r1, #1
 8004b8e:	d80e      	bhi.n	8004bae <USBD_StdDevReq+0x242>
    switch (pdev->dev_state)
 8004b90:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004b94:	2b02      	cmp	r3, #2
 8004b96:	d00e      	beq.n	8004bb6 <USBD_StdDevReq+0x24a>
 8004b98:	2b03      	cmp	r3, #3
 8004b9a:	d021      	beq.n	8004be0 <USBD_StdDevReq+0x274>
        USBD_CtlError(pdev, req);
 8004b9c:	4621      	mov	r1, r4
 8004b9e:	f7ff feda 	bl	8004956 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8004ba2:	4b4e      	ldr	r3, [pc, #312]	; (8004cdc <USBD_StdDevReq+0x370>)
 8004ba4:	7819      	ldrb	r1, [r3, #0]
 8004ba6:	4628      	mov	r0, r5
 8004ba8:	f7ff fd90 	bl	80046cc <USBD_ClrClassConfig>
 8004bac:	e6f3      	b.n	8004996 <USBD_StdDevReq+0x2a>
    USBD_CtlError(pdev, req);
 8004bae:	4621      	mov	r1, r4
 8004bb0:	f7ff fed1 	bl	8004956 <USBD_CtlError>
 8004bb4:	e6ef      	b.n	8004996 <USBD_StdDevReq+0x2a>
        if (cfgidx)
 8004bb6:	b181      	cbz	r1, 8004bda <USBD_StdDevReq+0x26e>
          pdev->dev_config = cfgidx;
 8004bb8:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8004bba:	2303      	movs	r3, #3
 8004bbc:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8004bc0:	f7ff fd77 	bl	80046b2 <USBD_SetClassConfig>
 8004bc4:	2802      	cmp	r0, #2
 8004bc6:	d003      	beq.n	8004bd0 <USBD_StdDevReq+0x264>
          USBD_CtlSendStatus(pdev);
 8004bc8:	4628      	mov	r0, r5
 8004bca:	f000 f9df 	bl	8004f8c <USBD_CtlSendStatus>
 8004bce:	e6e2      	b.n	8004996 <USBD_StdDevReq+0x2a>
            USBD_CtlError(pdev, req);
 8004bd0:	4621      	mov	r1, r4
 8004bd2:	4628      	mov	r0, r5
 8004bd4:	f7ff febf 	bl	8004956 <USBD_CtlError>
 8004bd8:	e6dd      	b.n	8004996 <USBD_StdDevReq+0x2a>
          USBD_CtlSendStatus(pdev);
 8004bda:	f000 f9d7 	bl	8004f8c <USBD_CtlSendStatus>
 8004bde:	e6da      	b.n	8004996 <USBD_StdDevReq+0x2a>
        if (cfgidx == 0U)
 8004be0:	b189      	cbz	r1, 8004c06 <USBD_StdDevReq+0x29a>
        else if (cfgidx != pdev->dev_config)
 8004be2:	6843      	ldr	r3, [r0, #4]
 8004be4:	4299      	cmp	r1, r3
 8004be6:	d01d      	beq.n	8004c24 <USBD_StdDevReq+0x2b8>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8004be8:	b2d9      	uxtb	r1, r3
 8004bea:	f7ff fd6f 	bl	80046cc <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8004bee:	4b3b      	ldr	r3, [pc, #236]	; (8004cdc <USBD_StdDevReq+0x370>)
 8004bf0:	7819      	ldrb	r1, [r3, #0]
 8004bf2:	6069      	str	r1, [r5, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8004bf4:	4628      	mov	r0, r5
 8004bf6:	f7ff fd5c 	bl	80046b2 <USBD_SetClassConfig>
 8004bfa:	2802      	cmp	r0, #2
 8004bfc:	d00d      	beq.n	8004c1a <USBD_StdDevReq+0x2ae>
          USBD_CtlSendStatus(pdev);
 8004bfe:	4628      	mov	r0, r5
 8004c00:	f000 f9c4 	bl	8004f8c <USBD_CtlSendStatus>
 8004c04:	e6c7      	b.n	8004996 <USBD_StdDevReq+0x2a>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8004c06:	2302      	movs	r3, #2
 8004c08:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8004c0c:	6041      	str	r1, [r0, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8004c0e:	f7ff fd5d 	bl	80046cc <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8004c12:	4628      	mov	r0, r5
 8004c14:	f000 f9ba 	bl	8004f8c <USBD_CtlSendStatus>
 8004c18:	e6bd      	b.n	8004996 <USBD_StdDevReq+0x2a>
            USBD_CtlError(pdev, req);
 8004c1a:	4621      	mov	r1, r4
 8004c1c:	4628      	mov	r0, r5
 8004c1e:	f7ff fe9a 	bl	8004956 <USBD_CtlError>
 8004c22:	e6b8      	b.n	8004996 <USBD_StdDevReq+0x2a>
          USBD_CtlSendStatus(pdev);
 8004c24:	f000 f9b2 	bl	8004f8c <USBD_CtlSendStatus>
 8004c28:	e6b5      	b.n	8004996 <USBD_StdDevReq+0x2a>
  if (req->wLength != 1U)
 8004c2a:	88cb      	ldrh	r3, [r1, #6]
 8004c2c:	2b01      	cmp	r3, #1
 8004c2e:	d10b      	bne.n	8004c48 <USBD_StdDevReq+0x2dc>
    switch (pdev->dev_state)
 8004c30:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004c34:	b19b      	cbz	r3, 8004c5e <USBD_StdDevReq+0x2f2>
 8004c36:	2b02      	cmp	r3, #2
 8004c38:	d909      	bls.n	8004c4e <USBD_StdDevReq+0x2e2>
 8004c3a:	2b03      	cmp	r3, #3
 8004c3c:	d10f      	bne.n	8004c5e <USBD_StdDevReq+0x2f2>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8004c3e:	2201      	movs	r2, #1
 8004c40:	1d01      	adds	r1, r0, #4
 8004c42:	f000 f977 	bl	8004f34 <USBD_CtlSendData>
 8004c46:	e6a6      	b.n	8004996 <USBD_StdDevReq+0x2a>
    USBD_CtlError(pdev, req);
 8004c48:	f7ff fe85 	bl	8004956 <USBD_CtlError>
 8004c4c:	e6a3      	b.n	8004996 <USBD_StdDevReq+0x2a>
        pdev->dev_default_config = 0U;
 8004c4e:	4601      	mov	r1, r0
 8004c50:	2300      	movs	r3, #0
 8004c52:	f841 3f08 	str.w	r3, [r1, #8]!
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8004c56:	2201      	movs	r2, #1
 8004c58:	f000 f96c 	bl	8004f34 <USBD_CtlSendData>
 8004c5c:	e69b      	b.n	8004996 <USBD_StdDevReq+0x2a>
        USBD_CtlError(pdev, req);
 8004c5e:	4621      	mov	r1, r4
 8004c60:	4628      	mov	r0, r5
 8004c62:	f7ff fe78 	bl	8004956 <USBD_CtlError>
 8004c66:	e696      	b.n	8004996 <USBD_StdDevReq+0x2a>
  switch (pdev->dev_state)
 8004c68:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004c6c:	3b01      	subs	r3, #1
 8004c6e:	2b02      	cmp	r3, #2
 8004c70:	d813      	bhi.n	8004c9a <USBD_StdDevReq+0x32e>
      if (req->wLength != 0x2U)
 8004c72:	88cb      	ldrh	r3, [r1, #6]
 8004c74:	2b02      	cmp	r3, #2
 8004c76:	d10d      	bne.n	8004c94 <USBD_StdDevReq+0x328>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8004c78:	2301      	movs	r3, #1
 8004c7a:	60c3      	str	r3, [r0, #12]
      if (pdev->dev_remote_wakeup)
 8004c7c:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
 8004c80:	b10b      	cbz	r3, 8004c86 <USBD_StdDevReq+0x31a>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8004c82:	2303      	movs	r3, #3
 8004c84:	60c3      	str	r3, [r0, #12]
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8004c86:	2202      	movs	r2, #2
 8004c88:	f105 010c 	add.w	r1, r5, #12
 8004c8c:	4628      	mov	r0, r5
 8004c8e:	f000 f951 	bl	8004f34 <USBD_CtlSendData>
 8004c92:	e680      	b.n	8004996 <USBD_StdDevReq+0x2a>
        USBD_CtlError(pdev, req);
 8004c94:	f7ff fe5f 	bl	8004956 <USBD_CtlError>
 8004c98:	e67d      	b.n	8004996 <USBD_StdDevReq+0x2a>
      USBD_CtlError(pdev, req);
 8004c9a:	f7ff fe5c 	bl	8004956 <USBD_CtlError>
 8004c9e:	e67a      	b.n	8004996 <USBD_StdDevReq+0x2a>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8004ca0:	884b      	ldrh	r3, [r1, #2]
 8004ca2:	2b01      	cmp	r3, #1
 8004ca4:	f47f ae77 	bne.w	8004996 <USBD_StdDevReq+0x2a>
    pdev->dev_remote_wakeup = 1U;
 8004ca8:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8004cac:	f000 f96e 	bl	8004f8c <USBD_CtlSendStatus>
 8004cb0:	e671      	b.n	8004996 <USBD_StdDevReq+0x2a>
  switch (pdev->dev_state)
 8004cb2:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004cb6:	3b01      	subs	r3, #1
 8004cb8:	2b02      	cmp	r3, #2
 8004cba:	d809      	bhi.n	8004cd0 <USBD_StdDevReq+0x364>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8004cbc:	884b      	ldrh	r3, [r1, #2]
 8004cbe:	2b01      	cmp	r3, #1
 8004cc0:	f47f ae69 	bne.w	8004996 <USBD_StdDevReq+0x2a>
        pdev->dev_remote_wakeup = 0U;
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8004cca:	f000 f95f 	bl	8004f8c <USBD_CtlSendStatus>
 8004cce:	e662      	b.n	8004996 <USBD_StdDevReq+0x2a>
      USBD_CtlError(pdev, req);
 8004cd0:	f7ff fe41 	bl	8004956 <USBD_CtlError>
 8004cd4:	e65f      	b.n	8004996 <USBD_StdDevReq+0x2a>
          USBD_CtlError(pdev, req);
 8004cd6:	f7ff fe3e 	bl	8004956 <USBD_CtlError>
          break;
 8004cda:	e65c      	b.n	8004996 <USBD_StdDevReq+0x2a>
 8004cdc:	2000063e 	.word	0x2000063e

08004ce0 <USBD_StdItfReq>:
{
 8004ce0:	b538      	push	{r3, r4, r5, lr}
 8004ce2:	4605      	mov	r5, r0
 8004ce4:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004ce6:	780b      	ldrb	r3, [r1, #0]
 8004ce8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004cec:	2b20      	cmp	r3, #32
 8004cee:	d006      	beq.n	8004cfe <USBD_StdItfReq+0x1e>
 8004cf0:	2b40      	cmp	r3, #64	; 0x40
 8004cf2:	d004      	beq.n	8004cfe <USBD_StdItfReq+0x1e>
 8004cf4:	b11b      	cbz	r3, 8004cfe <USBD_StdItfReq+0x1e>
      USBD_CtlError(pdev, req);
 8004cf6:	f7ff fe2e 	bl	8004956 <USBD_CtlError>
}
 8004cfa:	2000      	movs	r0, #0
 8004cfc:	bd38      	pop	{r3, r4, r5, pc}
      switch (pdev->dev_state)
 8004cfe:	f895 329c 	ldrb.w	r3, [r5, #668]	; 0x29c
 8004d02:	3b01      	subs	r3, #1
 8004d04:	2b02      	cmp	r3, #2
 8004d06:	d816      	bhi.n	8004d36 <USBD_StdItfReq+0x56>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8004d08:	7923      	ldrb	r3, [r4, #4]
 8004d0a:	2b01      	cmp	r3, #1
 8004d0c:	d80e      	bhi.n	8004d2c <USBD_StdItfReq+0x4c>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004d0e:	f8d5 32b4 	ldr.w	r3, [r5, #692]	; 0x2b4
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	4621      	mov	r1, r4
 8004d16:	4628      	mov	r0, r5
 8004d18:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 8004d1a:	88e3      	ldrh	r3, [r4, #6]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d1ec      	bne.n	8004cfa <USBD_StdItfReq+0x1a>
 8004d20:	2800      	cmp	r0, #0
 8004d22:	d1ea      	bne.n	8004cfa <USBD_StdItfReq+0x1a>
              USBD_CtlSendStatus(pdev);
 8004d24:	4628      	mov	r0, r5
 8004d26:	f000 f931 	bl	8004f8c <USBD_CtlSendStatus>
 8004d2a:	e7e6      	b.n	8004cfa <USBD_StdItfReq+0x1a>
            USBD_CtlError(pdev, req);
 8004d2c:	4621      	mov	r1, r4
 8004d2e:	4628      	mov	r0, r5
 8004d30:	f7ff fe11 	bl	8004956 <USBD_CtlError>
 8004d34:	e7e1      	b.n	8004cfa <USBD_StdItfReq+0x1a>
          USBD_CtlError(pdev, req);
 8004d36:	4621      	mov	r1, r4
 8004d38:	4628      	mov	r0, r5
 8004d3a:	f7ff fe0c 	bl	8004956 <USBD_CtlError>
          break;
 8004d3e:	e7dc      	b.n	8004cfa <USBD_StdItfReq+0x1a>

08004d40 <USBD_StdEPReq>:
{
 8004d40:	b538      	push	{r3, r4, r5, lr}
 8004d42:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004d44:	780b      	ldrb	r3, [r1, #0]
 8004d46:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004d4a:	2b20      	cmp	r3, #32
 8004d4c:	d005      	beq.n	8004d5a <USBD_StdEPReq+0x1a>
 8004d4e:	2b40      	cmp	r3, #64	; 0x40
 8004d50:	d003      	beq.n	8004d5a <USBD_StdEPReq+0x1a>
 8004d52:	b14b      	cbz	r3, 8004d68 <USBD_StdEPReq+0x28>
      USBD_CtlError(pdev, req);
 8004d54:	f7ff fdff 	bl	8004956 <USBD_CtlError>
      break;
 8004d58:	e004      	b.n	8004d64 <USBD_StdEPReq+0x24>
      pdev->pClass->Setup(pdev, req);
 8004d5a:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8004d5e:	689b      	ldr	r3, [r3, #8]
 8004d60:	4620      	mov	r0, r4
 8004d62:	4798      	blx	r3
}
 8004d64:	2000      	movs	r0, #0
 8004d66:	bd38      	pop	{r3, r4, r5, pc}
  ep_addr  = LOBYTE(req->wIndex);
 8004d68:	888a      	ldrh	r2, [r1, #4]
 8004d6a:	b2d0      	uxtb	r0, r2
      switch (req->bRequest)
 8004d6c:	784b      	ldrb	r3, [r1, #1]
 8004d6e:	2b01      	cmp	r3, #1
 8004d70:	d02e      	beq.n	8004dd0 <USBD_StdEPReq+0x90>
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d055      	beq.n	8004e22 <USBD_StdEPReq+0xe2>
 8004d76:	2b03      	cmp	r3, #3
 8004d78:	f040 80b4 	bne.w	8004ee4 <USBD_StdEPReq+0x1a4>
          switch (pdev->dev_state)
 8004d7c:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 8004d80:	2b02      	cmp	r3, #2
 8004d82:	d005      	beq.n	8004d90 <USBD_StdEPReq+0x50>
 8004d84:	2b03      	cmp	r3, #3
 8004d86:	d013      	beq.n	8004db0 <USBD_StdEPReq+0x70>
              USBD_CtlError(pdev, req);
 8004d88:	4620      	mov	r0, r4
 8004d8a:	f7ff fde4 	bl	8004956 <USBD_CtlError>
              break;
 8004d8e:	e7e9      	b.n	8004d64 <USBD_StdEPReq+0x24>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004d90:	f010 0f7f 	tst.w	r0, #127	; 0x7f
 8004d94:	d008      	beq.n	8004da8 <USBD_StdEPReq+0x68>
                USBD_LL_StallEP(pdev, ep_addr);
 8004d96:	4601      	mov	r1, r0
 8004d98:	4620      	mov	r0, r4
 8004d9a:	f000 faa4 	bl	80052e6 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8004d9e:	2180      	movs	r1, #128	; 0x80
 8004da0:	4620      	mov	r0, r4
 8004da2:	f000 faa0 	bl	80052e6 <USBD_LL_StallEP>
 8004da6:	e7dd      	b.n	8004d64 <USBD_StdEPReq+0x24>
                USBD_CtlError(pdev, req);
 8004da8:	4620      	mov	r0, r4
 8004daa:	f7ff fdd4 	bl	8004956 <USBD_CtlError>
 8004dae:	e7d9      	b.n	8004d64 <USBD_StdEPReq+0x24>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8004db0:	884b      	ldrh	r3, [r1, #2]
 8004db2:	b923      	cbnz	r3, 8004dbe <USBD_StdEPReq+0x7e>
                if ((ep_addr != 0x00U) &&
 8004db4:	f010 0f7f 	tst.w	r0, #127	; 0x7f
 8004db8:	d001      	beq.n	8004dbe <USBD_StdEPReq+0x7e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8004dba:	88cb      	ldrh	r3, [r1, #6]
 8004dbc:	b11b      	cbz	r3, 8004dc6 <USBD_StdEPReq+0x86>
              USBD_CtlSendStatus(pdev);
 8004dbe:	4620      	mov	r0, r4
 8004dc0:	f000 f8e4 	bl	8004f8c <USBD_CtlSendStatus>
              break;
 8004dc4:	e7ce      	b.n	8004d64 <USBD_StdEPReq+0x24>
                  USBD_LL_StallEP(pdev, ep_addr);
 8004dc6:	4601      	mov	r1, r0
 8004dc8:	4620      	mov	r0, r4
 8004dca:	f000 fa8c 	bl	80052e6 <USBD_LL_StallEP>
 8004dce:	e7f6      	b.n	8004dbe <USBD_StdEPReq+0x7e>
          switch (pdev->dev_state)
 8004dd0:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 8004dd4:	2b02      	cmp	r3, #2
 8004dd6:	d005      	beq.n	8004de4 <USBD_StdEPReq+0xa4>
 8004dd8:	2b03      	cmp	r3, #3
 8004dda:	d013      	beq.n	8004e04 <USBD_StdEPReq+0xc4>
              USBD_CtlError(pdev, req);
 8004ddc:	4620      	mov	r0, r4
 8004dde:	f7ff fdba 	bl	8004956 <USBD_CtlError>
              break;
 8004de2:	e7bf      	b.n	8004d64 <USBD_StdEPReq+0x24>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004de4:	f010 0f7f 	tst.w	r0, #127	; 0x7f
 8004de8:	d008      	beq.n	8004dfc <USBD_StdEPReq+0xbc>
                USBD_LL_StallEP(pdev, ep_addr);
 8004dea:	4601      	mov	r1, r0
 8004dec:	4620      	mov	r0, r4
 8004dee:	f000 fa7a 	bl	80052e6 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8004df2:	2180      	movs	r1, #128	; 0x80
 8004df4:	4620      	mov	r0, r4
 8004df6:	f000 fa76 	bl	80052e6 <USBD_LL_StallEP>
 8004dfa:	e7b3      	b.n	8004d64 <USBD_StdEPReq+0x24>
                USBD_CtlError(pdev, req);
 8004dfc:	4620      	mov	r0, r4
 8004dfe:	f7ff fdaa 	bl	8004956 <USBD_CtlError>
 8004e02:	e7af      	b.n	8004d64 <USBD_StdEPReq+0x24>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8004e04:	884b      	ldrh	r3, [r1, #2]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d1ac      	bne.n	8004d64 <USBD_StdEPReq+0x24>
                if ((ep_addr & 0x7FU) != 0x00U)
 8004e0a:	f010 0f7f 	tst.w	r0, #127	; 0x7f
 8004e0e:	d103      	bne.n	8004e18 <USBD_StdEPReq+0xd8>
                USBD_CtlSendStatus(pdev);
 8004e10:	4620      	mov	r0, r4
 8004e12:	f000 f8bb 	bl	8004f8c <USBD_CtlSendStatus>
 8004e16:	e7a5      	b.n	8004d64 <USBD_StdEPReq+0x24>
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8004e18:	4601      	mov	r1, r0
 8004e1a:	4620      	mov	r0, r4
 8004e1c:	f000 fa6b 	bl	80052f6 <USBD_LL_ClearStallEP>
 8004e20:	e7f6      	b.n	8004e10 <USBD_StdEPReq+0xd0>
          switch (pdev->dev_state)
 8004e22:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 8004e26:	2b02      	cmp	r3, #2
 8004e28:	d005      	beq.n	8004e36 <USBD_StdEPReq+0xf6>
 8004e2a:	2b03      	cmp	r3, #3
 8004e2c:	d018      	beq.n	8004e60 <USBD_StdEPReq+0x120>
              USBD_CtlError(pdev, req);
 8004e2e:	4620      	mov	r0, r4
 8004e30:	f7ff fd91 	bl	8004956 <USBD_CtlError>
              break;
 8004e34:	e796      	b.n	8004d64 <USBD_StdEPReq+0x24>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004e36:	f010 0f7f 	tst.w	r0, #127	; 0x7f
 8004e3a:	d003      	beq.n	8004e44 <USBD_StdEPReq+0x104>
                USBD_CtlError(pdev, req);
 8004e3c:	4620      	mov	r0, r4
 8004e3e:	f7ff fd8a 	bl	8004956 <USBD_CtlError>
                break;
 8004e42:	e78f      	b.n	8004d64 <USBD_StdEPReq+0x24>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004e44:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004e48:	bf14      	ite	ne
 8004e4a:	f104 0114 	addne.w	r1, r4, #20
 8004e4e:	f504 71aa 	addeq.w	r1, r4, #340	; 0x154
              pep->status = 0x0000U;
 8004e52:	2300      	movs	r3, #0
 8004e54:	600b      	str	r3, [r1, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8004e56:	2202      	movs	r2, #2
 8004e58:	4620      	mov	r0, r4
 8004e5a:	f000 f86b 	bl	8004f34 <USBD_CtlSendData>
              break;
 8004e5e:	e781      	b.n	8004d64 <USBD_StdEPReq+0x24>
              if ((ep_addr & 0x80U) == 0x80U)
 8004e60:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004e64:	d11b      	bne.n	8004e9e <USBD_StdEPReq+0x15e>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8004e66:	f000 030f 	and.w	r3, r0, #15
 8004e6a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004e6e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004e72:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8004e76:	b333      	cbz	r3, 8004ec6 <USBD_StdEPReq+0x186>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8004e78:	f000 037f 	and.w	r3, r0, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004e7c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004e80:	eb04 0583 	add.w	r5, r4, r3, lsl #2
 8004e84:	f505 75aa 	add.w	r5, r5, #340	; 0x154
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8004e88:	f010 0f7f 	tst.w	r0, #127	; 0x7f
 8004e8c:	d11f      	bne.n	8004ece <USBD_StdEPReq+0x18e>
                pep->status = 0x0000U;
 8004e8e:	2300      	movs	r3, #0
 8004e90:	602b      	str	r3, [r5, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8004e92:	2202      	movs	r2, #2
 8004e94:	4629      	mov	r1, r5
 8004e96:	4620      	mov	r0, r4
 8004e98:	f000 f84c 	bl	8004f34 <USBD_CtlSendData>
              break;
 8004e9c:	e762      	b.n	8004d64 <USBD_StdEPReq+0x24>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8004e9e:	f000 030f 	and.w	r3, r0, #15
 8004ea2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004ea6:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004eaa:	699b      	ldr	r3, [r3, #24]
 8004eac:	b13b      	cbz	r3, 8004ebe <USBD_StdEPReq+0x17e>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004eae:	f000 057f 	and.w	r5, r0, #127	; 0x7f
 8004eb2:	3501      	adds	r5, #1
 8004eb4:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8004eb8:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8004ebc:	e7e4      	b.n	8004e88 <USBD_StdEPReq+0x148>
                  USBD_CtlError(pdev, req);
 8004ebe:	4620      	mov	r0, r4
 8004ec0:	f7ff fd49 	bl	8004956 <USBD_CtlError>
                  break;
 8004ec4:	e74e      	b.n	8004d64 <USBD_StdEPReq+0x24>
                  USBD_CtlError(pdev, req);
 8004ec6:	4620      	mov	r0, r4
 8004ec8:	f7ff fd45 	bl	8004956 <USBD_CtlError>
                  break;
 8004ecc:	e74a      	b.n	8004d64 <USBD_StdEPReq+0x24>
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8004ece:	4601      	mov	r1, r0
 8004ed0:	4620      	mov	r0, r4
 8004ed2:	f000 fa18 	bl	8005306 <USBD_LL_IsStallEP>
 8004ed6:	b110      	cbz	r0, 8004ede <USBD_StdEPReq+0x19e>
                pep->status = 0x0001U;
 8004ed8:	2301      	movs	r3, #1
 8004eda:	602b      	str	r3, [r5, #0]
 8004edc:	e7d9      	b.n	8004e92 <USBD_StdEPReq+0x152>
                pep->status = 0x0000U;
 8004ede:	2300      	movs	r3, #0
 8004ee0:	602b      	str	r3, [r5, #0]
 8004ee2:	e7d6      	b.n	8004e92 <USBD_StdEPReq+0x152>
          USBD_CtlError(pdev, req);
 8004ee4:	4620      	mov	r0, r4
 8004ee6:	f7ff fd36 	bl	8004956 <USBD_CtlError>
          break;
 8004eea:	e73b      	b.n	8004d64 <USBD_StdEPReq+0x24>

08004eec <USBD_GetString>:
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
  uint8_t idx = 0U;

  if (desc != NULL)
 8004eec:	b308      	cbz	r0, 8004f32 <USBD_GetString+0x46>
{
 8004eee:	b430      	push	{r4, r5}
 8004ef0:	4605      	mov	r5, r0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;

  while (*buf != '\0')
 8004ef2:	7803      	ldrb	r3, [r0, #0]
 8004ef4:	b133      	cbz	r3, 8004f04 <USBD_GetString+0x18>
  uint8_t  len = 0U;
 8004ef6:	2300      	movs	r3, #0
  {
    len++;
 8004ef8:	3301      	adds	r3, #1
 8004efa:	b2db      	uxtb	r3, r3
  while (*buf != '\0')
 8004efc:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 8004f00:	2c00      	cmp	r4, #0
 8004f02:	d1f9      	bne.n	8004ef8 <USBD_GetString+0xc>
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8004f04:	3301      	adds	r3, #1
 8004f06:	005b      	lsls	r3, r3, #1
 8004f08:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8004f0a:	700b      	strb	r3, [r1, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8004f0c:	2303      	movs	r3, #3
 8004f0e:	704b      	strb	r3, [r1, #1]
    while (*desc != '\0')
 8004f10:	782c      	ldrb	r4, [r5, #0]
 8004f12:	b164      	cbz	r4, 8004f2e <USBD_GetString+0x42>
 8004f14:	4628      	mov	r0, r5
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8004f16:	2302      	movs	r3, #2
      unicode[idx++] =  0U;
 8004f18:	2500      	movs	r5, #0
      unicode[idx++] = *desc++;
 8004f1a:	1c5a      	adds	r2, r3, #1
 8004f1c:	b2d2      	uxtb	r2, r2
 8004f1e:	54cc      	strb	r4, [r1, r3]
      unicode[idx++] =  0U;
 8004f20:	3302      	adds	r3, #2
 8004f22:	b2db      	uxtb	r3, r3
 8004f24:	548d      	strb	r5, [r1, r2]
    while (*desc != '\0')
 8004f26:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 8004f2a:	2c00      	cmp	r4, #0
 8004f2c:	d1f5      	bne.n	8004f1a <USBD_GetString+0x2e>
}
 8004f2e:	bc30      	pop	{r4, r5}
 8004f30:	4770      	bx	lr
 8004f32:	4770      	bx	lr

08004f34 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8004f34:	b510      	push	{r4, lr}
 8004f36:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8004f38:	2202      	movs	r2, #2
 8004f3a:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8004f3e:	61c3      	str	r3, [r0, #28]
  pdev->ep_in[0].rem_length   = len;
 8004f40:	6203      	str	r3, [r0, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8004f42:	460a      	mov	r2, r1
 8004f44:	2100      	movs	r1, #0
 8004f46:	f000 f9fd 	bl	8005344 <USBD_LL_Transmit>

  return USBD_OK;
}
 8004f4a:	2000      	movs	r0, #0
 8004f4c:	bd10      	pop	{r4, pc}

08004f4e <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8004f4e:	b508      	push	{r3, lr}
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8004f50:	4613      	mov	r3, r2
 8004f52:	460a      	mov	r2, r1
 8004f54:	2100      	movs	r1, #0
 8004f56:	f000 f9f5 	bl	8005344 <USBD_LL_Transmit>

  return USBD_OK;
}
 8004f5a:	2000      	movs	r0, #0
 8004f5c:	bd08      	pop	{r3, pc}

08004f5e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8004f5e:	b510      	push	{r4, lr}
 8004f60:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8004f62:	2203      	movs	r2, #3
 8004f64:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8004f68:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8004f6c:	f8c0 3160 	str.w	r3, [r0, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8004f70:	460a      	mov	r2, r1
 8004f72:	2100      	movs	r1, #0
 8004f74:	f000 f9ee 	bl	8005354 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8004f78:	2000      	movs	r0, #0
 8004f7a:	bd10      	pop	{r4, pc}

08004f7c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8004f7c:	b508      	push	{r3, lr}
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8004f7e:	4613      	mov	r3, r2
 8004f80:	460a      	mov	r2, r1
 8004f82:	2100      	movs	r1, #0
 8004f84:	f000 f9e6 	bl	8005354 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8004f88:	2000      	movs	r0, #0
 8004f8a:	bd08      	pop	{r3, pc}

08004f8c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8004f8c:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8004f8e:	2304      	movs	r3, #4
 8004f90:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8004f94:	2300      	movs	r3, #0
 8004f96:	461a      	mov	r2, r3
 8004f98:	4619      	mov	r1, r3
 8004f9a:	f000 f9d3 	bl	8005344 <USBD_LL_Transmit>

  return USBD_OK;
}
 8004f9e:	2000      	movs	r0, #0
 8004fa0:	bd08      	pop	{r3, pc}

08004fa2 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8004fa2:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8004fa4:	2305      	movs	r3, #5
 8004fa6:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004faa:	2300      	movs	r3, #0
 8004fac:	461a      	mov	r2, r3
 8004fae:	4619      	mov	r1, r3
 8004fb0:	f000 f9d0 	bl	8005354 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8004fb4:	2000      	movs	r0, #0
 8004fb6:	bd08      	pop	{r3, pc}

08004fb8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8004fb8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8004fba:	2200      	movs	r2, #0
 8004fbc:	490f      	ldr	r1, [pc, #60]	; (8004ffc <MX_USB_DEVICE_Init+0x44>)
 8004fbe:	4810      	ldr	r0, [pc, #64]	; (8005000 <MX_USB_DEVICE_Init+0x48>)
 8004fc0:	f7ff fb54 	bl	800466c <USBD_Init>
 8004fc4:	b970      	cbnz	r0, 8004fe4 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8004fc6:	490f      	ldr	r1, [pc, #60]	; (8005004 <MX_USB_DEVICE_Init+0x4c>)
 8004fc8:	480d      	ldr	r0, [pc, #52]	; (8005000 <MX_USB_DEVICE_Init+0x48>)
 8004fca:	f7ff fb66 	bl	800469a <USBD_RegisterClass>
 8004fce:	b960      	cbnz	r0, 8004fea <MX_USB_DEVICE_Init+0x32>
  {
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8004fd0:	490d      	ldr	r1, [pc, #52]	; (8005008 <MX_USB_DEVICE_Init+0x50>)
 8004fd2:	480b      	ldr	r0, [pc, #44]	; (8005000 <MX_USB_DEVICE_Init+0x48>)
 8004fd4:	f7ff fb1c 	bl	8004610 <USBD_CDC_RegisterInterface>
 8004fd8:	b950      	cbnz	r0, 8004ff0 <MX_USB_DEVICE_Init+0x38>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8004fda:	4809      	ldr	r0, [pc, #36]	; (8005000 <MX_USB_DEVICE_Init+0x48>)
 8004fdc:	f7ff fb64 	bl	80046a8 <USBD_Start>
 8004fe0:	b948      	cbnz	r0, 8004ff6 <MX_USB_DEVICE_Init+0x3e>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8004fe2:	bd08      	pop	{r3, pc}
    Error_Handler();
 8004fe4:	f7fb ff2c 	bl	8000e40 <Error_Handler>
 8004fe8:	e7ed      	b.n	8004fc6 <MX_USB_DEVICE_Init+0xe>
    Error_Handler();
 8004fea:	f7fb ff29 	bl	8000e40 <Error_Handler>
 8004fee:	e7ef      	b.n	8004fd0 <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 8004ff0:	f7fb ff26 	bl	8000e40 <Error_Handler>
 8004ff4:	e7f1      	b.n	8004fda <MX_USB_DEVICE_Init+0x22>
    Error_Handler();
 8004ff6:	f7fb ff23 	bl	8000e40 <Error_Handler>
}
 8004ffa:	e7f2      	b.n	8004fe2 <MX_USB_DEVICE_Init+0x2a>
 8004ffc:	20000140 	.word	0x20000140
 8005000:	20000918 	.word	0x20000918
 8005004:	20000020 	.word	0x20000020
 8005008:	20000130 	.word	0x20000130

0800500c <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 800500c:	2000      	movs	r0, #0
 800500e:	4770      	bx	lr

08005010 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 8005010:	2000      	movs	r0, #0
 8005012:	4770      	bx	lr

08005014 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8005014:	b510      	push	{r4, lr}
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8005016:	4c05      	ldr	r4, [pc, #20]	; (800502c <CDC_Receive_FS+0x18>)
 8005018:	4601      	mov	r1, r0
 800501a:	4620      	mov	r0, r4
 800501c:	f7ff fb07 	bl	800462e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8005020:	4620      	mov	r0, r4
 8005022:	f7ff fb0a 	bl	800463a <USBD_CDC_ReceivePacket>
  return (USBD_OK);
  /* USER CODE END 6 */
}
 8005026:	2000      	movs	r0, #0
 8005028:	bd10      	pop	{r4, pc}
 800502a:	bf00      	nop
 800502c:	20000918 	.word	0x20000918

08005030 <CDC_Init_FS>:
{
 8005030:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8005032:	4c06      	ldr	r4, [pc, #24]	; (800504c <CDC_Init_FS+0x1c>)
 8005034:	2200      	movs	r2, #0
 8005036:	4906      	ldr	r1, [pc, #24]	; (8005050 <CDC_Init_FS+0x20>)
 8005038:	4620      	mov	r0, r4
 800503a:	f7ff faf0 	bl	800461e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800503e:	4905      	ldr	r1, [pc, #20]	; (8005054 <CDC_Init_FS+0x24>)
 8005040:	4620      	mov	r0, r4
 8005042:	f7ff faf4 	bl	800462e <USBD_CDC_SetRxBuffer>
}
 8005046:	2000      	movs	r0, #0
 8005048:	bd10      	pop	{r4, pc}
 800504a:	bf00      	nop
 800504c:	20000918 	.word	0x20000918
 8005050:	20000fc4 	.word	0x20000fc4
 8005054:	20000bdc 	.word	0x20000bdc

08005058 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8005058:	2312      	movs	r3, #18
 800505a:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 800505c:	4800      	ldr	r0, [pc, #0]	; (8005060 <USBD_FS_DeviceDescriptor+0x8>)
 800505e:	4770      	bx	lr
 8005060:	2000015c 	.word	0x2000015c

08005064 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8005064:	2304      	movs	r3, #4
 8005066:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 8005068:	4800      	ldr	r0, [pc, #0]	; (800506c <USBD_FS_LangIDStrDescriptor+0x8>)
 800506a:	4770      	bx	lr
 800506c:	20000170 	.word	0x20000170

08005070 <IntToUnicode>:
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 8005070:	b1a2      	cbz	r2, 800509c <IntToUnicode+0x2c>
{
 8005072:	b410      	push	{r4}
 8005074:	460b      	mov	r3, r1
 8005076:	1e54      	subs	r4, r2, #1
 8005078:	b2e4      	uxtb	r4, r4
 800507a:	3102      	adds	r1, #2
 800507c:	eb01 0144 	add.w	r1, r1, r4, lsl #1
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 8005080:	2400      	movs	r4, #0
    if (((value >> 28)) < 0xA)
 8005082:	0f02      	lsrs	r2, r0, #28
 8005084:	2a09      	cmp	r2, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 8005086:	bf94      	ite	ls
 8005088:	3230      	addls	r2, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800508a:	3237      	addhi	r2, #55	; 0x37
 800508c:	701a      	strb	r2, [r3, #0]
    value = value << 4;
 800508e:	0100      	lsls	r0, r0, #4
    pbuf[2 * idx + 1] = 0;
 8005090:	705c      	strb	r4, [r3, #1]
 8005092:	3302      	adds	r3, #2
  for (idx = 0; idx < len; idx++)
 8005094:	428b      	cmp	r3, r1
 8005096:	d1f4      	bne.n	8005082 <IntToUnicode+0x12>
  }
}
 8005098:	bc10      	pop	{r4}
 800509a:	4770      	bx	lr
 800509c:	4770      	bx	lr
	...

080050a0 <USBD_FS_SerialStrDescriptor>:
{
 80050a0:	b538      	push	{r3, r4, r5, lr}
  *length = USB_SIZ_STRING_SERIAL;
 80050a2:	231a      	movs	r3, #26
 80050a4:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80050a6:	4b0b      	ldr	r3, [pc, #44]	; (80050d4 <USBD_FS_SerialStrDescriptor+0x34>)
 80050a8:	6818      	ldr	r0, [r3, #0]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80050aa:	3308      	adds	r3, #8
  deviceserial0 += deviceserial2;
 80050ac:	681b      	ldr	r3, [r3, #0]
  if (deviceserial0 != 0)
 80050ae:	18c0      	adds	r0, r0, r3
 80050b0:	d101      	bne.n	80050b6 <USBD_FS_SerialStrDescriptor+0x16>
}
 80050b2:	4809      	ldr	r0, [pc, #36]	; (80050d8 <USBD_FS_SerialStrDescriptor+0x38>)
 80050b4:	bd38      	pop	{r3, r4, r5, pc}
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80050b6:	4b09      	ldr	r3, [pc, #36]	; (80050dc <USBD_FS_SerialStrDescriptor+0x3c>)
 80050b8:	681d      	ldr	r5, [r3, #0]
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80050ba:	4c07      	ldr	r4, [pc, #28]	; (80050d8 <USBD_FS_SerialStrDescriptor+0x38>)
 80050bc:	2208      	movs	r2, #8
 80050be:	1ca1      	adds	r1, r4, #2
 80050c0:	f7ff ffd6 	bl	8005070 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80050c4:	2204      	movs	r2, #4
 80050c6:	f104 0112 	add.w	r1, r4, #18
 80050ca:	4628      	mov	r0, r5
 80050cc:	f7ff ffd0 	bl	8005070 <IntToUnicode>
 80050d0:	e7ef      	b.n	80050b2 <USBD_FS_SerialStrDescriptor+0x12>
 80050d2:	bf00      	nop
 80050d4:	1ffff7e8 	.word	0x1ffff7e8
 80050d8:	20000174 	.word	0x20000174
 80050dc:	1ffff7ec 	.word	0x1ffff7ec

080050e0 <USBD_FS_ProductStrDescriptor>:
{
 80050e0:	b508      	push	{r3, lr}
 80050e2:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80050e4:	4902      	ldr	r1, [pc, #8]	; (80050f0 <USBD_FS_ProductStrDescriptor+0x10>)
 80050e6:	4803      	ldr	r0, [pc, #12]	; (80050f4 <USBD_FS_ProductStrDescriptor+0x14>)
 80050e8:	f7ff ff00 	bl	8004eec <USBD_GetString>
}
 80050ec:	4800      	ldr	r0, [pc, #0]	; (80050f0 <USBD_FS_ProductStrDescriptor+0x10>)
 80050ee:	bd08      	pop	{r3, pc}
 80050f0:	200013ac 	.word	0x200013ac
 80050f4:	08005cf8 	.word	0x08005cf8

080050f8 <USBD_FS_ManufacturerStrDescriptor>:
{
 80050f8:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80050fa:	4c04      	ldr	r4, [pc, #16]	; (800510c <USBD_FS_ManufacturerStrDescriptor+0x14>)
 80050fc:	460a      	mov	r2, r1
 80050fe:	4621      	mov	r1, r4
 8005100:	4803      	ldr	r0, [pc, #12]	; (8005110 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8005102:	f7ff fef3 	bl	8004eec <USBD_GetString>
}
 8005106:	4620      	mov	r0, r4
 8005108:	bd10      	pop	{r4, pc}
 800510a:	bf00      	nop
 800510c:	200013ac 	.word	0x200013ac
 8005110:	08005ce4 	.word	0x08005ce4

08005114 <USBD_FS_ConfigStrDescriptor>:
{
 8005114:	b508      	push	{r3, lr}
 8005116:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005118:	4902      	ldr	r1, [pc, #8]	; (8005124 <USBD_FS_ConfigStrDescriptor+0x10>)
 800511a:	4803      	ldr	r0, [pc, #12]	; (8005128 <USBD_FS_ConfigStrDescriptor+0x14>)
 800511c:	f7ff fee6 	bl	8004eec <USBD_GetString>
}
 8005120:	4800      	ldr	r0, [pc, #0]	; (8005124 <USBD_FS_ConfigStrDescriptor+0x10>)
 8005122:	bd08      	pop	{r3, pc}
 8005124:	200013ac 	.word	0x200013ac
 8005128:	08005cc8 	.word	0x08005cc8

0800512c <USBD_FS_InterfaceStrDescriptor>:
{
 800512c:	b508      	push	{r3, lr}
 800512e:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005130:	4902      	ldr	r1, [pc, #8]	; (800513c <USBD_FS_InterfaceStrDescriptor+0x10>)
 8005132:	4803      	ldr	r0, [pc, #12]	; (8005140 <USBD_FS_InterfaceStrDescriptor+0x14>)
 8005134:	f7ff feda 	bl	8004eec <USBD_GetString>
}
 8005138:	4800      	ldr	r0, [pc, #0]	; (800513c <USBD_FS_InterfaceStrDescriptor+0x10>)
 800513a:	bd08      	pop	{r3, pc}
 800513c:	200013ac 	.word	0x200013ac
 8005140:	08005cd4 	.word	0x08005cd4

08005144 <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 8005144:	b120      	cbz	r0, 8005150 <USBD_Get_USB_Status+0xc>
  {
    case HAL_OK :
      usb_status = USBD_OK;
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8005146:	2802      	cmp	r0, #2
 8005148:	bf0c      	ite	eq
 800514a:	2001      	moveq	r0, #1
 800514c:	2002      	movne	r0, #2
 800514e:	4770      	bx	lr
      usb_status = USBD_OK;
 8005150:	2000      	movs	r0, #0
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 8005152:	4770      	bx	lr

08005154 <HAL_PCD_MspInit>:
  if(pcdHandle->Instance==USB)
 8005154:	6802      	ldr	r2, [r0, #0]
 8005156:	4b0e      	ldr	r3, [pc, #56]	; (8005190 <HAL_PCD_MspInit+0x3c>)
 8005158:	429a      	cmp	r2, r3
 800515a:	d000      	beq.n	800515e <HAL_PCD_MspInit+0xa>
 800515c:	4770      	bx	lr
{
 800515e:	b500      	push	{lr}
 8005160:	b083      	sub	sp, #12
    __HAL_RCC_USB_CLK_ENABLE();
 8005162:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8005166:	69da      	ldr	r2, [r3, #28]
 8005168:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800516c:	61da      	str	r2, [r3, #28]
 800516e:	69db      	ldr	r3, [r3, #28]
 8005170:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005174:	9301      	str	r3, [sp, #4]
 8005176:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8005178:	2200      	movs	r2, #0
 800517a:	4611      	mov	r1, r2
 800517c:	2014      	movs	r0, #20
 800517e:	f7fc f9cb 	bl	8001518 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8005182:	2014      	movs	r0, #20
 8005184:	f7fc f9fa 	bl	800157c <HAL_NVIC_EnableIRQ>
}
 8005188:	b003      	add	sp, #12
 800518a:	f85d fb04 	ldr.w	pc, [sp], #4
 800518e:	bf00      	nop
 8005190:	40005c00 	.word	0x40005c00

08005194 <HAL_PCD_SetupStageCallback>:
{
 8005194:	b508      	push	{r3, lr}
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8005196:	f500 712c 	add.w	r1, r0, #688	; 0x2b0
 800519a:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 800519e:	f7ff fa9c 	bl	80046da <USBD_LL_SetupStage>
}
 80051a2:	bd08      	pop	{r3, pc}

080051a4 <HAL_PCD_DataOutStageCallback>:
{
 80051a4:	b508      	push	{r3, lr}
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80051a6:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 80051aa:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 80051ae:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 80051b2:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 80051b6:	f7ff fabd 	bl	8004734 <USBD_LL_DataOutStage>
}
 80051ba:	bd08      	pop	{r3, pc}

080051bc <HAL_PCD_DataInStageCallback>:
{
 80051bc:	b508      	push	{r3, lr}
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80051be:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 80051c2:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 80051c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80051c8:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 80051cc:	f7ff fafa 	bl	80047c4 <USBD_LL_DataInStage>
}
 80051d0:	bd08      	pop	{r3, pc}

080051d2 <HAL_PCD_SOFCallback>:
{
 80051d2:	b508      	push	{r3, lr}
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80051d4:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 80051d8:	f7ff fb9b 	bl	8004912 <USBD_LL_SOF>
}
 80051dc:	bd08      	pop	{r3, pc}

080051de <HAL_PCD_ResetCallback>:
{
 80051de:	b510      	push	{r4, lr}
 80051e0:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80051e2:	6883      	ldr	r3, [r0, #8]
 80051e4:	2b02      	cmp	r3, #2
 80051e6:	d001      	beq.n	80051ec <HAL_PCD_ResetCallback+0xe>
    Error_Handler();
 80051e8:	f7fb fe2a 	bl	8000e40 <Error_Handler>
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80051ec:	2101      	movs	r1, #1
 80051ee:	f8d4 02e8 	ldr.w	r0, [r4, #744]	; 0x2e8
 80051f2:	f7ff fb78 	bl	80048e6 <USBD_LL_SetSpeed>
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80051f6:	f8d4 02e8 	ldr.w	r0, [r4, #744]	; 0x2e8
 80051fa:	f7ff fb4c 	bl	8004896 <USBD_LL_Reset>
}
 80051fe:	bd10      	pop	{r4, pc}

08005200 <HAL_PCD_SuspendCallback>:
{
 8005200:	b510      	push	{r4, lr}
 8005202:	4604      	mov	r4, r0
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8005204:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8005208:	f7ff fb70 	bl	80048ec <USBD_LL_Suspend>
  if (hpcd->Init.low_power_enable)
 800520c:	69a3      	ldr	r3, [r4, #24]
 800520e:	b123      	cbz	r3, 800521a <HAL_PCD_SuspendCallback+0x1a>
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8005210:	4a02      	ldr	r2, [pc, #8]	; (800521c <HAL_PCD_SuspendCallback+0x1c>)
 8005212:	6913      	ldr	r3, [r2, #16]
 8005214:	f043 0306 	orr.w	r3, r3, #6
 8005218:	6113      	str	r3, [r2, #16]
}
 800521a:	bd10      	pop	{r4, pc}
 800521c:	e000ed00 	.word	0xe000ed00

08005220 <HAL_PCD_ResumeCallback>:
{
 8005220:	b508      	push	{r3, lr}
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8005222:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8005226:	f7ff fb6a 	bl	80048fe <USBD_LL_Resume>
}
 800522a:	bd08      	pop	{r3, pc}

0800522c <USBD_LL_Init>:
{
 800522c:	b510      	push	{r4, lr}
 800522e:	4604      	mov	r4, r0
  hpcd_USB_FS.pData = pdev;
 8005230:	481d      	ldr	r0, [pc, #116]	; (80052a8 <USBD_LL_Init+0x7c>)
 8005232:	f8c0 42e8 	str.w	r4, [r0, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8005236:	f8c4 02c0 	str.w	r0, [r4, #704]	; 0x2c0
  hpcd_USB_FS.Instance = USB;
 800523a:	4b1c      	ldr	r3, [pc, #112]	; (80052ac <USBD_LL_Init+0x80>)
 800523c:	6003      	str	r3, [r0, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800523e:	2308      	movs	r3, #8
 8005240:	6043      	str	r3, [r0, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8005242:	2302      	movs	r3, #2
 8005244:	6083      	str	r3, [r0, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8005246:	2300      	movs	r3, #0
 8005248:	6183      	str	r3, [r0, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800524a:	61c3      	str	r3, [r0, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800524c:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800524e:	f7fc fabe 	bl	80017ce <HAL_PCD_Init>
 8005252:	bb30      	cbnz	r0, 80052a2 <USBD_LL_Init+0x76>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8005254:	2318      	movs	r3, #24
 8005256:	2200      	movs	r2, #0
 8005258:	4611      	mov	r1, r2
 800525a:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 800525e:	f7fd f9c9 	bl	80025f4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8005262:	2358      	movs	r3, #88	; 0x58
 8005264:	2200      	movs	r2, #0
 8005266:	2180      	movs	r1, #128	; 0x80
 8005268:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 800526c:	f7fd f9c2 	bl	80025f4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8005270:	23c0      	movs	r3, #192	; 0xc0
 8005272:	2200      	movs	r2, #0
 8005274:	2181      	movs	r1, #129	; 0x81
 8005276:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 800527a:	f7fd f9bb 	bl	80025f4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800527e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8005282:	2200      	movs	r2, #0
 8005284:	2101      	movs	r1, #1
 8005286:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 800528a:	f7fd f9b3 	bl	80025f4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800528e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005292:	2200      	movs	r2, #0
 8005294:	2182      	movs	r1, #130	; 0x82
 8005296:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 800529a:	f7fd f9ab 	bl	80025f4 <HAL_PCDEx_PMAConfig>
}
 800529e:	2000      	movs	r0, #0
 80052a0:	bd10      	pop	{r4, pc}
    Error_Handler( );
 80052a2:	f7fb fdcd 	bl	8000e40 <Error_Handler>
 80052a6:	e7d5      	b.n	8005254 <USBD_LL_Init+0x28>
 80052a8:	200015ac 	.word	0x200015ac
 80052ac:	40005c00 	.word	0x40005c00

080052b0 <USBD_LL_Start>:
{
 80052b0:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 80052b2:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80052b6:	f7fc fb03 	bl	80018c0 <HAL_PCD_Start>
  usb_status =  USBD_Get_USB_Status(hal_status);
 80052ba:	f7ff ff43 	bl	8005144 <USBD_Get_USB_Status>
}
 80052be:	bd08      	pop	{r3, pc}

080052c0 <USBD_LL_OpenEP>:
{
 80052c0:	b510      	push	{r4, lr}
 80052c2:	461c      	mov	r4, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80052c4:	4613      	mov	r3, r2
 80052c6:	4622      	mov	r2, r4
 80052c8:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80052cc:	f7fd f870 	bl	80023b0 <HAL_PCD_EP_Open>
  usb_status =  USBD_Get_USB_Status(hal_status);
 80052d0:	f7ff ff38 	bl	8005144 <USBD_Get_USB_Status>
}
 80052d4:	bd10      	pop	{r4, pc}

080052d6 <USBD_LL_CloseEP>:
{
 80052d6:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80052d8:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80052dc:	f7fd f8a2 	bl	8002424 <HAL_PCD_EP_Close>
  usb_status =  USBD_Get_USB_Status(hal_status);
 80052e0:	f7ff ff30 	bl	8005144 <USBD_Get_USB_Status>
}
 80052e4:	bd08      	pop	{r3, pc}

080052e6 <USBD_LL_StallEP>:
{
 80052e6:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80052e8:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80052ec:	f7fd f90d 	bl	800250a <HAL_PCD_EP_SetStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 80052f0:	f7ff ff28 	bl	8005144 <USBD_Get_USB_Status>
}
 80052f4:	bd08      	pop	{r3, pc}

080052f6 <USBD_LL_ClearStallEP>:
{
 80052f6:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80052f8:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80052fc:	f7fd f940 	bl	8002580 <HAL_PCD_EP_ClrStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005300:	f7ff ff20 	bl	8005144 <USBD_Get_USB_Status>
}
 8005304:	bd08      	pop	{r3, pc}

08005306 <USBD_LL_IsStallEP>:
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8005306:	f8d0 22c0 	ldr.w	r2, [r0, #704]	; 0x2c0
  if((ep_addr & 0x80) == 0x80)
 800530a:	f011 0f80 	tst.w	r1, #128	; 0x80
 800530e:	d108      	bne.n	8005322 <USBD_LL_IsStallEP+0x1c>
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8005310:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8005314:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8005318:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 800531c:	f891 016a 	ldrb.w	r0, [r1, #362]	; 0x16a
}
 8005320:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8005322:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 8005326:	3301      	adds	r3, #1
 8005328:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800532c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005330:	7898      	ldrb	r0, [r3, #2]
 8005332:	4770      	bx	lr

08005334 <USBD_LL_SetUSBAddress>:
{
 8005334:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8005336:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800533a:	f7fc fada 	bl	80018f2 <HAL_PCD_SetAddress>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800533e:	f7ff ff01 	bl	8005144 <USBD_Get_USB_Status>
}
 8005342:	bd08      	pop	{r3, pc}

08005344 <USBD_LL_Transmit>:
{
 8005344:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8005346:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800534a:	f7fd f8c1 	bl	80024d0 <HAL_PCD_EP_Transmit>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800534e:	f7ff fef9 	bl	8005144 <USBD_Get_USB_Status>
}
 8005352:	bd08      	pop	{r3, pc}

08005354 <USBD_LL_PrepareReceive>:
{
 8005354:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8005356:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800535a:	f7fd f894 	bl	8002486 <HAL_PCD_EP_Receive>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800535e:	f7ff fef1 	bl	8005144 <USBD_Get_USB_Status>
}
 8005362:	bd08      	pop	{r3, pc}

08005364 <USBD_LL_GetRxDataSize>:
{
 8005364:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8005366:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800536a:	f7fd f8a8 	bl	80024be <HAL_PCD_EP_GetRxCount>
}
 800536e:	bd08      	pop	{r3, pc}

08005370 <USBD_static_malloc>:
}
 8005370:	4800      	ldr	r0, [pc, #0]	; (8005374 <USBD_static_malloc+0x4>)
 8005372:	4770      	bx	lr
 8005374:	20000640 	.word	0x20000640

08005378 <USBD_static_free>:
}
 8005378:	4770      	bx	lr

0800537a <HAL_PCDEx_SetConnectionState>:
}
 800537a:	4770      	bx	lr

0800537c <_ZdlPvj>:
 800537c:	f000 b800 	b.w	8005380 <_ZdlPv>

08005380 <_ZdlPv>:
 8005380:	f000 b824 	b.w	80053cc <free>

08005384 <__libc_init_array>:
 8005384:	b570      	push	{r4, r5, r6, lr}
 8005386:	2500      	movs	r5, #0
 8005388:	4e0c      	ldr	r6, [pc, #48]	; (80053bc <__libc_init_array+0x38>)
 800538a:	4c0d      	ldr	r4, [pc, #52]	; (80053c0 <__libc_init_array+0x3c>)
 800538c:	1ba4      	subs	r4, r4, r6
 800538e:	10a4      	asrs	r4, r4, #2
 8005390:	42a5      	cmp	r5, r4
 8005392:	d109      	bne.n	80053a8 <__libc_init_array+0x24>
 8005394:	f000 f878 	bl	8005488 <_init>
 8005398:	2500      	movs	r5, #0
 800539a:	4e0a      	ldr	r6, [pc, #40]	; (80053c4 <__libc_init_array+0x40>)
 800539c:	4c0a      	ldr	r4, [pc, #40]	; (80053c8 <__libc_init_array+0x44>)
 800539e:	1ba4      	subs	r4, r4, r6
 80053a0:	10a4      	asrs	r4, r4, #2
 80053a2:	42a5      	cmp	r5, r4
 80053a4:	d105      	bne.n	80053b2 <__libc_init_array+0x2e>
 80053a6:	bd70      	pop	{r4, r5, r6, pc}
 80053a8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80053ac:	4798      	blx	r3
 80053ae:	3501      	adds	r5, #1
 80053b0:	e7ee      	b.n	8005390 <__libc_init_array+0xc>
 80053b2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80053b6:	4798      	blx	r3
 80053b8:	3501      	adds	r5, #1
 80053ba:	e7f2      	b.n	80053a2 <__libc_init_array+0x1e>
 80053bc:	08005d70 	.word	0x08005d70
 80053c0:	08005d70 	.word	0x08005d70
 80053c4:	08005d70 	.word	0x08005d70
 80053c8:	08005d78 	.word	0x08005d78

080053cc <free>:
 80053cc:	4b02      	ldr	r3, [pc, #8]	; (80053d8 <free+0xc>)
 80053ce:	4601      	mov	r1, r0
 80053d0:	6818      	ldr	r0, [r3, #0]
 80053d2:	f000 b80b 	b.w	80053ec <_free_r>
 80053d6:	bf00      	nop
 80053d8:	20000190 	.word	0x20000190

080053dc <memset>:
 80053dc:	4603      	mov	r3, r0
 80053de:	4402      	add	r2, r0
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d100      	bne.n	80053e6 <memset+0xa>
 80053e4:	4770      	bx	lr
 80053e6:	f803 1b01 	strb.w	r1, [r3], #1
 80053ea:	e7f9      	b.n	80053e0 <memset+0x4>

080053ec <_free_r>:
 80053ec:	b538      	push	{r3, r4, r5, lr}
 80053ee:	4605      	mov	r5, r0
 80053f0:	2900      	cmp	r1, #0
 80053f2:	d043      	beq.n	800547c <_free_r+0x90>
 80053f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80053f8:	1f0c      	subs	r4, r1, #4
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	bfb8      	it	lt
 80053fe:	18e4      	addlt	r4, r4, r3
 8005400:	f000 f840 	bl	8005484 <__malloc_lock>
 8005404:	4a1e      	ldr	r2, [pc, #120]	; (8005480 <_free_r+0x94>)
 8005406:	6813      	ldr	r3, [r2, #0]
 8005408:	4610      	mov	r0, r2
 800540a:	b933      	cbnz	r3, 800541a <_free_r+0x2e>
 800540c:	6063      	str	r3, [r4, #4]
 800540e:	6014      	str	r4, [r2, #0]
 8005410:	4628      	mov	r0, r5
 8005412:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005416:	f000 b836 	b.w	8005486 <__malloc_unlock>
 800541a:	42a3      	cmp	r3, r4
 800541c:	d90b      	bls.n	8005436 <_free_r+0x4a>
 800541e:	6821      	ldr	r1, [r4, #0]
 8005420:	1862      	adds	r2, r4, r1
 8005422:	4293      	cmp	r3, r2
 8005424:	bf01      	itttt	eq
 8005426:	681a      	ldreq	r2, [r3, #0]
 8005428:	685b      	ldreq	r3, [r3, #4]
 800542a:	1852      	addeq	r2, r2, r1
 800542c:	6022      	streq	r2, [r4, #0]
 800542e:	6063      	str	r3, [r4, #4]
 8005430:	6004      	str	r4, [r0, #0]
 8005432:	e7ed      	b.n	8005410 <_free_r+0x24>
 8005434:	4613      	mov	r3, r2
 8005436:	685a      	ldr	r2, [r3, #4]
 8005438:	b10a      	cbz	r2, 800543e <_free_r+0x52>
 800543a:	42a2      	cmp	r2, r4
 800543c:	d9fa      	bls.n	8005434 <_free_r+0x48>
 800543e:	6819      	ldr	r1, [r3, #0]
 8005440:	1858      	adds	r0, r3, r1
 8005442:	42a0      	cmp	r0, r4
 8005444:	d10b      	bne.n	800545e <_free_r+0x72>
 8005446:	6820      	ldr	r0, [r4, #0]
 8005448:	4401      	add	r1, r0
 800544a:	1858      	adds	r0, r3, r1
 800544c:	4282      	cmp	r2, r0
 800544e:	6019      	str	r1, [r3, #0]
 8005450:	d1de      	bne.n	8005410 <_free_r+0x24>
 8005452:	6810      	ldr	r0, [r2, #0]
 8005454:	6852      	ldr	r2, [r2, #4]
 8005456:	4401      	add	r1, r0
 8005458:	6019      	str	r1, [r3, #0]
 800545a:	605a      	str	r2, [r3, #4]
 800545c:	e7d8      	b.n	8005410 <_free_r+0x24>
 800545e:	d902      	bls.n	8005466 <_free_r+0x7a>
 8005460:	230c      	movs	r3, #12
 8005462:	602b      	str	r3, [r5, #0]
 8005464:	e7d4      	b.n	8005410 <_free_r+0x24>
 8005466:	6820      	ldr	r0, [r4, #0]
 8005468:	1821      	adds	r1, r4, r0
 800546a:	428a      	cmp	r2, r1
 800546c:	bf01      	itttt	eq
 800546e:	6811      	ldreq	r1, [r2, #0]
 8005470:	6852      	ldreq	r2, [r2, #4]
 8005472:	1809      	addeq	r1, r1, r0
 8005474:	6021      	streq	r1, [r4, #0]
 8005476:	6062      	str	r2, [r4, #4]
 8005478:	605c      	str	r4, [r3, #4]
 800547a:	e7c9      	b.n	8005410 <_free_r+0x24>
 800547c:	bd38      	pop	{r3, r4, r5, pc}
 800547e:	bf00      	nop
 8005480:	20000860 	.word	0x20000860

08005484 <__malloc_lock>:
 8005484:	4770      	bx	lr

08005486 <__malloc_unlock>:
 8005486:	4770      	bx	lr

08005488 <_init>:
 8005488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800548a:	bf00      	nop
 800548c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800548e:	bc08      	pop	{r3}
 8005490:	469e      	mov	lr, r3
 8005492:	4770      	bx	lr

08005494 <_fini>:
 8005494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005496:	bf00      	nop
 8005498:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800549a:	bc08      	pop	{r3}
 800549c:	469e      	mov	lr, r3
 800549e:	4770      	bx	lr
